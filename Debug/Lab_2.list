
Lab_2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003770  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000184  08003910  08003910  00013910  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003a94  08003a94  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08003a94  08003a94  00013a94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003a9c  08003a9c  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003a9c  08003a9c  00013a9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003aa0  08003aa0  00013aa0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08003aa4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000388  20000074  08003b18  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00008004  200003fc  08003b18  000203fc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_line   00009654  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_info   00008727  00000000  00000000  000296f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000018b6  00000000  00000000  00031e1f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000007a8  00000000  00000000  000336d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    000870a5  00000000  00000000  00033e80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 000006f0  00000000  00000000  000baf28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000166b7  00000000  00000000  000bb618  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d1ccf  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002554  00000000  00000000  000d1d20  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000074 	.word	0x20000074
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080038f8 	.word	0x080038f8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000078 	.word	0x20000078
 80001dc:	080038f8 	.word	0x080038f8

080001e0 <SVC_Handler>:
  .thumb //Practically this only matters to the CPU, but it ensures that the correct types of instructions get included

  .global SVC_Handler //We need to indicate to the linker that this function exists
  .thumb_func //We need to ensure that the address of our interrupt function is properly aligned or we hard fault. a LOT
  SVC_Handler: //our function name
	TST LR, 4 //TeST the 3rd bit in LR (4 is 0b1000, so its 3rd bit is 1)
 80001e0:	f01e 0f04 	tst.w	lr, #4
	ITE EQ //If Then Equal
 80001e4:	bf0c      	ite	eq
	MRSEQ R0, MSP //If the third bit is set, we are using MSP. Set us up to use that
 80001e6:	f3ef 8008 	mrseq	r0, MSP
	MRSNE R0, PSP //Otherwise, use PSP
 80001ea:	f3ef 8009 	mrsne	r0, PSP
	B SVC_Handler_Main //Go to the C function, because screw assembly
 80001ee:	f000 b9f1 	b.w	80005d4 <SVC_Handler_Main>

080001f2 <runFirstThread>:

  .global runFirstThread //Running the first thread requires some special consideration, so it is its own function
  .thumb_func
  runFirstThread:
  	//Restore MSP since we have two things on there that won't go away
  	POP {R7}
 80001f2:	bc80      	pop	{r7}
  	POP {R7}
 80001f4:	bc80      	pop	{r7}

  	//Get ready for PSP
  	MRS R0, PSP
 80001f6:	f3ef 8009 	mrs	r0, PSP
  	MOV LR, #0xFFFFFFFD
 80001fa:	f06f 0e02 	mvn.w	lr, #2
  	LDMIA R0!,{R4-R11}
 80001fe:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
  	MSR PSP, R0
 8000202:	f380 8809 	msr	PSP, r0
  	BX LR
 8000206:	4770      	bx	lr

08000208 <PendSV_Handler>:
	//Restore MSP since we have two things on there that won't go away
	//POP {R7}
	//POP {R7}

	//Perform the switch
	MRS R0, PSP
 8000208:	f3ef 8009 	mrs	r0, PSP
	STMDB R0!,{R4-R11}
 800020c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
	BL osSched
 8000210:	f000 fb72 	bl	80008f8 <osSched>
	MRS R0, PSP
 8000214:	f3ef 8009 	mrs	r0, PSP
	MOV LR, #0xFFFFFFFD
 8000218:	f06f 0e02 	mvn.w	lr, #2
	LDMIA R0!,{R4-R11}
 800021c:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
	MSR PSP, R0
 8000220:	f380 8809 	msr	PSP, r0
	BX LR
 8000224:	4770      	bx	lr
	...

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_uldivmod>:
 80002d0:	b953      	cbnz	r3, 80002e8 <__aeabi_uldivmod+0x18>
 80002d2:	b94a      	cbnz	r2, 80002e8 <__aeabi_uldivmod+0x18>
 80002d4:	2900      	cmp	r1, #0
 80002d6:	bf08      	it	eq
 80002d8:	2800      	cmpeq	r0, #0
 80002da:	bf1c      	itt	ne
 80002dc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002e0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002e4:	f000 b974 	b.w	80005d0 <__aeabi_idiv0>
 80002e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f0:	f000 f806 	bl	8000300 <__udivmoddi4>
 80002f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002fc:	b004      	add	sp, #16
 80002fe:	4770      	bx	lr

08000300 <__udivmoddi4>:
 8000300:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000304:	9d08      	ldr	r5, [sp, #32]
 8000306:	4604      	mov	r4, r0
 8000308:	468e      	mov	lr, r1
 800030a:	2b00      	cmp	r3, #0
 800030c:	d14d      	bne.n	80003aa <__udivmoddi4+0xaa>
 800030e:	428a      	cmp	r2, r1
 8000310:	4694      	mov	ip, r2
 8000312:	d969      	bls.n	80003e8 <__udivmoddi4+0xe8>
 8000314:	fab2 f282 	clz	r2, r2
 8000318:	b152      	cbz	r2, 8000330 <__udivmoddi4+0x30>
 800031a:	fa01 f302 	lsl.w	r3, r1, r2
 800031e:	f1c2 0120 	rsb	r1, r2, #32
 8000322:	fa20 f101 	lsr.w	r1, r0, r1
 8000326:	fa0c fc02 	lsl.w	ip, ip, r2
 800032a:	ea41 0e03 	orr.w	lr, r1, r3
 800032e:	4094      	lsls	r4, r2
 8000330:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000334:	0c21      	lsrs	r1, r4, #16
 8000336:	fbbe f6f8 	udiv	r6, lr, r8
 800033a:	fa1f f78c 	uxth.w	r7, ip
 800033e:	fb08 e316 	mls	r3, r8, r6, lr
 8000342:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000346:	fb06 f107 	mul.w	r1, r6, r7
 800034a:	4299      	cmp	r1, r3
 800034c:	d90a      	bls.n	8000364 <__udivmoddi4+0x64>
 800034e:	eb1c 0303 	adds.w	r3, ip, r3
 8000352:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000356:	f080 811f 	bcs.w	8000598 <__udivmoddi4+0x298>
 800035a:	4299      	cmp	r1, r3
 800035c:	f240 811c 	bls.w	8000598 <__udivmoddi4+0x298>
 8000360:	3e02      	subs	r6, #2
 8000362:	4463      	add	r3, ip
 8000364:	1a5b      	subs	r3, r3, r1
 8000366:	b2a4      	uxth	r4, r4
 8000368:	fbb3 f0f8 	udiv	r0, r3, r8
 800036c:	fb08 3310 	mls	r3, r8, r0, r3
 8000370:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000374:	fb00 f707 	mul.w	r7, r0, r7
 8000378:	42a7      	cmp	r7, r4
 800037a:	d90a      	bls.n	8000392 <__udivmoddi4+0x92>
 800037c:	eb1c 0404 	adds.w	r4, ip, r4
 8000380:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000384:	f080 810a 	bcs.w	800059c <__udivmoddi4+0x29c>
 8000388:	42a7      	cmp	r7, r4
 800038a:	f240 8107 	bls.w	800059c <__udivmoddi4+0x29c>
 800038e:	4464      	add	r4, ip
 8000390:	3802      	subs	r0, #2
 8000392:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000396:	1be4      	subs	r4, r4, r7
 8000398:	2600      	movs	r6, #0
 800039a:	b11d      	cbz	r5, 80003a4 <__udivmoddi4+0xa4>
 800039c:	40d4      	lsrs	r4, r2
 800039e:	2300      	movs	r3, #0
 80003a0:	e9c5 4300 	strd	r4, r3, [r5]
 80003a4:	4631      	mov	r1, r6
 80003a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d909      	bls.n	80003c2 <__udivmoddi4+0xc2>
 80003ae:	2d00      	cmp	r5, #0
 80003b0:	f000 80ef 	beq.w	8000592 <__udivmoddi4+0x292>
 80003b4:	2600      	movs	r6, #0
 80003b6:	e9c5 0100 	strd	r0, r1, [r5]
 80003ba:	4630      	mov	r0, r6
 80003bc:	4631      	mov	r1, r6
 80003be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c2:	fab3 f683 	clz	r6, r3
 80003c6:	2e00      	cmp	r6, #0
 80003c8:	d14a      	bne.n	8000460 <__udivmoddi4+0x160>
 80003ca:	428b      	cmp	r3, r1
 80003cc:	d302      	bcc.n	80003d4 <__udivmoddi4+0xd4>
 80003ce:	4282      	cmp	r2, r0
 80003d0:	f200 80f9 	bhi.w	80005c6 <__udivmoddi4+0x2c6>
 80003d4:	1a84      	subs	r4, r0, r2
 80003d6:	eb61 0303 	sbc.w	r3, r1, r3
 80003da:	2001      	movs	r0, #1
 80003dc:	469e      	mov	lr, r3
 80003de:	2d00      	cmp	r5, #0
 80003e0:	d0e0      	beq.n	80003a4 <__udivmoddi4+0xa4>
 80003e2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003e6:	e7dd      	b.n	80003a4 <__udivmoddi4+0xa4>
 80003e8:	b902      	cbnz	r2, 80003ec <__udivmoddi4+0xec>
 80003ea:	deff      	udf	#255	; 0xff
 80003ec:	fab2 f282 	clz	r2, r2
 80003f0:	2a00      	cmp	r2, #0
 80003f2:	f040 8092 	bne.w	800051a <__udivmoddi4+0x21a>
 80003f6:	eba1 010c 	sub.w	r1, r1, ip
 80003fa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003fe:	fa1f fe8c 	uxth.w	lr, ip
 8000402:	2601      	movs	r6, #1
 8000404:	0c20      	lsrs	r0, r4, #16
 8000406:	fbb1 f3f7 	udiv	r3, r1, r7
 800040a:	fb07 1113 	mls	r1, r7, r3, r1
 800040e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000412:	fb0e f003 	mul.w	r0, lr, r3
 8000416:	4288      	cmp	r0, r1
 8000418:	d908      	bls.n	800042c <__udivmoddi4+0x12c>
 800041a:	eb1c 0101 	adds.w	r1, ip, r1
 800041e:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x12a>
 8000424:	4288      	cmp	r0, r1
 8000426:	f200 80cb 	bhi.w	80005c0 <__udivmoddi4+0x2c0>
 800042a:	4643      	mov	r3, r8
 800042c:	1a09      	subs	r1, r1, r0
 800042e:	b2a4      	uxth	r4, r4
 8000430:	fbb1 f0f7 	udiv	r0, r1, r7
 8000434:	fb07 1110 	mls	r1, r7, r0, r1
 8000438:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800043c:	fb0e fe00 	mul.w	lr, lr, r0
 8000440:	45a6      	cmp	lr, r4
 8000442:	d908      	bls.n	8000456 <__udivmoddi4+0x156>
 8000444:	eb1c 0404 	adds.w	r4, ip, r4
 8000448:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800044c:	d202      	bcs.n	8000454 <__udivmoddi4+0x154>
 800044e:	45a6      	cmp	lr, r4
 8000450:	f200 80bb 	bhi.w	80005ca <__udivmoddi4+0x2ca>
 8000454:	4608      	mov	r0, r1
 8000456:	eba4 040e 	sub.w	r4, r4, lr
 800045a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800045e:	e79c      	b.n	800039a <__udivmoddi4+0x9a>
 8000460:	f1c6 0720 	rsb	r7, r6, #32
 8000464:	40b3      	lsls	r3, r6
 8000466:	fa22 fc07 	lsr.w	ip, r2, r7
 800046a:	ea4c 0c03 	orr.w	ip, ip, r3
 800046e:	fa20 f407 	lsr.w	r4, r0, r7
 8000472:	fa01 f306 	lsl.w	r3, r1, r6
 8000476:	431c      	orrs	r4, r3
 8000478:	40f9      	lsrs	r1, r7
 800047a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800047e:	fa00 f306 	lsl.w	r3, r0, r6
 8000482:	fbb1 f8f9 	udiv	r8, r1, r9
 8000486:	0c20      	lsrs	r0, r4, #16
 8000488:	fa1f fe8c 	uxth.w	lr, ip
 800048c:	fb09 1118 	mls	r1, r9, r8, r1
 8000490:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000494:	fb08 f00e 	mul.w	r0, r8, lr
 8000498:	4288      	cmp	r0, r1
 800049a:	fa02 f206 	lsl.w	r2, r2, r6
 800049e:	d90b      	bls.n	80004b8 <__udivmoddi4+0x1b8>
 80004a0:	eb1c 0101 	adds.w	r1, ip, r1
 80004a4:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80004a8:	f080 8088 	bcs.w	80005bc <__udivmoddi4+0x2bc>
 80004ac:	4288      	cmp	r0, r1
 80004ae:	f240 8085 	bls.w	80005bc <__udivmoddi4+0x2bc>
 80004b2:	f1a8 0802 	sub.w	r8, r8, #2
 80004b6:	4461      	add	r1, ip
 80004b8:	1a09      	subs	r1, r1, r0
 80004ba:	b2a4      	uxth	r4, r4
 80004bc:	fbb1 f0f9 	udiv	r0, r1, r9
 80004c0:	fb09 1110 	mls	r1, r9, r0, r1
 80004c4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004c8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004cc:	458e      	cmp	lr, r1
 80004ce:	d908      	bls.n	80004e2 <__udivmoddi4+0x1e2>
 80004d0:	eb1c 0101 	adds.w	r1, ip, r1
 80004d4:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80004d8:	d26c      	bcs.n	80005b4 <__udivmoddi4+0x2b4>
 80004da:	458e      	cmp	lr, r1
 80004dc:	d96a      	bls.n	80005b4 <__udivmoddi4+0x2b4>
 80004de:	3802      	subs	r0, #2
 80004e0:	4461      	add	r1, ip
 80004e2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004e6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ea:	eba1 010e 	sub.w	r1, r1, lr
 80004ee:	42a1      	cmp	r1, r4
 80004f0:	46c8      	mov	r8, r9
 80004f2:	46a6      	mov	lr, r4
 80004f4:	d356      	bcc.n	80005a4 <__udivmoddi4+0x2a4>
 80004f6:	d053      	beq.n	80005a0 <__udivmoddi4+0x2a0>
 80004f8:	b15d      	cbz	r5, 8000512 <__udivmoddi4+0x212>
 80004fa:	ebb3 0208 	subs.w	r2, r3, r8
 80004fe:	eb61 010e 	sbc.w	r1, r1, lr
 8000502:	fa01 f707 	lsl.w	r7, r1, r7
 8000506:	fa22 f306 	lsr.w	r3, r2, r6
 800050a:	40f1      	lsrs	r1, r6
 800050c:	431f      	orrs	r7, r3
 800050e:	e9c5 7100 	strd	r7, r1, [r5]
 8000512:	2600      	movs	r6, #0
 8000514:	4631      	mov	r1, r6
 8000516:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800051a:	f1c2 0320 	rsb	r3, r2, #32
 800051e:	40d8      	lsrs	r0, r3
 8000520:	fa0c fc02 	lsl.w	ip, ip, r2
 8000524:	fa21 f303 	lsr.w	r3, r1, r3
 8000528:	4091      	lsls	r1, r2
 800052a:	4301      	orrs	r1, r0
 800052c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000530:	fa1f fe8c 	uxth.w	lr, ip
 8000534:	fbb3 f0f7 	udiv	r0, r3, r7
 8000538:	fb07 3610 	mls	r6, r7, r0, r3
 800053c:	0c0b      	lsrs	r3, r1, #16
 800053e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000542:	fb00 f60e 	mul.w	r6, r0, lr
 8000546:	429e      	cmp	r6, r3
 8000548:	fa04 f402 	lsl.w	r4, r4, r2
 800054c:	d908      	bls.n	8000560 <__udivmoddi4+0x260>
 800054e:	eb1c 0303 	adds.w	r3, ip, r3
 8000552:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000556:	d22f      	bcs.n	80005b8 <__udivmoddi4+0x2b8>
 8000558:	429e      	cmp	r6, r3
 800055a:	d92d      	bls.n	80005b8 <__udivmoddi4+0x2b8>
 800055c:	3802      	subs	r0, #2
 800055e:	4463      	add	r3, ip
 8000560:	1b9b      	subs	r3, r3, r6
 8000562:	b289      	uxth	r1, r1
 8000564:	fbb3 f6f7 	udiv	r6, r3, r7
 8000568:	fb07 3316 	mls	r3, r7, r6, r3
 800056c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000570:	fb06 f30e 	mul.w	r3, r6, lr
 8000574:	428b      	cmp	r3, r1
 8000576:	d908      	bls.n	800058a <__udivmoddi4+0x28a>
 8000578:	eb1c 0101 	adds.w	r1, ip, r1
 800057c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000580:	d216      	bcs.n	80005b0 <__udivmoddi4+0x2b0>
 8000582:	428b      	cmp	r3, r1
 8000584:	d914      	bls.n	80005b0 <__udivmoddi4+0x2b0>
 8000586:	3e02      	subs	r6, #2
 8000588:	4461      	add	r1, ip
 800058a:	1ac9      	subs	r1, r1, r3
 800058c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000590:	e738      	b.n	8000404 <__udivmoddi4+0x104>
 8000592:	462e      	mov	r6, r5
 8000594:	4628      	mov	r0, r5
 8000596:	e705      	b.n	80003a4 <__udivmoddi4+0xa4>
 8000598:	4606      	mov	r6, r0
 800059a:	e6e3      	b.n	8000364 <__udivmoddi4+0x64>
 800059c:	4618      	mov	r0, r3
 800059e:	e6f8      	b.n	8000392 <__udivmoddi4+0x92>
 80005a0:	454b      	cmp	r3, r9
 80005a2:	d2a9      	bcs.n	80004f8 <__udivmoddi4+0x1f8>
 80005a4:	ebb9 0802 	subs.w	r8, r9, r2
 80005a8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005ac:	3801      	subs	r0, #1
 80005ae:	e7a3      	b.n	80004f8 <__udivmoddi4+0x1f8>
 80005b0:	4646      	mov	r6, r8
 80005b2:	e7ea      	b.n	800058a <__udivmoddi4+0x28a>
 80005b4:	4620      	mov	r0, r4
 80005b6:	e794      	b.n	80004e2 <__udivmoddi4+0x1e2>
 80005b8:	4640      	mov	r0, r8
 80005ba:	e7d1      	b.n	8000560 <__udivmoddi4+0x260>
 80005bc:	46d0      	mov	r8, sl
 80005be:	e77b      	b.n	80004b8 <__udivmoddi4+0x1b8>
 80005c0:	3b02      	subs	r3, #2
 80005c2:	4461      	add	r1, ip
 80005c4:	e732      	b.n	800042c <__udivmoddi4+0x12c>
 80005c6:	4630      	mov	r0, r6
 80005c8:	e709      	b.n	80003de <__udivmoddi4+0xde>
 80005ca:	4464      	add	r4, ip
 80005cc:	3802      	subs	r0, #2
 80005ce:	e742      	b.n	8000456 <__udivmoddi4+0x156>

080005d0 <__aeabi_idiv0>:
 80005d0:	4770      	bx	lr
 80005d2:	bf00      	nop

080005d4 <SVC_Handler_Main>:
#define DEFAULT_TIMESLICE 5 // Default timeslice value in milliseconds



void SVC_Handler_Main( unsigned int *svc_args )
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b084      	sub	sp, #16
 80005d8:	af00      	add	r7, sp, #0
 80005da:	6078      	str	r0, [r7, #4]
	/*
	* Stack contains:
	* r0, r1, r2, r3, r12, r14, the return address and xPSR
	* First argument (r0) is svc_args[0]
	*/
	svc_number = ( ( char * )svc_args[ 6 ] )[ -2 ] ;
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	3318      	adds	r3, #24
 80005e0:	681b      	ldr	r3, [r3, #0]
 80005e2:	3b02      	subs	r3, #2
 80005e4:	781b      	ldrb	r3, [r3, #0]
 80005e6:	60fb      	str	r3, [r7, #12]
	switch( svc_number )
 80005e8:	68fb      	ldr	r3, [r7, #12]
 80005ea:	2b04      	cmp	r3, #4
 80005ec:	d827      	bhi.n	800063e <SVC_Handler_Main+0x6a>
 80005ee:	a201      	add	r2, pc, #4	; (adr r2, 80005f4 <SVC_Handler_Main+0x20>)
 80005f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80005f4:	08000609 	.word	0x08000609
 80005f8:	08000611 	.word	0x08000611
 80005fc:	0800063f 	.word	0x0800063f
 8000600:	08000619 	.word	0x08000619
 8000604:	0800062d 	.word	0x0800062d
	{
		case 0: //17 is sort of arbitrarily chosen
			printf("Success!\r\n");
 8000608:	480f      	ldr	r0, [pc, #60]	; (8000648 <SVC_Handler_Main+0x74>)
 800060a:	f002 f9f7 	bl	80029fc <puts>
			break;
 800060e:	e017      	b.n	8000640 <SVC_Handler_Main+0x6c>
		case 1: //17 is sort of arbitrarily chosen
			printf("Success Again!\r\n");
 8000610:	480e      	ldr	r0, [pc, #56]	; (800064c <SVC_Handler_Main+0x78>)
 8000612:	f002 f9f3 	bl	80029fc <puts>
			break;
 8000616:	e013      	b.n	8000640 <SVC_Handler_Main+0x6c>
		case 3:
			__set_PSP(stackptr);
 8000618:	4b0d      	ldr	r3, [pc, #52]	; (8000650 <SVC_Handler_Main+0x7c>)
 800061a:	681b      	ldr	r3, [r3, #0]
 800061c:	60bb      	str	r3, [r7, #8]
  \details Assigns the given value to the Process Stack Pointer (PSP).
  \param [in]    topOfProcStack  Process Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_PSP(uint32_t topOfProcStack)
{
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
 800061e:	68bb      	ldr	r3, [r7, #8]
 8000620:	f383 8809 	msr	PSP, r3
}
 8000624:	bf00      	nop
			runFirstThread();
 8000626:	f7ff fde4 	bl	80001f2 <runFirstThread>
			break;
 800062a:	e009      	b.n	8000640 <SVC_Handler_Main+0x6c>
		case 4:
			//Pend an interrupt to do the context switch
			_ICSR |= 1<<28;
 800062c:	4b09      	ldr	r3, [pc, #36]	; (8000654 <SVC_Handler_Main+0x80>)
 800062e:	681b      	ldr	r3, [r3, #0]
 8000630:	4a08      	ldr	r2, [pc, #32]	; (8000654 <SVC_Handler_Main+0x80>)
 8000632:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000636:	6013      	str	r3, [r2, #0]
			__asm("isb");
 8000638:	f3bf 8f6f 	isb	sy
			break;
 800063c:	e000      	b.n	8000640 <SVC_Handler_Main+0x6c>
		default: /* unknown SVC */
			break;
 800063e:	bf00      	nop
	}
}
 8000640:	bf00      	nop
 8000642:	3710      	adds	r7, #16
 8000644:	46bd      	mov	sp, r7
 8000646:	bd80      	pop	{r7, pc}
 8000648:	08003910 	.word	0x08003910
 800064c:	0800391c 	.word	0x0800391c
 8000650:	20000390 	.word	0x20000390
 8000654:	e000ed04 	.word	0xe000ed04

08000658 <allocatedStack>:
	stack_call();

}

uint32_t* allocatedStack(void)
{
 8000658:	b480      	push	{r7}
 800065a:	af00      	add	r7, sp, #0
    oldstackptr -= STACK_SIZE;
 800065c:	4b0b      	ldr	r3, [pc, #44]	; (800068c <allocatedStack+0x34>)
 800065e:	681b      	ldr	r3, [r3, #0]
 8000660:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 8000664:	4a09      	ldr	r2, [pc, #36]	; (800068c <allocatedStack+0x34>)
 8000666:	6013      	str	r3, [r2, #0]
    stackNum++;
 8000668:	4b09      	ldr	r3, [pc, #36]	; (8000690 <allocatedStack+0x38>)
 800066a:	681b      	ldr	r3, [r3, #0]
 800066c:	3301      	adds	r3, #1
 800066e:	4a08      	ldr	r2, [pc, #32]	; (8000690 <allocatedStack+0x38>)
 8000670:	6013      	str	r3, [r2, #0]

    if (stackNum >= MAX_STACK_POOL)
 8000672:	4b07      	ldr	r3, [pc, #28]	; (8000690 <allocatedStack+0x38>)
 8000674:	681b      	ldr	r3, [r3, #0]
 8000676:	2b1f      	cmp	r3, #31
 8000678:	dd01      	ble.n	800067e <allocatedStack+0x26>
    {
        return NULL;
 800067a:	2300      	movs	r3, #0
 800067c:	e001      	b.n	8000682 <allocatedStack+0x2a>
    }
    return oldstackptr;
 800067e:	4b03      	ldr	r3, [pc, #12]	; (800068c <allocatedStack+0x34>)
 8000680:	681b      	ldr	r3, [r3, #0]
}
 8000682:	4618      	mov	r0, r3
 8000684:	46bd      	mov	sp, r7
 8000686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800068a:	4770      	bx	lr
 800068c:	20000394 	.word	0x20000394
 8000690:	20000398 	.word	0x20000398

08000694 <osThreadCreateWithDeadline>:
    arrayThread[current_thread_index].sp = stackptr;

    return true; // Thread created successfully
}

bool osThreadCreateWithDeadline(void (*thread_function)(void*), void* arguments, int deadline) {
 8000694:	b580      	push	{r7, lr}
 8000696:	b084      	sub	sp, #16
 8000698:	af00      	add	r7, sp, #0
 800069a:	60f8      	str	r0, [r7, #12]
 800069c:	60b9      	str	r1, [r7, #8]
 800069e:	607a      	str	r2, [r7, #4]
    // Check if the maximum number of threads has been reached
    if (current_thread_index >= MAX_STACK_POOL - 1) {
 80006a0:	4b76      	ldr	r3, [pc, #472]	; (800087c <osThreadCreateWithDeadline+0x1e8>)
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	2b1e      	cmp	r3, #30
 80006a6:	dd01      	ble.n	80006ac <osThreadCreateWithDeadline+0x18>
        return false; // Unable to create a new thread
 80006a8:	2300      	movs	r3, #0
 80006aa:	e0e3      	b.n	8000874 <osThreadCreateWithDeadline+0x1e0>
    }

    // Allocate a new stack for the thread
    stackptr = allocatedStack();
 80006ac:	f7ff ffd4 	bl	8000658 <allocatedStack>
 80006b0:	4603      	mov	r3, r0
 80006b2:	4a73      	ldr	r2, [pc, #460]	; (8000880 <osThreadCreateWithDeadline+0x1ec>)
 80006b4:	6013      	str	r3, [r2, #0]
    if (stackptr == NULL) {
 80006b6:	4b72      	ldr	r3, [pc, #456]	; (8000880 <osThreadCreateWithDeadline+0x1ec>)
 80006b8:	681b      	ldr	r3, [r3, #0]
 80006ba:	2b00      	cmp	r3, #0
 80006bc:	d101      	bne.n	80006c2 <osThreadCreateWithDeadline+0x2e>
        return false; // Unable to allocate stack space
 80006be:	2300      	movs	r3, #0
 80006c0:	e0d8      	b.n	8000874 <osThreadCreateWithDeadline+0x1e0>
//    *(--stackptr) = (uint32_t)arguments; // Pass the address of interesting_value
//
//    for (int i = 0; i < 14; i++) {
//        *(--stackptr) = 0xA;
//    }
    *(--stackptr) = 1 << 24; // xPSR
 80006c2:	4b6f      	ldr	r3, [pc, #444]	; (8000880 <osThreadCreateWithDeadline+0x1ec>)
 80006c4:	681b      	ldr	r3, [r3, #0]
 80006c6:	3b04      	subs	r3, #4
 80006c8:	4a6d      	ldr	r2, [pc, #436]	; (8000880 <osThreadCreateWithDeadline+0x1ec>)
 80006ca:	6013      	str	r3, [r2, #0]
 80006cc:	4b6c      	ldr	r3, [pc, #432]	; (8000880 <osThreadCreateWithDeadline+0x1ec>)
 80006ce:	681b      	ldr	r3, [r3, #0]
 80006d0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80006d4:	601a      	str	r2, [r3, #0]
    *(--stackptr) = (uint32_t)thread_function;// Thread function address in r0
 80006d6:	4b6a      	ldr	r3, [pc, #424]	; (8000880 <osThreadCreateWithDeadline+0x1ec>)
 80006d8:	681b      	ldr	r3, [r3, #0]
 80006da:	3b04      	subs	r3, #4
 80006dc:	4a68      	ldr	r2, [pc, #416]	; (8000880 <osThreadCreateWithDeadline+0x1ec>)
 80006de:	6013      	str	r3, [r2, #0]
 80006e0:	4b67      	ldr	r3, [pc, #412]	; (8000880 <osThreadCreateWithDeadline+0x1ec>)
 80006e2:	681b      	ldr	r3, [r3, #0]
 80006e4:	68fa      	ldr	r2, [r7, #12]
 80006e6:	601a      	str	r2, [r3, #0]
	*(--stackptr) = 0xA;
 80006e8:	4b65      	ldr	r3, [pc, #404]	; (8000880 <osThreadCreateWithDeadline+0x1ec>)
 80006ea:	681b      	ldr	r3, [r3, #0]
 80006ec:	3b04      	subs	r3, #4
 80006ee:	4a64      	ldr	r2, [pc, #400]	; (8000880 <osThreadCreateWithDeadline+0x1ec>)
 80006f0:	6013      	str	r3, [r2, #0]
 80006f2:	4b63      	ldr	r3, [pc, #396]	; (8000880 <osThreadCreateWithDeadline+0x1ec>)
 80006f4:	681b      	ldr	r3, [r3, #0]
 80006f6:	220a      	movs	r2, #10
 80006f8:	601a      	str	r2, [r3, #0]
	*(--stackptr) = 0xA;
 80006fa:	4b61      	ldr	r3, [pc, #388]	; (8000880 <osThreadCreateWithDeadline+0x1ec>)
 80006fc:	681b      	ldr	r3, [r3, #0]
 80006fe:	3b04      	subs	r3, #4
 8000700:	4a5f      	ldr	r2, [pc, #380]	; (8000880 <osThreadCreateWithDeadline+0x1ec>)
 8000702:	6013      	str	r3, [r2, #0]
 8000704:	4b5e      	ldr	r3, [pc, #376]	; (8000880 <osThreadCreateWithDeadline+0x1ec>)
 8000706:	681b      	ldr	r3, [r3, #0]
 8000708:	220a      	movs	r2, #10
 800070a:	601a      	str	r2, [r3, #0]
	*(--stackptr) = 0xA;
 800070c:	4b5c      	ldr	r3, [pc, #368]	; (8000880 <osThreadCreateWithDeadline+0x1ec>)
 800070e:	681b      	ldr	r3, [r3, #0]
 8000710:	3b04      	subs	r3, #4
 8000712:	4a5b      	ldr	r2, [pc, #364]	; (8000880 <osThreadCreateWithDeadline+0x1ec>)
 8000714:	6013      	str	r3, [r2, #0]
 8000716:	4b5a      	ldr	r3, [pc, #360]	; (8000880 <osThreadCreateWithDeadline+0x1ec>)
 8000718:	681b      	ldr	r3, [r3, #0]
 800071a:	220a      	movs	r2, #10
 800071c:	601a      	str	r2, [r3, #0]
	*(--stackptr) = 0xA;
 800071e:	4b58      	ldr	r3, [pc, #352]	; (8000880 <osThreadCreateWithDeadline+0x1ec>)
 8000720:	681b      	ldr	r3, [r3, #0]
 8000722:	3b04      	subs	r3, #4
 8000724:	4a56      	ldr	r2, [pc, #344]	; (8000880 <osThreadCreateWithDeadline+0x1ec>)
 8000726:	6013      	str	r3, [r2, #0]
 8000728:	4b55      	ldr	r3, [pc, #340]	; (8000880 <osThreadCreateWithDeadline+0x1ec>)
 800072a:	681b      	ldr	r3, [r3, #0]
 800072c:	220a      	movs	r2, #10
 800072e:	601a      	str	r2, [r3, #0]
	*(--stackptr) = 0xA;
 8000730:	4b53      	ldr	r3, [pc, #332]	; (8000880 <osThreadCreateWithDeadline+0x1ec>)
 8000732:	681b      	ldr	r3, [r3, #0]
 8000734:	3b04      	subs	r3, #4
 8000736:	4a52      	ldr	r2, [pc, #328]	; (8000880 <osThreadCreateWithDeadline+0x1ec>)
 8000738:	6013      	str	r3, [r2, #0]
 800073a:	4b51      	ldr	r3, [pc, #324]	; (8000880 <osThreadCreateWithDeadline+0x1ec>)
 800073c:	681b      	ldr	r3, [r3, #0]
 800073e:	220a      	movs	r2, #10
 8000740:	601a      	str	r2, [r3, #0]
	*(--stackptr) = arguments; //This is R0
 8000742:	4b4f      	ldr	r3, [pc, #316]	; (8000880 <osThreadCreateWithDeadline+0x1ec>)
 8000744:	681b      	ldr	r3, [r3, #0]
 8000746:	3b04      	subs	r3, #4
 8000748:	4a4d      	ldr	r2, [pc, #308]	; (8000880 <osThreadCreateWithDeadline+0x1ec>)
 800074a:	6013      	str	r3, [r2, #0]
 800074c:	4b4c      	ldr	r3, [pc, #304]	; (8000880 <osThreadCreateWithDeadline+0x1ec>)
 800074e:	681b      	ldr	r3, [r3, #0]
 8000750:	68ba      	ldr	r2, [r7, #8]
 8000752:	601a      	str	r2, [r3, #0]
	*(--stackptr) = 0xA;
 8000754:	4b4a      	ldr	r3, [pc, #296]	; (8000880 <osThreadCreateWithDeadline+0x1ec>)
 8000756:	681b      	ldr	r3, [r3, #0]
 8000758:	3b04      	subs	r3, #4
 800075a:	4a49      	ldr	r2, [pc, #292]	; (8000880 <osThreadCreateWithDeadline+0x1ec>)
 800075c:	6013      	str	r3, [r2, #0]
 800075e:	4b48      	ldr	r3, [pc, #288]	; (8000880 <osThreadCreateWithDeadline+0x1ec>)
 8000760:	681b      	ldr	r3, [r3, #0]
 8000762:	220a      	movs	r2, #10
 8000764:	601a      	str	r2, [r3, #0]
	*(--stackptr) = 0xA;
 8000766:	4b46      	ldr	r3, [pc, #280]	; (8000880 <osThreadCreateWithDeadline+0x1ec>)
 8000768:	681b      	ldr	r3, [r3, #0]
 800076a:	3b04      	subs	r3, #4
 800076c:	4a44      	ldr	r2, [pc, #272]	; (8000880 <osThreadCreateWithDeadline+0x1ec>)
 800076e:	6013      	str	r3, [r2, #0]
 8000770:	4b43      	ldr	r3, [pc, #268]	; (8000880 <osThreadCreateWithDeadline+0x1ec>)
 8000772:	681b      	ldr	r3, [r3, #0]
 8000774:	220a      	movs	r2, #10
 8000776:	601a      	str	r2, [r3, #0]
	*(--stackptr) = 0xA;
 8000778:	4b41      	ldr	r3, [pc, #260]	; (8000880 <osThreadCreateWithDeadline+0x1ec>)
 800077a:	681b      	ldr	r3, [r3, #0]
 800077c:	3b04      	subs	r3, #4
 800077e:	4a40      	ldr	r2, [pc, #256]	; (8000880 <osThreadCreateWithDeadline+0x1ec>)
 8000780:	6013      	str	r3, [r2, #0]
 8000782:	4b3f      	ldr	r3, [pc, #252]	; (8000880 <osThreadCreateWithDeadline+0x1ec>)
 8000784:	681b      	ldr	r3, [r3, #0]
 8000786:	220a      	movs	r2, #10
 8000788:	601a      	str	r2, [r3, #0]
	*(--stackptr) = 0xA;
 800078a:	4b3d      	ldr	r3, [pc, #244]	; (8000880 <osThreadCreateWithDeadline+0x1ec>)
 800078c:	681b      	ldr	r3, [r3, #0]
 800078e:	3b04      	subs	r3, #4
 8000790:	4a3b      	ldr	r2, [pc, #236]	; (8000880 <osThreadCreateWithDeadline+0x1ec>)
 8000792:	6013      	str	r3, [r2, #0]
 8000794:	4b3a      	ldr	r3, [pc, #232]	; (8000880 <osThreadCreateWithDeadline+0x1ec>)
 8000796:	681b      	ldr	r3, [r3, #0]
 8000798:	220a      	movs	r2, #10
 800079a:	601a      	str	r2, [r3, #0]
	*(--stackptr) = 0xA;
 800079c:	4b38      	ldr	r3, [pc, #224]	; (8000880 <osThreadCreateWithDeadline+0x1ec>)
 800079e:	681b      	ldr	r3, [r3, #0]
 80007a0:	3b04      	subs	r3, #4
 80007a2:	4a37      	ldr	r2, [pc, #220]	; (8000880 <osThreadCreateWithDeadline+0x1ec>)
 80007a4:	6013      	str	r3, [r2, #0]
 80007a6:	4b36      	ldr	r3, [pc, #216]	; (8000880 <osThreadCreateWithDeadline+0x1ec>)
 80007a8:	681b      	ldr	r3, [r3, #0]
 80007aa:	220a      	movs	r2, #10
 80007ac:	601a      	str	r2, [r3, #0]
	*(--stackptr) = 0xA;
 80007ae:	4b34      	ldr	r3, [pc, #208]	; (8000880 <osThreadCreateWithDeadline+0x1ec>)
 80007b0:	681b      	ldr	r3, [r3, #0]
 80007b2:	3b04      	subs	r3, #4
 80007b4:	4a32      	ldr	r2, [pc, #200]	; (8000880 <osThreadCreateWithDeadline+0x1ec>)
 80007b6:	6013      	str	r3, [r2, #0]
 80007b8:	4b31      	ldr	r3, [pc, #196]	; (8000880 <osThreadCreateWithDeadline+0x1ec>)
 80007ba:	681b      	ldr	r3, [r3, #0]
 80007bc:	220a      	movs	r2, #10
 80007be:	601a      	str	r2, [r3, #0]
	*(--stackptr) = 0xA;
 80007c0:	4b2f      	ldr	r3, [pc, #188]	; (8000880 <osThreadCreateWithDeadline+0x1ec>)
 80007c2:	681b      	ldr	r3, [r3, #0]
 80007c4:	3b04      	subs	r3, #4
 80007c6:	4a2e      	ldr	r2, [pc, #184]	; (8000880 <osThreadCreateWithDeadline+0x1ec>)
 80007c8:	6013      	str	r3, [r2, #0]
 80007ca:	4b2d      	ldr	r3, [pc, #180]	; (8000880 <osThreadCreateWithDeadline+0x1ec>)
 80007cc:	681b      	ldr	r3, [r3, #0]
 80007ce:	220a      	movs	r2, #10
 80007d0:	601a      	str	r2, [r3, #0]
	*(--stackptr) = 0xA;
 80007d2:	4b2b      	ldr	r3, [pc, #172]	; (8000880 <osThreadCreateWithDeadline+0x1ec>)
 80007d4:	681b      	ldr	r3, [r3, #0]
 80007d6:	3b04      	subs	r3, #4
 80007d8:	4a29      	ldr	r2, [pc, #164]	; (8000880 <osThreadCreateWithDeadline+0x1ec>)
 80007da:	6013      	str	r3, [r2, #0]
 80007dc:	4b28      	ldr	r3, [pc, #160]	; (8000880 <osThreadCreateWithDeadline+0x1ec>)
 80007de:	681b      	ldr	r3, [r3, #0]
 80007e0:	220a      	movs	r2, #10
 80007e2:	601a      	str	r2, [r3, #0]


    current_thread_index++; // Increment the index of the currently running threa
 80007e4:	4b25      	ldr	r3, [pc, #148]	; (800087c <osThreadCreateWithDeadline+0x1e8>)
 80007e6:	681b      	ldr	r3, [r3, #0]
 80007e8:	3301      	adds	r3, #1
 80007ea:	4a24      	ldr	r2, [pc, #144]	; (800087c <osThreadCreateWithDeadline+0x1e8>)
 80007ec:	6013      	str	r3, [r2, #0]

    arrayThread[current_thread_index].thread_function = thread_function;
 80007ee:	4b23      	ldr	r3, [pc, #140]	; (800087c <osThreadCreateWithDeadline+0x1e8>)
 80007f0:	681a      	ldr	r2, [r3, #0]
 80007f2:	4924      	ldr	r1, [pc, #144]	; (8000884 <osThreadCreateWithDeadline+0x1f0>)
 80007f4:	4613      	mov	r3, r2
 80007f6:	005b      	lsls	r3, r3, #1
 80007f8:	4413      	add	r3, r2
 80007fa:	00db      	lsls	r3, r3, #3
 80007fc:	440b      	add	r3, r1
 80007fe:	3304      	adds	r3, #4
 8000800:	68fa      	ldr	r2, [r7, #12]
 8000802:	601a      	str	r2, [r3, #0]
    arrayThread[current_thread_index].sp = stackptr;
 8000804:	4b1d      	ldr	r3, [pc, #116]	; (800087c <osThreadCreateWithDeadline+0x1e8>)
 8000806:	681a      	ldr	r2, [r3, #0]
 8000808:	4b1d      	ldr	r3, [pc, #116]	; (8000880 <osThreadCreateWithDeadline+0x1ec>)
 800080a:	6819      	ldr	r1, [r3, #0]
 800080c:	481d      	ldr	r0, [pc, #116]	; (8000884 <osThreadCreateWithDeadline+0x1f0>)
 800080e:	4613      	mov	r3, r2
 8000810:	005b      	lsls	r3, r3, #1
 8000812:	4413      	add	r3, r2
 8000814:	00db      	lsls	r3, r3, #3
 8000816:	4403      	add	r3, r0
 8000818:	6019      	str	r1, [r3, #0]
    // Set the thread's timeslice and runtime to the specified deadline
    arrayThread[current_thread_index].timeslice = deadline;
 800081a:	4b18      	ldr	r3, [pc, #96]	; (800087c <osThreadCreateWithDeadline+0x1e8>)
 800081c:	681a      	ldr	r2, [r3, #0]
 800081e:	6879      	ldr	r1, [r7, #4]
 8000820:	4818      	ldr	r0, [pc, #96]	; (8000884 <osThreadCreateWithDeadline+0x1f0>)
 8000822:	4613      	mov	r3, r2
 8000824:	005b      	lsls	r3, r3, #1
 8000826:	4413      	add	r3, r2
 8000828:	00db      	lsls	r3, r3, #3
 800082a:	4403      	add	r3, r0
 800082c:	3308      	adds	r3, #8
 800082e:	6019      	str	r1, [r3, #0]
    arrayThread[current_thread_index].runtime = deadline;
 8000830:	4b12      	ldr	r3, [pc, #72]	; (800087c <osThreadCreateWithDeadline+0x1e8>)
 8000832:	681a      	ldr	r2, [r3, #0]
 8000834:	6879      	ldr	r1, [r7, #4]
 8000836:	4813      	ldr	r0, [pc, #76]	; (8000884 <osThreadCreateWithDeadline+0x1f0>)
 8000838:	4613      	mov	r3, r2
 800083a:	005b      	lsls	r3, r3, #1
 800083c:	4413      	add	r3, r2
 800083e:	00db      	lsls	r3, r3, #3
 8000840:	4403      	add	r3, r0
 8000842:	330c      	adds	r3, #12
 8000844:	6019      	str	r1, [r3, #0]
    arrayThread[current_thread_index].deadlines = deadline;
 8000846:	4b0d      	ldr	r3, [pc, #52]	; (800087c <osThreadCreateWithDeadline+0x1e8>)
 8000848:	681a      	ldr	r2, [r3, #0]
 800084a:	6879      	ldr	r1, [r7, #4]
 800084c:	480d      	ldr	r0, [pc, #52]	; (8000884 <osThreadCreateWithDeadline+0x1f0>)
 800084e:	4613      	mov	r3, r2
 8000850:	005b      	lsls	r3, r3, #1
 8000852:	4413      	add	r3, r2
 8000854:	00db      	lsls	r3, r3, #3
 8000856:	4403      	add	r3, r0
 8000858:	3310      	adds	r3, #16
 800085a:	6019      	str	r1, [r3, #0]
    arrayThread[current_thread_index].timeline = deadline;
 800085c:	4b07      	ldr	r3, [pc, #28]	; (800087c <osThreadCreateWithDeadline+0x1e8>)
 800085e:	681a      	ldr	r2, [r3, #0]
 8000860:	6879      	ldr	r1, [r7, #4]
 8000862:	4808      	ldr	r0, [pc, #32]	; (8000884 <osThreadCreateWithDeadline+0x1f0>)
 8000864:	4613      	mov	r3, r2
 8000866:	005b      	lsls	r3, r3, #1
 8000868:	4413      	add	r3, r2
 800086a:	00db      	lsls	r3, r3, #3
 800086c:	4403      	add	r3, r0
 800086e:	3314      	adds	r3, #20
 8000870:	6019      	str	r1, [r3, #0]


    return true; // Thread created successfully
 8000872:	2301      	movs	r3, #1
}
 8000874:	4618      	mov	r0, r3
 8000876:	3710      	adds	r7, #16
 8000878:	46bd      	mov	sp, r7
 800087a:	bd80      	pop	{r7, pc}
 800087c:	20000000 	.word	0x20000000
 8000880:	20000390 	.word	0x20000390
 8000884:	20000090 	.word	0x20000090

08000888 <osKernelInitialize>:


void osKernelInitialize() {
 8000888:	b480      	push	{r7}
 800088a:	af00      	add	r7, sp, #0
    // Initialize global variables and any other setup tasks
    current_thread_index = -1;// Set the index of the currently running thread to 0
 800088c:	4b0d      	ldr	r3, [pc, #52]	; (80008c4 <osKernelInitialize+0x3c>)
 800088e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000892:	601a      	str	r2, [r3, #0]
    stackNum = 1;
 8000894:	4b0c      	ldr	r3, [pc, #48]	; (80008c8 <osKernelInitialize+0x40>)
 8000896:	2201      	movs	r2, #1
 8000898:	601a      	str	r2, [r3, #0]
    stackptr = *(uint32_t**)0x0;
 800089a:	2300      	movs	r3, #0
 800089c:	681b      	ldr	r3, [r3, #0]
 800089e:	4a0b      	ldr	r2, [pc, #44]	; (80008cc <osKernelInitialize+0x44>)
 80008a0:	6013      	str	r3, [r2, #0]
    //set the priority of PendSV to almost the weakest
    SHPR3 |= 0xFE << 16; //shift the constant 0xFE 16 bits to set PendSV priority
 80008a2:	4b0b      	ldr	r3, [pc, #44]	; (80008d0 <osKernelInitialize+0x48>)
 80008a4:	681b      	ldr	r3, [r3, #0]
 80008a6:	4a0a      	ldr	r2, [pc, #40]	; (80008d0 <osKernelInitialize+0x48>)
 80008a8:	f443 037e 	orr.w	r3, r3, #16646144	; 0xfe0000
 80008ac:	6013      	str	r3, [r2, #0]
    SHPR2 |= 0xFDU << 24; //Set the priority of SVC higher than PendSV
 80008ae:	4b09      	ldr	r3, [pc, #36]	; (80008d4 <osKernelInitialize+0x4c>)
 80008b0:	681b      	ldr	r3, [r3, #0]
 80008b2:	4a08      	ldr	r2, [pc, #32]	; (80008d4 <osKernelInitialize+0x4c>)
 80008b4:	f043 437d 	orr.w	r3, r3, #4244635648	; 0xfd000000
 80008b8:	6013      	str	r3, [r2, #0]
}
 80008ba:	bf00      	nop
 80008bc:	46bd      	mov	sp, r7
 80008be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c2:	4770      	bx	lr
 80008c4:	20000000 	.word	0x20000000
 80008c8:	20000398 	.word	0x20000398
 80008cc:	20000390 	.word	0x20000390
 80008d0:	e000ed20 	.word	0xe000ed20
 80008d4:	e000ed1c 	.word	0xe000ed1c

080008d8 <osKernelStart>:

void osKernelStart(){
 80008d8:	b480      	push	{r7}
 80008da:	af00      	add	r7, sp, #0
	__asm("SVC #3"); //SVC RUN_FIRST_THREAD
 80008dc:	df03      	svc	3
}
 80008de:	bf00      	nop
 80008e0:	46bd      	mov	sp, r7
 80008e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e6:	4770      	bx	lr

080008e8 <osYield>:
//	current_thread_index = (++current_thread_index)%(stackNum -1);
//	__set_PSP(arrayThread[current_thread_index].sp);
//}


void osYield(void){
 80008e8:	b480      	push	{r7}
 80008ea:	af00      	add	r7, sp, #0
	__asm("SVC #4");
 80008ec:	df04      	svc	4
}
 80008ee:	bf00      	nop
 80008f0:	46bd      	mov	sp, r7
 80008f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f6:	4770      	bx	lr

080008f8 <osSched>:



void osSched() {
 80008f8:	b480      	push	{r7}
 80008fa:	b087      	sub	sp, #28
 80008fc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, psp"  : "=r" (result) );
 80008fe:	f3ef 8309 	mrs	r3, PSP
 8000902:	60bb      	str	r3, [r7, #8]
  return(result);
 8000904:	68bb      	ldr	r3, [r7, #8]
    // Save the current thread's stack pointer
    arrayThread[current_thread_index].sp = (uint32_t*)(__get_PSP() - 8 * 4);
 8000906:	f1a3 0120 	sub.w	r1, r3, #32
 800090a:	4b70      	ldr	r3, [pc, #448]	; (8000acc <osSched+0x1d4>)
 800090c:	681a      	ldr	r2, [r3, #0]
 800090e:	4608      	mov	r0, r1
 8000910:	496f      	ldr	r1, [pc, #444]	; (8000ad0 <osSched+0x1d8>)
 8000912:	4613      	mov	r3, r2
 8000914:	005b      	lsls	r3, r3, #1
 8000916:	4413      	add	r3, r2
 8000918:	00db      	lsls	r3, r3, #3
 800091a:	440b      	add	r3, r1
 800091c:	6018      	str	r0, [r3, #0]

    // Decrement the remaining runtime of the current thread
    arrayThread[current_thread_index].runtime -= DEFAULT_TIMESLICE;
 800091e:	4b6b      	ldr	r3, [pc, #428]	; (8000acc <osSched+0x1d4>)
 8000920:	681a      	ldr	r2, [r3, #0]
 8000922:	496b      	ldr	r1, [pc, #428]	; (8000ad0 <osSched+0x1d8>)
 8000924:	4613      	mov	r3, r2
 8000926:	005b      	lsls	r3, r3, #1
 8000928:	4413      	add	r3, r2
 800092a:	00db      	lsls	r3, r3, #3
 800092c:	440b      	add	r3, r1
 800092e:	330c      	adds	r3, #12
 8000930:	681b      	ldr	r3, [r3, #0]
 8000932:	4a66      	ldr	r2, [pc, #408]	; (8000acc <osSched+0x1d4>)
 8000934:	6812      	ldr	r2, [r2, #0]
 8000936:	1f59      	subs	r1, r3, #5
 8000938:	4865      	ldr	r0, [pc, #404]	; (8000ad0 <osSched+0x1d8>)
 800093a:	4613      	mov	r3, r2
 800093c:	005b      	lsls	r3, r3, #1
 800093e:	4413      	add	r3, r2
 8000940:	00db      	lsls	r3, r3, #3
 8000942:	4403      	add	r3, r0
 8000944:	330c      	adds	r3, #12
 8000946:	6019      	str	r1, [r3, #0]

    uint32_t earliest_deadline_thread_index = current_thread_index; // Initialize with the current thread
 8000948:	4b60      	ldr	r3, [pc, #384]	; (8000acc <osSched+0x1d4>)
 800094a:	681b      	ldr	r3, [r3, #0]
 800094c:	617b      	str	r3, [r7, #20]
    uint32_t earliest_deadline = arrayThread[current_thread_index].deadlines;
 800094e:	4b5f      	ldr	r3, [pc, #380]	; (8000acc <osSched+0x1d4>)
 8000950:	681a      	ldr	r2, [r3, #0]
 8000952:	495f      	ldr	r1, [pc, #380]	; (8000ad0 <osSched+0x1d8>)
 8000954:	4613      	mov	r3, r2
 8000956:	005b      	lsls	r3, r3, #1
 8000958:	4413      	add	r3, r2
 800095a:	00db      	lsls	r3, r3, #3
 800095c:	440b      	add	r3, r1
 800095e:	3310      	adds	r3, #16
 8000960:	681b      	ldr	r3, [r3, #0]
 8000962:	613b      	str	r3, [r7, #16]

    for (uint32_t i = 0; i <= stackNum - 2; i++) {
 8000964:	2300      	movs	r3, #0
 8000966:	60fb      	str	r3, [r7, #12]
 8000968:	e025      	b.n	80009b6 <osSched+0xbe>
        // Check if the thread has remaining runtime
        if (arrayThread[i].runtime > 0) {
 800096a:	4959      	ldr	r1, [pc, #356]	; (8000ad0 <osSched+0x1d8>)
 800096c:	68fa      	ldr	r2, [r7, #12]
 800096e:	4613      	mov	r3, r2
 8000970:	005b      	lsls	r3, r3, #1
 8000972:	4413      	add	r3, r2
 8000974:	00db      	lsls	r3, r3, #3
 8000976:	440b      	add	r3, r1
 8000978:	330c      	adds	r3, #12
 800097a:	681b      	ldr	r3, [r3, #0]
 800097c:	2b00      	cmp	r3, #0
 800097e:	d017      	beq.n	80009b0 <osSched+0xb8>
            // Find the thread with the earliest deadline and remaining runtime
            if (arrayThread[i].deadlines < earliest_deadline) {
 8000980:	4953      	ldr	r1, [pc, #332]	; (8000ad0 <osSched+0x1d8>)
 8000982:	68fa      	ldr	r2, [r7, #12]
 8000984:	4613      	mov	r3, r2
 8000986:	005b      	lsls	r3, r3, #1
 8000988:	4413      	add	r3, r2
 800098a:	00db      	lsls	r3, r3, #3
 800098c:	440b      	add	r3, r1
 800098e:	3310      	adds	r3, #16
 8000990:	681b      	ldr	r3, [r3, #0]
 8000992:	693a      	ldr	r2, [r7, #16]
 8000994:	429a      	cmp	r2, r3
 8000996:	d90b      	bls.n	80009b0 <osSched+0xb8>
                earliest_deadline_thread_index = i;
 8000998:	68fb      	ldr	r3, [r7, #12]
 800099a:	617b      	str	r3, [r7, #20]
                earliest_deadline = arrayThread[i].deadlines;
 800099c:	494c      	ldr	r1, [pc, #304]	; (8000ad0 <osSched+0x1d8>)
 800099e:	68fa      	ldr	r2, [r7, #12]
 80009a0:	4613      	mov	r3, r2
 80009a2:	005b      	lsls	r3, r3, #1
 80009a4:	4413      	add	r3, r2
 80009a6:	00db      	lsls	r3, r3, #3
 80009a8:	440b      	add	r3, r1
 80009aa:	3310      	adds	r3, #16
 80009ac:	681b      	ldr	r3, [r3, #0]
 80009ae:	613b      	str	r3, [r7, #16]
    for (uint32_t i = 0; i <= stackNum - 2; i++) {
 80009b0:	68fb      	ldr	r3, [r7, #12]
 80009b2:	3301      	adds	r3, #1
 80009b4:	60fb      	str	r3, [r7, #12]
 80009b6:	4b47      	ldr	r3, [pc, #284]	; (8000ad4 <osSched+0x1dc>)
 80009b8:	681b      	ldr	r3, [r3, #0]
 80009ba:	3b02      	subs	r3, #2
 80009bc:	461a      	mov	r2, r3
 80009be:	68fb      	ldr	r3, [r7, #12]
 80009c0:	4293      	cmp	r3, r2
 80009c2:	d9d2      	bls.n	800096a <osSched+0x72>
            }
        }
    }

    // Check if the current thread's remaining runtime is zero and its deadline is earlier than the earliest deadline
    if (arrayThread[current_thread_index].runtime <= 0 && arrayThread[current_thread_index].deadlines <= earliest_deadline) {
 80009c4:	4b41      	ldr	r3, [pc, #260]	; (8000acc <osSched+0x1d4>)
 80009c6:	681a      	ldr	r2, [r3, #0]
 80009c8:	4941      	ldr	r1, [pc, #260]	; (8000ad0 <osSched+0x1d8>)
 80009ca:	4613      	mov	r3, r2
 80009cc:	005b      	lsls	r3, r3, #1
 80009ce:	4413      	add	r3, r2
 80009d0:	00db      	lsls	r3, r3, #3
 80009d2:	440b      	add	r3, r1
 80009d4:	330c      	adds	r3, #12
 80009d6:	681b      	ldr	r3, [r3, #0]
 80009d8:	2b00      	cmp	r3, #0
 80009da:	d12c      	bne.n	8000a36 <osSched+0x13e>
 80009dc:	4b3b      	ldr	r3, [pc, #236]	; (8000acc <osSched+0x1d4>)
 80009de:	681a      	ldr	r2, [r3, #0]
 80009e0:	493b      	ldr	r1, [pc, #236]	; (8000ad0 <osSched+0x1d8>)
 80009e2:	4613      	mov	r3, r2
 80009e4:	005b      	lsls	r3, r3, #1
 80009e6:	4413      	add	r3, r2
 80009e8:	00db      	lsls	r3, r3, #3
 80009ea:	440b      	add	r3, r1
 80009ec:	3310      	adds	r3, #16
 80009ee:	681b      	ldr	r3, [r3, #0]
 80009f0:	693a      	ldr	r2, [r7, #16]
 80009f2:	429a      	cmp	r2, r3
 80009f4:	d31f      	bcc.n	8000a36 <osSched+0x13e>
        // Continue running the current thread
        arrayThread[current_thread_index].deadlines += arrayThread[current_thread_index].timeline;
 80009f6:	4b35      	ldr	r3, [pc, #212]	; (8000acc <osSched+0x1d4>)
 80009f8:	681a      	ldr	r2, [r3, #0]
 80009fa:	4935      	ldr	r1, [pc, #212]	; (8000ad0 <osSched+0x1d8>)
 80009fc:	4613      	mov	r3, r2
 80009fe:	005b      	lsls	r3, r3, #1
 8000a00:	4413      	add	r3, r2
 8000a02:	00db      	lsls	r3, r3, #3
 8000a04:	440b      	add	r3, r1
 8000a06:	3310      	adds	r3, #16
 8000a08:	6819      	ldr	r1, [r3, #0]
 8000a0a:	4b30      	ldr	r3, [pc, #192]	; (8000acc <osSched+0x1d4>)
 8000a0c:	681a      	ldr	r2, [r3, #0]
 8000a0e:	4830      	ldr	r0, [pc, #192]	; (8000ad0 <osSched+0x1d8>)
 8000a10:	4613      	mov	r3, r2
 8000a12:	005b      	lsls	r3, r3, #1
 8000a14:	4413      	add	r3, r2
 8000a16:	00db      	lsls	r3, r3, #3
 8000a18:	4403      	add	r3, r0
 8000a1a:	3314      	adds	r3, #20
 8000a1c:	681b      	ldr	r3, [r3, #0]
 8000a1e:	4a2b      	ldr	r2, [pc, #172]	; (8000acc <osSched+0x1d4>)
 8000a20:	6812      	ldr	r2, [r2, #0]
 8000a22:	4419      	add	r1, r3
 8000a24:	482a      	ldr	r0, [pc, #168]	; (8000ad0 <osSched+0x1d8>)
 8000a26:	4613      	mov	r3, r2
 8000a28:	005b      	lsls	r3, r3, #1
 8000a2a:	4413      	add	r3, r2
 8000a2c:	00db      	lsls	r3, r3, #3
 8000a2e:	4403      	add	r3, r0
 8000a30:	3310      	adds	r3, #16
 8000a32:	6019      	str	r1, [r3, #0]
 8000a34:	e044      	b.n	8000ac0 <osSched+0x1c8>
    } else {
        // Switch to the thread with the earliest deadline and update its deadline
        if (current_thread_index != earliest_deadline_thread_index) {
 8000a36:	4b25      	ldr	r3, [pc, #148]	; (8000acc <osSched+0x1d4>)
 8000a38:	681a      	ldr	r2, [r3, #0]
 8000a3a:	697b      	ldr	r3, [r7, #20]
 8000a3c:	429a      	cmp	r2, r3
 8000a3e:	d00f      	beq.n	8000a60 <osSched+0x168>
  __ASM volatile ("MRS %0, psp"  : "=r" (result) );
 8000a40:	f3ef 8309 	mrs	r3, PSP
 8000a44:	607b      	str	r3, [r7, #4]
  return(result);
 8000a46:	687b      	ldr	r3, [r7, #4]
            // Save the context of the current thread
            arrayThread[current_thread_index].sp = (uint32_t*)(__get_PSP() - 8 * 4);
 8000a48:	f1a3 0120 	sub.w	r1, r3, #32
 8000a4c:	4b1f      	ldr	r3, [pc, #124]	; (8000acc <osSched+0x1d4>)
 8000a4e:	681a      	ldr	r2, [r3, #0]
 8000a50:	4608      	mov	r0, r1
 8000a52:	491f      	ldr	r1, [pc, #124]	; (8000ad0 <osSched+0x1d8>)
 8000a54:	4613      	mov	r3, r2
 8000a56:	005b      	lsls	r3, r3, #1
 8000a58:	4413      	add	r3, r2
 8000a5a:	00db      	lsls	r3, r3, #3
 8000a5c:	440b      	add	r3, r1
 8000a5e:	6018      	str	r0, [r3, #0]
        }
        current_thread_index = earliest_deadline_thread_index;
 8000a60:	697b      	ldr	r3, [r7, #20]
 8000a62:	4a1a      	ldr	r2, [pc, #104]	; (8000acc <osSched+0x1d4>)
 8000a64:	6013      	str	r3, [r2, #0]
        arrayThread[current_thread_index].deadlines += arrayThread[current_thread_index].timeline;
 8000a66:	4b19      	ldr	r3, [pc, #100]	; (8000acc <osSched+0x1d4>)
 8000a68:	681a      	ldr	r2, [r3, #0]
 8000a6a:	4919      	ldr	r1, [pc, #100]	; (8000ad0 <osSched+0x1d8>)
 8000a6c:	4613      	mov	r3, r2
 8000a6e:	005b      	lsls	r3, r3, #1
 8000a70:	4413      	add	r3, r2
 8000a72:	00db      	lsls	r3, r3, #3
 8000a74:	440b      	add	r3, r1
 8000a76:	3310      	adds	r3, #16
 8000a78:	6819      	ldr	r1, [r3, #0]
 8000a7a:	4b14      	ldr	r3, [pc, #80]	; (8000acc <osSched+0x1d4>)
 8000a7c:	681a      	ldr	r2, [r3, #0]
 8000a7e:	4814      	ldr	r0, [pc, #80]	; (8000ad0 <osSched+0x1d8>)
 8000a80:	4613      	mov	r3, r2
 8000a82:	005b      	lsls	r3, r3, #1
 8000a84:	4413      	add	r3, r2
 8000a86:	00db      	lsls	r3, r3, #3
 8000a88:	4403      	add	r3, r0
 8000a8a:	3314      	adds	r3, #20
 8000a8c:	681b      	ldr	r3, [r3, #0]
 8000a8e:	4a0f      	ldr	r2, [pc, #60]	; (8000acc <osSched+0x1d4>)
 8000a90:	6812      	ldr	r2, [r2, #0]
 8000a92:	4419      	add	r1, r3
 8000a94:	480e      	ldr	r0, [pc, #56]	; (8000ad0 <osSched+0x1d8>)
 8000a96:	4613      	mov	r3, r2
 8000a98:	005b      	lsls	r3, r3, #1
 8000a9a:	4413      	add	r3, r2
 8000a9c:	00db      	lsls	r3, r3, #3
 8000a9e:	4403      	add	r3, r0
 8000aa0:	3310      	adds	r3, #16
 8000aa2:	6019      	str	r1, [r3, #0]

        // Restore the context of the selected thread
        __set_PSP(arrayThread[current_thread_index].sp);
 8000aa4:	4b09      	ldr	r3, [pc, #36]	; (8000acc <osSched+0x1d4>)
 8000aa6:	681a      	ldr	r2, [r3, #0]
 8000aa8:	4909      	ldr	r1, [pc, #36]	; (8000ad0 <osSched+0x1d8>)
 8000aaa:	4613      	mov	r3, r2
 8000aac:	005b      	lsls	r3, r3, #1
 8000aae:	4413      	add	r3, r2
 8000ab0:	00db      	lsls	r3, r3, #3
 8000ab2:	440b      	add	r3, r1
 8000ab4:	681b      	ldr	r3, [r3, #0]
 8000ab6:	603b      	str	r3, [r7, #0]
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
 8000ab8:	683b      	ldr	r3, [r7, #0]
 8000aba:	f383 8809 	msr	PSP, r3
}
 8000abe:	bf00      	nop

    // Check if the current thread's remaining runtime is zero, then yield the processor
//    if (arrayThread[current_thread_index].runtime <= 0) {
//        osYield();
//    }
}
 8000ac0:	bf00      	nop
 8000ac2:	371c      	adds	r7, #28
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aca:	4770      	bx	lr
 8000acc:	20000000 	.word	0x20000000
 8000ad0:	20000090 	.word	0x20000090
 8000ad4:	20000398 	.word	0x20000398

08000ad8 <__io_putchar>:
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_USART2_UART_Init(void);

int __io_putchar(int ch)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	b082      	sub	sp, #8
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2,(uint8_t*)&ch,1,HAL_MAX_DELAY);
 8000ae0:	1d39      	adds	r1, r7, #4
 8000ae2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000ae6:	2201      	movs	r2, #1
 8000ae8:	4803      	ldr	r0, [pc, #12]	; (8000af8 <__io_putchar+0x20>)
 8000aea:	f001 fb5a 	bl	80021a2 <HAL_UART_Transmit>
return ch;
 8000aee:	687b      	ldr	r3, [r7, #4]
}
 8000af0:	4618      	mov	r0, r3
 8000af2:	3708      	adds	r7, #8
 8000af4:	46bd      	mov	sp, r7
 8000af6:	bd80      	pop	{r7, pc}
 8000af8:	200003a0 	.word	0x200003a0

08000afc <print_continuously>:
{
	__asm("MOV PC, R0");
}


void print_continuously(void* interesting_value) {
 8000afc:	b580      	push	{r7, lr}
 8000afe:	b084      	sub	sp, #16
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	6078      	str	r0, [r7, #4]

	int value_1 = *(int*)interesting_value;
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	60fb      	str	r3, [r7, #12]
    while (1) {
        printf("Thread1: %d\n", value_1);
 8000b0a:	68f9      	ldr	r1, [r7, #12]
 8000b0c:	4802      	ldr	r0, [pc, #8]	; (8000b18 <print_continuously+0x1c>)
 8000b0e:	f001 feef 	bl	80028f0 <iprintf>
        osYield();
 8000b12:	f7ff fee9 	bl	80008e8 <osYield>
        printf("Thread1: %d\n", value_1);
 8000b16:	e7f8      	b.n	8000b0a <print_continuously+0xe>
 8000b18:	08003940 	.word	0x08003940

08000b1c <print_again>:
    }
}

void print_again(void* arguments) {
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b086      	sub	sp, #24
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	6078      	str	r0, [r7, #4]
	ThreadArguments* args = (ThreadArguments*)arguments;
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	617b      	str	r3, [r7, #20]
	int value1 = args->value1;
 8000b28:	697b      	ldr	r3, [r7, #20]
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	613b      	str	r3, [r7, #16]
	int value2 = args->value2;
 8000b2e:	697b      	ldr	r3, [r7, #20]
 8000b30:	685b      	ldr	r3, [r3, #4]
 8000b32:	60fb      	str	r3, [r7, #12]

	while (true) {
		sharedVariable = value2;
 8000b34:	4a04      	ldr	r2, [pc, #16]	; (8000b48 <print_again+0x2c>)
 8000b36:	68fb      	ldr	r3, [r7, #12]
 8000b38:	6013      	str	r3, [r2, #0]
	    printf("Thread2: %d\n", sharedVariable);
 8000b3a:	4b03      	ldr	r3, [pc, #12]	; (8000b48 <print_again+0x2c>)
 8000b3c:	681b      	ldr	r3, [r3, #0]
 8000b3e:	4619      	mov	r1, r3
 8000b40:	4802      	ldr	r0, [pc, #8]	; (8000b4c <print_again+0x30>)
 8000b42:	f001 fed5 	bl	80028f0 <iprintf>
		sharedVariable = value2;
 8000b46:	e7f5      	b.n	8000b34 <print_again+0x18>
 8000b48:	2000039c 	.word	0x2000039c
 8000b4c:	08003950 	.word	0x08003950

08000b50 <newthing>:
	}
}

void newthing(void* interesting_value) {
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b084      	sub	sp, #16
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	6078      	str	r0, [r7, #4]

	int value_1 = *(int*)interesting_value;
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	60fb      	str	r3, [r7, #12]
    while (1) {
        printf("Other Thread: %d\n", value_1);
 8000b5e:	68f9      	ldr	r1, [r7, #12]
 8000b60:	4801      	ldr	r0, [pc, #4]	; (8000b68 <newthing+0x18>)
 8000b62:	f001 fec5 	bl	80028f0 <iprintf>
 8000b66:	e7fa      	b.n	8000b5e <newthing+0xe>
 8000b68:	08003960 	.word	0x08003960

08000b6c <againthing>:
//        osYield();
    }
}

void againthing(void* interesting_value) {
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b084      	sub	sp, #16
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	6078      	str	r0, [r7, #4]

	int value_1 = *(int*)interesting_value;
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	60fb      	str	r3, [r7, #12]
    while (1) {
        printf("New: %d\n", value_1);
 8000b7a:	68f9      	ldr	r1, [r7, #12]
 8000b7c:	4801      	ldr	r0, [pc, #4]	; (8000b84 <againthing+0x18>)
 8000b7e:	f001 feb7 	bl	80028f0 <iprintf>
 8000b82:	e7fa      	b.n	8000b7a <againthing+0xe>
 8000b84:	08003974 	.word	0x08003974

08000b88 <print_thread_id>:

    }
}

// Test case thread 1: Print thread ID continuously
void print_thread_id(void* thread_id) {
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	b084      	sub	sp, #16
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	6078      	str	r0, [r7, #4]
    int id = *(int*)thread_id;
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	60fb      	str	r3, [r7, #12]
    while (1) {
        printf("Thread ID: %d\n", id);
 8000b96:	68f9      	ldr	r1, [r7, #12]
 8000b98:	4801      	ldr	r0, [pc, #4]	; (8000ba0 <print_thread_id+0x18>)
 8000b9a:	f001 fea9 	bl	80028f0 <iprintf>
 8000b9e:	e7fa      	b.n	8000b96 <print_thread_id+0xe>
 8000ba0:	08003980 	.word	0x08003980

08000ba4 <print_thread_id_urgent>:
    }
    osYield();
}

// Test case thread 2: Print thread ID continuously with different deadline
void print_thread_id_urgent(void* thread_id) {
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b084      	sub	sp, #16
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	6078      	str	r0, [r7, #4]
    int id = *(int*)thread_id;
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	60fb      	str	r3, [r7, #12]
    while (1) {
        printf("URGENT Thread ID: %d\n", id);
 8000bb2:	68f9      	ldr	r1, [r7, #12]
 8000bb4:	4801      	ldr	r0, [pc, #4]	; (8000bbc <print_thread_id_urgent+0x18>)
 8000bb6:	f001 fe9b 	bl	80028f0 <iprintf>
 8000bba:	e7fa      	b.n	8000bb2 <print_thread_id_urgent+0xe>
 8000bbc:	08003990 	.word	0x08003990

08000bc0 <print_thread_id_1>:
    }
}

void print_thread_id_1(void* thread_id) {
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b084      	sub	sp, #16
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	6078      	str	r0, [r7, #4]
    int id = *(int*)thread_id;
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	60fb      	str	r3, [r7, #12]
    while (1) {
        printf("Thread ID again: %d\n", id);
 8000bce:	68f9      	ldr	r1, [r7, #12]
 8000bd0:	4801      	ldr	r0, [pc, #4]	; (8000bd8 <print_thread_id_1+0x18>)
 8000bd2:	f001 fe8d 	bl	80028f0 <iprintf>
 8000bd6:	e7fa      	b.n	8000bce <print_thread_id_1+0xe>
 8000bd8:	080039a8 	.word	0x080039a8

08000bdc <main>:
  *
  *
  */

int main(void)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b08a      	sub	sp, #40	; 0x28
 8000be0:	af00      	add	r7, sp, #0
	int thread1_id = 1;
 8000be2:	2301      	movs	r3, #1
 8000be4:	613b      	str	r3, [r7, #16]
	int thread2_id = 2;
 8000be6:	2302      	movs	r3, #2
 8000be8:	60fb      	str	r3, [r7, #12]

	ThreadArguments args = {
 8000bea:	4a1b      	ldr	r2, [pc, #108]	; (8000c58 <main+0x7c>)
 8000bec:	1d3b      	adds	r3, r7, #4
 8000bee:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000bf2:	e883 0003 	stmia.w	r3, {r0, r1}
			.value1 = 100,
	        .value2 = 150,
	};
	void (*continuous_print_ptr)(void);  // Function pointer declaration

	continuous_print_ptr = &print_continuously;  // Assign function address to the pointer
 8000bf6:	4b19      	ldr	r3, [pc, #100]	; (8000c5c <main+0x80>)
 8000bf8:	627b      	str	r3, [r7, #36]	; 0x24

	void (*continuous_other_print_ptr)(void);  // Function pointer declaration

	continuous_other_print_ptr = &print_again;
 8000bfa:	4b19      	ldr	r3, [pc, #100]	; (8000c60 <main+0x84>)
 8000bfc:	623b      	str	r3, [r7, #32]

	void (*new_ptr)(void);  // Function pointer declaration

	new_ptr = &newthing;
 8000bfe:	4b19      	ldr	r3, [pc, #100]	; (8000c64 <main+0x88>)
 8000c00:	61fb      	str	r3, [r7, #28]

	void (*other_ptr)(void);  // Function pointer declaration

	other_ptr = &againthing;
 8000c02:	4b19      	ldr	r3, [pc, #100]	; (8000c68 <main+0x8c>)
 8000c04:	61bb      	str	r3, [r7, #24]

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */

  HAL_Init();
 8000c06:	f000 faf1 	bl	80011ec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c0a:	f000 f837 	bl	8000c7c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c0e:	f000 f8c9 	bl	8000da4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000c12:	f000 f89d 	bl	8000d50 <MX_USART2_UART_Init>
  uint32_t* MSP_INIT_VAL = *(uint32_t**)0x0;
 8000c16:	2300      	movs	r3, #0
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	617b      	str	r3, [r7, #20]
//  uint32_t PSP = (uint32_t)MSP_INIT_VAL - 0x200;
//  stackptr = (uint32_t*)PSP;
  oldstackptr = MSP_INIT_VAL;
 8000c1c:	4a13      	ldr	r2, [pc, #76]	; (8000c6c <main+0x90>)
 8000c1e:	697b      	ldr	r3, [r7, #20]
 8000c20:	6013      	str	r3, [r2, #0]

//  runFirstThread();
  osKernelInitialize();
 8000c22:	f7ff fe31 	bl	8000888 <osKernelInitialize>

  // Create thread 1 with a deadline of 100 ms
  osThreadCreateWithDeadline(print_thread_id, &thread1_id, 100);
 8000c26:	f107 0310 	add.w	r3, r7, #16
 8000c2a:	2264      	movs	r2, #100	; 0x64
 8000c2c:	4619      	mov	r1, r3
 8000c2e:	4810      	ldr	r0, [pc, #64]	; (8000c70 <main+0x94>)
 8000c30:	f7ff fd30 	bl	8000694 <osThreadCreateWithDeadline>

      // Create thread 2 with a deadline of 50 ms (more urgent)
  osThreadCreateWithDeadline(print_thread_id_urgent, &thread2_id, 200);
 8000c34:	f107 030c 	add.w	r3, r7, #12
 8000c38:	22c8      	movs	r2, #200	; 0xc8
 8000c3a:	4619      	mov	r1, r3
 8000c3c:	480d      	ldr	r0, [pc, #52]	; (8000c74 <main+0x98>)
 8000c3e:	f7ff fd29 	bl	8000694 <osThreadCreateWithDeadline>

  osThreadCreateWithDeadline(print_thread_id_1, &thread1_id, 300);
 8000c42:	f107 0310 	add.w	r3, r7, #16
 8000c46:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8000c4a:	4619      	mov	r1, r3
 8000c4c:	480a      	ldr	r0, [pc, #40]	; (8000c78 <main+0x9c>)
 8000c4e:	f7ff fd21 	bl	8000694 <osThreadCreateWithDeadline>
//  osThreadCreateWithDeadline(continuous_other_print_ptr, &args, 100);
//  osThreadCreateWithDeadline(new_ptr, &args, 200);



  osKernelStart();
 8000c52:	f7ff fe41 	bl	80008d8 <osKernelStart>
//  print_continously();


  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000c56:	e7fe      	b.n	8000c56 <main+0x7a>
 8000c58:	080039dc 	.word	0x080039dc
 8000c5c:	08000afd 	.word	0x08000afd
 8000c60:	08000b1d 	.word	0x08000b1d
 8000c64:	08000b51 	.word	0x08000b51
 8000c68:	08000b6d 	.word	0x08000b6d
 8000c6c:	20000394 	.word	0x20000394
 8000c70:	08000b89 	.word	0x08000b89
 8000c74:	08000ba5 	.word	0x08000ba5
 8000c78:	08000bc1 	.word	0x08000bc1

08000c7c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b094      	sub	sp, #80	; 0x50
 8000c80:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c82:	f107 0320 	add.w	r3, r7, #32
 8000c86:	2230      	movs	r2, #48	; 0x30
 8000c88:	2100      	movs	r1, #0
 8000c8a:	4618      	mov	r0, r3
 8000c8c:	f001 fe28 	bl	80028e0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c90:	f107 030c 	add.w	r3, r7, #12
 8000c94:	2200      	movs	r2, #0
 8000c96:	601a      	str	r2, [r3, #0]
 8000c98:	605a      	str	r2, [r3, #4]
 8000c9a:	609a      	str	r2, [r3, #8]
 8000c9c:	60da      	str	r2, [r3, #12]
 8000c9e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	60bb      	str	r3, [r7, #8]
 8000ca4:	4b28      	ldr	r3, [pc, #160]	; (8000d48 <SystemClock_Config+0xcc>)
 8000ca6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ca8:	4a27      	ldr	r2, [pc, #156]	; (8000d48 <SystemClock_Config+0xcc>)
 8000caa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000cae:	6413      	str	r3, [r2, #64]	; 0x40
 8000cb0:	4b25      	ldr	r3, [pc, #148]	; (8000d48 <SystemClock_Config+0xcc>)
 8000cb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cb4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cb8:	60bb      	str	r3, [r7, #8]
 8000cba:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	607b      	str	r3, [r7, #4]
 8000cc0:	4b22      	ldr	r3, [pc, #136]	; (8000d4c <SystemClock_Config+0xd0>)
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	4a21      	ldr	r2, [pc, #132]	; (8000d4c <SystemClock_Config+0xd0>)
 8000cc6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000cca:	6013      	str	r3, [r2, #0]
 8000ccc:	4b1f      	ldr	r3, [pc, #124]	; (8000d4c <SystemClock_Config+0xd0>)
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000cd4:	607b      	str	r3, [r7, #4]
 8000cd6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000cd8:	2302      	movs	r3, #2
 8000cda:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000cdc:	2301      	movs	r3, #1
 8000cde:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000ce0:	2310      	movs	r3, #16
 8000ce2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ce4:	2302      	movs	r3, #2
 8000ce6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000ce8:	2300      	movs	r3, #0
 8000cea:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000cec:	2310      	movs	r3, #16
 8000cee:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000cf0:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000cf4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000cf6:	2304      	movs	r3, #4
 8000cf8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000cfa:	2304      	movs	r3, #4
 8000cfc:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000cfe:	f107 0320 	add.w	r3, r7, #32
 8000d02:	4618      	mov	r0, r3
 8000d04:	f000 fd68 	bl	80017d8 <HAL_RCC_OscConfig>
 8000d08:	4603      	mov	r3, r0
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	d001      	beq.n	8000d12 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000d0e:	f000 f8b7 	bl	8000e80 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d12:	230f      	movs	r3, #15
 8000d14:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d16:	2302      	movs	r3, #2
 8000d18:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000d1e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d22:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d24:	2300      	movs	r3, #0
 8000d26:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000d28:	f107 030c 	add.w	r3, r7, #12
 8000d2c:	2102      	movs	r1, #2
 8000d2e:	4618      	mov	r0, r3
 8000d30:	f000 ffca 	bl	8001cc8 <HAL_RCC_ClockConfig>
 8000d34:	4603      	mov	r3, r0
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d001      	beq.n	8000d3e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000d3a:	f000 f8a1 	bl	8000e80 <Error_Handler>
  }
}
 8000d3e:	bf00      	nop
 8000d40:	3750      	adds	r7, #80	; 0x50
 8000d42:	46bd      	mov	sp, r7
 8000d44:	bd80      	pop	{r7, pc}
 8000d46:	bf00      	nop
 8000d48:	40023800 	.word	0x40023800
 8000d4c:	40007000 	.word	0x40007000

08000d50 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000d54:	4b11      	ldr	r3, [pc, #68]	; (8000d9c <MX_USART2_UART_Init+0x4c>)
 8000d56:	4a12      	ldr	r2, [pc, #72]	; (8000da0 <MX_USART2_UART_Init+0x50>)
 8000d58:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000d5a:	4b10      	ldr	r3, [pc, #64]	; (8000d9c <MX_USART2_UART_Init+0x4c>)
 8000d5c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000d60:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000d62:	4b0e      	ldr	r3, [pc, #56]	; (8000d9c <MX_USART2_UART_Init+0x4c>)
 8000d64:	2200      	movs	r2, #0
 8000d66:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000d68:	4b0c      	ldr	r3, [pc, #48]	; (8000d9c <MX_USART2_UART_Init+0x4c>)
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000d6e:	4b0b      	ldr	r3, [pc, #44]	; (8000d9c <MX_USART2_UART_Init+0x4c>)
 8000d70:	2200      	movs	r2, #0
 8000d72:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000d74:	4b09      	ldr	r3, [pc, #36]	; (8000d9c <MX_USART2_UART_Init+0x4c>)
 8000d76:	220c      	movs	r2, #12
 8000d78:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d7a:	4b08      	ldr	r3, [pc, #32]	; (8000d9c <MX_USART2_UART_Init+0x4c>)
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d80:	4b06      	ldr	r3, [pc, #24]	; (8000d9c <MX_USART2_UART_Init+0x4c>)
 8000d82:	2200      	movs	r2, #0
 8000d84:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000d86:	4805      	ldr	r0, [pc, #20]	; (8000d9c <MX_USART2_UART_Init+0x4c>)
 8000d88:	f001 f9be 	bl	8002108 <HAL_UART_Init>
 8000d8c:	4603      	mov	r3, r0
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d001      	beq.n	8000d96 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000d92:	f000 f875 	bl	8000e80 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000d96:	bf00      	nop
 8000d98:	bd80      	pop	{r7, pc}
 8000d9a:	bf00      	nop
 8000d9c:	200003a0 	.word	0x200003a0
 8000da0:	40004400 	.word	0x40004400

08000da4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b08a      	sub	sp, #40	; 0x28
 8000da8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000daa:	f107 0314 	add.w	r3, r7, #20
 8000dae:	2200      	movs	r2, #0
 8000db0:	601a      	str	r2, [r3, #0]
 8000db2:	605a      	str	r2, [r3, #4]
 8000db4:	609a      	str	r2, [r3, #8]
 8000db6:	60da      	str	r2, [r3, #12]
 8000db8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000dba:	2300      	movs	r3, #0
 8000dbc:	613b      	str	r3, [r7, #16]
 8000dbe:	4b2d      	ldr	r3, [pc, #180]	; (8000e74 <MX_GPIO_Init+0xd0>)
 8000dc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dc2:	4a2c      	ldr	r2, [pc, #176]	; (8000e74 <MX_GPIO_Init+0xd0>)
 8000dc4:	f043 0304 	orr.w	r3, r3, #4
 8000dc8:	6313      	str	r3, [r2, #48]	; 0x30
 8000dca:	4b2a      	ldr	r3, [pc, #168]	; (8000e74 <MX_GPIO_Init+0xd0>)
 8000dcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dce:	f003 0304 	and.w	r3, r3, #4
 8000dd2:	613b      	str	r3, [r7, #16]
 8000dd4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	60fb      	str	r3, [r7, #12]
 8000dda:	4b26      	ldr	r3, [pc, #152]	; (8000e74 <MX_GPIO_Init+0xd0>)
 8000ddc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dde:	4a25      	ldr	r2, [pc, #148]	; (8000e74 <MX_GPIO_Init+0xd0>)
 8000de0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000de4:	6313      	str	r3, [r2, #48]	; 0x30
 8000de6:	4b23      	ldr	r3, [pc, #140]	; (8000e74 <MX_GPIO_Init+0xd0>)
 8000de8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000dee:	60fb      	str	r3, [r7, #12]
 8000df0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000df2:	2300      	movs	r3, #0
 8000df4:	60bb      	str	r3, [r7, #8]
 8000df6:	4b1f      	ldr	r3, [pc, #124]	; (8000e74 <MX_GPIO_Init+0xd0>)
 8000df8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dfa:	4a1e      	ldr	r2, [pc, #120]	; (8000e74 <MX_GPIO_Init+0xd0>)
 8000dfc:	f043 0301 	orr.w	r3, r3, #1
 8000e00:	6313      	str	r3, [r2, #48]	; 0x30
 8000e02:	4b1c      	ldr	r3, [pc, #112]	; (8000e74 <MX_GPIO_Init+0xd0>)
 8000e04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e06:	f003 0301 	and.w	r3, r3, #1
 8000e0a:	60bb      	str	r3, [r7, #8]
 8000e0c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e0e:	2300      	movs	r3, #0
 8000e10:	607b      	str	r3, [r7, #4]
 8000e12:	4b18      	ldr	r3, [pc, #96]	; (8000e74 <MX_GPIO_Init+0xd0>)
 8000e14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e16:	4a17      	ldr	r2, [pc, #92]	; (8000e74 <MX_GPIO_Init+0xd0>)
 8000e18:	f043 0302 	orr.w	r3, r3, #2
 8000e1c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e1e:	4b15      	ldr	r3, [pc, #84]	; (8000e74 <MX_GPIO_Init+0xd0>)
 8000e20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e22:	f003 0302 	and.w	r3, r3, #2
 8000e26:	607b      	str	r3, [r7, #4]
 8000e28:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	2120      	movs	r1, #32
 8000e2e:	4812      	ldr	r0, [pc, #72]	; (8000e78 <MX_GPIO_Init+0xd4>)
 8000e30:	f000 fcb8 	bl	80017a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000e34:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000e38:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000e3a:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000e3e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e40:	2300      	movs	r3, #0
 8000e42:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000e44:	f107 0314 	add.w	r3, r7, #20
 8000e48:	4619      	mov	r1, r3
 8000e4a:	480c      	ldr	r0, [pc, #48]	; (8000e7c <MX_GPIO_Init+0xd8>)
 8000e4c:	f000 fb26 	bl	800149c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000e50:	2320      	movs	r3, #32
 8000e52:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e54:	2301      	movs	r3, #1
 8000e56:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e58:	2300      	movs	r3, #0
 8000e5a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000e60:	f107 0314 	add.w	r3, r7, #20
 8000e64:	4619      	mov	r1, r3
 8000e66:	4804      	ldr	r0, [pc, #16]	; (8000e78 <MX_GPIO_Init+0xd4>)
 8000e68:	f000 fb18 	bl	800149c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000e6c:	bf00      	nop
 8000e6e:	3728      	adds	r7, #40	; 0x28
 8000e70:	46bd      	mov	sp, r7
 8000e72:	bd80      	pop	{r7, pc}
 8000e74:	40023800 	.word	0x40023800
 8000e78:	40020000 	.word	0x40020000
 8000e7c:	40020800 	.word	0x40020800

08000e80 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e80:	b480      	push	{r7}
 8000e82:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000e84:	b672      	cpsid	i
}
 8000e86:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e88:	e7fe      	b.n	8000e88 <Error_Handler+0x8>
	...

08000e8c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b082      	sub	sp, #8
 8000e90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e92:	2300      	movs	r3, #0
 8000e94:	607b      	str	r3, [r7, #4]
 8000e96:	4b10      	ldr	r3, [pc, #64]	; (8000ed8 <HAL_MspInit+0x4c>)
 8000e98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e9a:	4a0f      	ldr	r2, [pc, #60]	; (8000ed8 <HAL_MspInit+0x4c>)
 8000e9c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ea0:	6453      	str	r3, [r2, #68]	; 0x44
 8000ea2:	4b0d      	ldr	r3, [pc, #52]	; (8000ed8 <HAL_MspInit+0x4c>)
 8000ea4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ea6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000eaa:	607b      	str	r3, [r7, #4]
 8000eac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000eae:	2300      	movs	r3, #0
 8000eb0:	603b      	str	r3, [r7, #0]
 8000eb2:	4b09      	ldr	r3, [pc, #36]	; (8000ed8 <HAL_MspInit+0x4c>)
 8000eb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eb6:	4a08      	ldr	r2, [pc, #32]	; (8000ed8 <HAL_MspInit+0x4c>)
 8000eb8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ebc:	6413      	str	r3, [r2, #64]	; 0x40
 8000ebe:	4b06      	ldr	r3, [pc, #24]	; (8000ed8 <HAL_MspInit+0x4c>)
 8000ec0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ec2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ec6:	603b      	str	r3, [r7, #0]
 8000ec8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000eca:	2007      	movs	r0, #7
 8000ecc:	f000 fab2 	bl	8001434 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ed0:	bf00      	nop
 8000ed2:	3708      	adds	r7, #8
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	bd80      	pop	{r7, pc}
 8000ed8:	40023800 	.word	0x40023800

08000edc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b08a      	sub	sp, #40	; 0x28
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ee4:	f107 0314 	add.w	r3, r7, #20
 8000ee8:	2200      	movs	r2, #0
 8000eea:	601a      	str	r2, [r3, #0]
 8000eec:	605a      	str	r2, [r3, #4]
 8000eee:	609a      	str	r2, [r3, #8]
 8000ef0:	60da      	str	r2, [r3, #12]
 8000ef2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	4a19      	ldr	r2, [pc, #100]	; (8000f60 <HAL_UART_MspInit+0x84>)
 8000efa:	4293      	cmp	r3, r2
 8000efc:	d12b      	bne.n	8000f56 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000efe:	2300      	movs	r3, #0
 8000f00:	613b      	str	r3, [r7, #16]
 8000f02:	4b18      	ldr	r3, [pc, #96]	; (8000f64 <HAL_UART_MspInit+0x88>)
 8000f04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f06:	4a17      	ldr	r2, [pc, #92]	; (8000f64 <HAL_UART_MspInit+0x88>)
 8000f08:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f0c:	6413      	str	r3, [r2, #64]	; 0x40
 8000f0e:	4b15      	ldr	r3, [pc, #84]	; (8000f64 <HAL_UART_MspInit+0x88>)
 8000f10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f16:	613b      	str	r3, [r7, #16]
 8000f18:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	60fb      	str	r3, [r7, #12]
 8000f1e:	4b11      	ldr	r3, [pc, #68]	; (8000f64 <HAL_UART_MspInit+0x88>)
 8000f20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f22:	4a10      	ldr	r2, [pc, #64]	; (8000f64 <HAL_UART_MspInit+0x88>)
 8000f24:	f043 0301 	orr.w	r3, r3, #1
 8000f28:	6313      	str	r3, [r2, #48]	; 0x30
 8000f2a:	4b0e      	ldr	r3, [pc, #56]	; (8000f64 <HAL_UART_MspInit+0x88>)
 8000f2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f2e:	f003 0301 	and.w	r3, r3, #1
 8000f32:	60fb      	str	r3, [r7, #12]
 8000f34:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000f36:	230c      	movs	r3, #12
 8000f38:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f3a:	2302      	movs	r3, #2
 8000f3c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f3e:	2300      	movs	r3, #0
 8000f40:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f42:	2303      	movs	r3, #3
 8000f44:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000f46:	2307      	movs	r3, #7
 8000f48:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f4a:	f107 0314 	add.w	r3, r7, #20
 8000f4e:	4619      	mov	r1, r3
 8000f50:	4805      	ldr	r0, [pc, #20]	; (8000f68 <HAL_UART_MspInit+0x8c>)
 8000f52:	f000 faa3 	bl	800149c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000f56:	bf00      	nop
 8000f58:	3728      	adds	r7, #40	; 0x28
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	bd80      	pop	{r7, pc}
 8000f5e:	bf00      	nop
 8000f60:	40004400 	.word	0x40004400
 8000f64:	40023800 	.word	0x40023800
 8000f68:	40020000 	.word	0x40020000

08000f6c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f70:	e7fe      	b.n	8000f70 <NMI_Handler+0x4>

08000f72 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f72:	b480      	push	{r7}
 8000f74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f76:	e7fe      	b.n	8000f76 <HardFault_Handler+0x4>

08000f78 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f78:	b480      	push	{r7}
 8000f7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f7c:	e7fe      	b.n	8000f7c <MemManage_Handler+0x4>

08000f7e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f7e:	b480      	push	{r7}
 8000f80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f82:	e7fe      	b.n	8000f82 <BusFault_Handler+0x4>

08000f84 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f84:	b480      	push	{r7}
 8000f86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f88:	e7fe      	b.n	8000f88 <UsageFault_Handler+0x4>

08000f8a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f8a:	b480      	push	{r7}
 8000f8c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f8e:	bf00      	nop
 8000f90:	46bd      	mov	sp, r7
 8000f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f96:	4770      	bx	lr

08000f98 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f9c:	f000 f978 	bl	8001290 <HAL_IncTick>

  arrayThread[current_thread_index].runtime =   arrayThread[current_thread_index].runtime - 1;
 8000fa0:	4b1f      	ldr	r3, [pc, #124]	; (8001020 <SysTick_Handler+0x88>)
 8000fa2:	681a      	ldr	r2, [r3, #0]
 8000fa4:	491f      	ldr	r1, [pc, #124]	; (8001024 <SysTick_Handler+0x8c>)
 8000fa6:	4613      	mov	r3, r2
 8000fa8:	005b      	lsls	r3, r3, #1
 8000faa:	4413      	add	r3, r2
 8000fac:	00db      	lsls	r3, r3, #3
 8000fae:	440b      	add	r3, r1
 8000fb0:	330c      	adds	r3, #12
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	4a1a      	ldr	r2, [pc, #104]	; (8001020 <SysTick_Handler+0x88>)
 8000fb6:	6812      	ldr	r2, [r2, #0]
 8000fb8:	1e59      	subs	r1, r3, #1
 8000fba:	481a      	ldr	r0, [pc, #104]	; (8001024 <SysTick_Handler+0x8c>)
 8000fbc:	4613      	mov	r3, r2
 8000fbe:	005b      	lsls	r3, r3, #1
 8000fc0:	4413      	add	r3, r2
 8000fc2:	00db      	lsls	r3, r3, #3
 8000fc4:	4403      	add	r3, r0
 8000fc6:	330c      	adds	r3, #12
 8000fc8:	6019      	str	r1, [r3, #0]

      // Check if the runtime has reached zero
  if (arrayThread[current_thread_index].runtime == 0) {
 8000fca:	4b15      	ldr	r3, [pc, #84]	; (8001020 <SysTick_Handler+0x88>)
 8000fcc:	681a      	ldr	r2, [r3, #0]
 8000fce:	4915      	ldr	r1, [pc, #84]	; (8001024 <SysTick_Handler+0x8c>)
 8000fd0:	4613      	mov	r3, r2
 8000fd2:	005b      	lsls	r3, r3, #1
 8000fd4:	4413      	add	r3, r2
 8000fd6:	00db      	lsls	r3, r3, #3
 8000fd8:	440b      	add	r3, r1
 8000fda:	330c      	adds	r3, #12
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d11b      	bne.n	800101a <SysTick_Handler+0x82>
          // Reset the runtime to the thread's timeslice
	  arrayThread[current_thread_index].runtime = arrayThread[current_thread_index].timeslice;
 8000fe2:	4b0f      	ldr	r3, [pc, #60]	; (8001020 <SysTick_Handler+0x88>)
 8000fe4:	6819      	ldr	r1, [r3, #0]
 8000fe6:	4b0e      	ldr	r3, [pc, #56]	; (8001020 <SysTick_Handler+0x88>)
 8000fe8:	681a      	ldr	r2, [r3, #0]
 8000fea:	480e      	ldr	r0, [pc, #56]	; (8001024 <SysTick_Handler+0x8c>)
 8000fec:	460b      	mov	r3, r1
 8000fee:	005b      	lsls	r3, r3, #1
 8000ff0:	440b      	add	r3, r1
 8000ff2:	00db      	lsls	r3, r3, #3
 8000ff4:	4403      	add	r3, r0
 8000ff6:	3308      	adds	r3, #8
 8000ff8:	6819      	ldr	r1, [r3, #0]
 8000ffa:	480a      	ldr	r0, [pc, #40]	; (8001024 <SysTick_Handler+0x8c>)
 8000ffc:	4613      	mov	r3, r2
 8000ffe:	005b      	lsls	r3, r3, #1
 8001000:	4413      	add	r3, r2
 8001002:	00db      	lsls	r3, r3, #3
 8001004:	4403      	add	r3, r0
 8001006:	330c      	adds	r3, #12
 8001008:	6019      	str	r1, [r3, #0]

          // Trigger a context switch using PendSV
      _ICSR |= 1 << 28;
 800100a:	4b07      	ldr	r3, [pc, #28]	; (8001028 <SysTick_Handler+0x90>)
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	4a06      	ldr	r2, [pc, #24]	; (8001028 <SysTick_Handler+0x90>)
 8001010:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001014:	6013      	str	r3, [r2, #0]
      __asm("isb");
 8001016:	f3bf 8f6f 	isb	sy
  }

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800101a:	bf00      	nop
 800101c:	bd80      	pop	{r7, pc}
 800101e:	bf00      	nop
 8001020:	20000000 	.word	0x20000000
 8001024:	20000090 	.word	0x20000090
 8001028:	e000ed04 	.word	0xe000ed04

0800102c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	b086      	sub	sp, #24
 8001030:	af00      	add	r7, sp, #0
 8001032:	60f8      	str	r0, [r7, #12]
 8001034:	60b9      	str	r1, [r7, #8]
 8001036:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001038:	2300      	movs	r3, #0
 800103a:	617b      	str	r3, [r7, #20]
 800103c:	e00a      	b.n	8001054 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800103e:	f3af 8000 	nop.w
 8001042:	4601      	mov	r1, r0
 8001044:	68bb      	ldr	r3, [r7, #8]
 8001046:	1c5a      	adds	r2, r3, #1
 8001048:	60ba      	str	r2, [r7, #8]
 800104a:	b2ca      	uxtb	r2, r1
 800104c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800104e:	697b      	ldr	r3, [r7, #20]
 8001050:	3301      	adds	r3, #1
 8001052:	617b      	str	r3, [r7, #20]
 8001054:	697a      	ldr	r2, [r7, #20]
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	429a      	cmp	r2, r3
 800105a:	dbf0      	blt.n	800103e <_read+0x12>
  }

  return len;
 800105c:	687b      	ldr	r3, [r7, #4]
}
 800105e:	4618      	mov	r0, r3
 8001060:	3718      	adds	r7, #24
 8001062:	46bd      	mov	sp, r7
 8001064:	bd80      	pop	{r7, pc}

08001066 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001066:	b580      	push	{r7, lr}
 8001068:	b086      	sub	sp, #24
 800106a:	af00      	add	r7, sp, #0
 800106c:	60f8      	str	r0, [r7, #12]
 800106e:	60b9      	str	r1, [r7, #8]
 8001070:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001072:	2300      	movs	r3, #0
 8001074:	617b      	str	r3, [r7, #20]
 8001076:	e009      	b.n	800108c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001078:	68bb      	ldr	r3, [r7, #8]
 800107a:	1c5a      	adds	r2, r3, #1
 800107c:	60ba      	str	r2, [r7, #8]
 800107e:	781b      	ldrb	r3, [r3, #0]
 8001080:	4618      	mov	r0, r3
 8001082:	f7ff fd29 	bl	8000ad8 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001086:	697b      	ldr	r3, [r7, #20]
 8001088:	3301      	adds	r3, #1
 800108a:	617b      	str	r3, [r7, #20]
 800108c:	697a      	ldr	r2, [r7, #20]
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	429a      	cmp	r2, r3
 8001092:	dbf1      	blt.n	8001078 <_write+0x12>
  }
  return len;
 8001094:	687b      	ldr	r3, [r7, #4]
}
 8001096:	4618      	mov	r0, r3
 8001098:	3718      	adds	r7, #24
 800109a:	46bd      	mov	sp, r7
 800109c:	bd80      	pop	{r7, pc}

0800109e <_close>:

int _close(int file)
{
 800109e:	b480      	push	{r7}
 80010a0:	b083      	sub	sp, #12
 80010a2:	af00      	add	r7, sp, #0
 80010a4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80010a6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80010aa:	4618      	mov	r0, r3
 80010ac:	370c      	adds	r7, #12
 80010ae:	46bd      	mov	sp, r7
 80010b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b4:	4770      	bx	lr

080010b6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80010b6:	b480      	push	{r7}
 80010b8:	b083      	sub	sp, #12
 80010ba:	af00      	add	r7, sp, #0
 80010bc:	6078      	str	r0, [r7, #4]
 80010be:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80010c0:	683b      	ldr	r3, [r7, #0]
 80010c2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80010c6:	605a      	str	r2, [r3, #4]
  return 0;
 80010c8:	2300      	movs	r3, #0
}
 80010ca:	4618      	mov	r0, r3
 80010cc:	370c      	adds	r7, #12
 80010ce:	46bd      	mov	sp, r7
 80010d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d4:	4770      	bx	lr

080010d6 <_isatty>:

int _isatty(int file)
{
 80010d6:	b480      	push	{r7}
 80010d8:	b083      	sub	sp, #12
 80010da:	af00      	add	r7, sp, #0
 80010dc:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80010de:	2301      	movs	r3, #1
}
 80010e0:	4618      	mov	r0, r3
 80010e2:	370c      	adds	r7, #12
 80010e4:	46bd      	mov	sp, r7
 80010e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ea:	4770      	bx	lr

080010ec <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80010ec:	b480      	push	{r7}
 80010ee:	b085      	sub	sp, #20
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	60f8      	str	r0, [r7, #12]
 80010f4:	60b9      	str	r1, [r7, #8]
 80010f6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80010f8:	2300      	movs	r3, #0
}
 80010fa:	4618      	mov	r0, r3
 80010fc:	3714      	adds	r7, #20
 80010fe:	46bd      	mov	sp, r7
 8001100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001104:	4770      	bx	lr
	...

08001108 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	b086      	sub	sp, #24
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001110:	4a14      	ldr	r2, [pc, #80]	; (8001164 <_sbrk+0x5c>)
 8001112:	4b15      	ldr	r3, [pc, #84]	; (8001168 <_sbrk+0x60>)
 8001114:	1ad3      	subs	r3, r2, r3
 8001116:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001118:	697b      	ldr	r3, [r7, #20]
 800111a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800111c:	4b13      	ldr	r3, [pc, #76]	; (800116c <_sbrk+0x64>)
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	2b00      	cmp	r3, #0
 8001122:	d102      	bne.n	800112a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001124:	4b11      	ldr	r3, [pc, #68]	; (800116c <_sbrk+0x64>)
 8001126:	4a12      	ldr	r2, [pc, #72]	; (8001170 <_sbrk+0x68>)
 8001128:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800112a:	4b10      	ldr	r3, [pc, #64]	; (800116c <_sbrk+0x64>)
 800112c:	681a      	ldr	r2, [r3, #0]
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	4413      	add	r3, r2
 8001132:	693a      	ldr	r2, [r7, #16]
 8001134:	429a      	cmp	r2, r3
 8001136:	d207      	bcs.n	8001148 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001138:	f001 fba8 	bl	800288c <__errno>
 800113c:	4603      	mov	r3, r0
 800113e:	220c      	movs	r2, #12
 8001140:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001142:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001146:	e009      	b.n	800115c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001148:	4b08      	ldr	r3, [pc, #32]	; (800116c <_sbrk+0x64>)
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800114e:	4b07      	ldr	r3, [pc, #28]	; (800116c <_sbrk+0x64>)
 8001150:	681a      	ldr	r2, [r3, #0]
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	4413      	add	r3, r2
 8001156:	4a05      	ldr	r2, [pc, #20]	; (800116c <_sbrk+0x64>)
 8001158:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800115a:	68fb      	ldr	r3, [r7, #12]
}
 800115c:	4618      	mov	r0, r3
 800115e:	3718      	adds	r7, #24
 8001160:	46bd      	mov	sp, r7
 8001162:	bd80      	pop	{r7, pc}
 8001164:	20020000 	.word	0x20020000
 8001168:	00004000 	.word	0x00004000
 800116c:	200003e4 	.word	0x200003e4
 8001170:	20000400 	.word	0x20000400

08001174 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001174:	b480      	push	{r7}
 8001176:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001178:	4b06      	ldr	r3, [pc, #24]	; (8001194 <SystemInit+0x20>)
 800117a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800117e:	4a05      	ldr	r2, [pc, #20]	; (8001194 <SystemInit+0x20>)
 8001180:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001184:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001188:	bf00      	nop
 800118a:	46bd      	mov	sp, r7
 800118c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001190:	4770      	bx	lr
 8001192:	bf00      	nop
 8001194:	e000ed00 	.word	0xe000ed00

08001198 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001198:	f8df d034 	ldr.w	sp, [pc, #52]	; 80011d0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800119c:	480d      	ldr	r0, [pc, #52]	; (80011d4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800119e:	490e      	ldr	r1, [pc, #56]	; (80011d8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80011a0:	4a0e      	ldr	r2, [pc, #56]	; (80011dc <LoopFillZerobss+0x1e>)
  movs r3, #0
 80011a2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80011a4:	e002      	b.n	80011ac <LoopCopyDataInit>

080011a6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80011a6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80011a8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80011aa:	3304      	adds	r3, #4

080011ac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80011ac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80011ae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80011b0:	d3f9      	bcc.n	80011a6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80011b2:	4a0b      	ldr	r2, [pc, #44]	; (80011e0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80011b4:	4c0b      	ldr	r4, [pc, #44]	; (80011e4 <LoopFillZerobss+0x26>)
  movs r3, #0
 80011b6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80011b8:	e001      	b.n	80011be <LoopFillZerobss>

080011ba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80011ba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80011bc:	3204      	adds	r2, #4

080011be <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80011be:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80011c0:	d3fb      	bcc.n	80011ba <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80011c2:	f7ff ffd7 	bl	8001174 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80011c6:	f001 fb67 	bl	8002898 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80011ca:	f7ff fd07 	bl	8000bdc <main>
  bx  lr    
 80011ce:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80011d0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80011d4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80011d8:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 80011dc:	08003aa4 	.word	0x08003aa4
  ldr r2, =_sbss
 80011e0:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 80011e4:	200003fc 	.word	0x200003fc

080011e8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80011e8:	e7fe      	b.n	80011e8 <ADC_IRQHandler>
	...

080011ec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80011f0:	4b0e      	ldr	r3, [pc, #56]	; (800122c <HAL_Init+0x40>)
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	4a0d      	ldr	r2, [pc, #52]	; (800122c <HAL_Init+0x40>)
 80011f6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80011fa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80011fc:	4b0b      	ldr	r3, [pc, #44]	; (800122c <HAL_Init+0x40>)
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	4a0a      	ldr	r2, [pc, #40]	; (800122c <HAL_Init+0x40>)
 8001202:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001206:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001208:	4b08      	ldr	r3, [pc, #32]	; (800122c <HAL_Init+0x40>)
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	4a07      	ldr	r2, [pc, #28]	; (800122c <HAL_Init+0x40>)
 800120e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001212:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001214:	2003      	movs	r0, #3
 8001216:	f000 f90d 	bl	8001434 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800121a:	2000      	movs	r0, #0
 800121c:	f000 f808 	bl	8001230 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001220:	f7ff fe34 	bl	8000e8c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001224:	2300      	movs	r3, #0
}
 8001226:	4618      	mov	r0, r3
 8001228:	bd80      	pop	{r7, pc}
 800122a:	bf00      	nop
 800122c:	40023c00 	.word	0x40023c00

08001230 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	b082      	sub	sp, #8
 8001234:	af00      	add	r7, sp, #0
 8001236:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001238:	4b12      	ldr	r3, [pc, #72]	; (8001284 <HAL_InitTick+0x54>)
 800123a:	681a      	ldr	r2, [r3, #0]
 800123c:	4b12      	ldr	r3, [pc, #72]	; (8001288 <HAL_InitTick+0x58>)
 800123e:	781b      	ldrb	r3, [r3, #0]
 8001240:	4619      	mov	r1, r3
 8001242:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001246:	fbb3 f3f1 	udiv	r3, r3, r1
 800124a:	fbb2 f3f3 	udiv	r3, r2, r3
 800124e:	4618      	mov	r0, r3
 8001250:	f000 f917 	bl	8001482 <HAL_SYSTICK_Config>
 8001254:	4603      	mov	r3, r0
 8001256:	2b00      	cmp	r3, #0
 8001258:	d001      	beq.n	800125e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800125a:	2301      	movs	r3, #1
 800125c:	e00e      	b.n	800127c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	2b0f      	cmp	r3, #15
 8001262:	d80a      	bhi.n	800127a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001264:	2200      	movs	r2, #0
 8001266:	6879      	ldr	r1, [r7, #4]
 8001268:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800126c:	f000 f8ed 	bl	800144a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001270:	4a06      	ldr	r2, [pc, #24]	; (800128c <HAL_InitTick+0x5c>)
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001276:	2300      	movs	r3, #0
 8001278:	e000      	b.n	800127c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800127a:	2301      	movs	r3, #1
}
 800127c:	4618      	mov	r0, r3
 800127e:	3708      	adds	r7, #8
 8001280:	46bd      	mov	sp, r7
 8001282:	bd80      	pop	{r7, pc}
 8001284:	20000004 	.word	0x20000004
 8001288:	2000000c 	.word	0x2000000c
 800128c:	20000008 	.word	0x20000008

08001290 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001290:	b480      	push	{r7}
 8001292:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001294:	4b06      	ldr	r3, [pc, #24]	; (80012b0 <HAL_IncTick+0x20>)
 8001296:	781b      	ldrb	r3, [r3, #0]
 8001298:	461a      	mov	r2, r3
 800129a:	4b06      	ldr	r3, [pc, #24]	; (80012b4 <HAL_IncTick+0x24>)
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	4413      	add	r3, r2
 80012a0:	4a04      	ldr	r2, [pc, #16]	; (80012b4 <HAL_IncTick+0x24>)
 80012a2:	6013      	str	r3, [r2, #0]
}
 80012a4:	bf00      	nop
 80012a6:	46bd      	mov	sp, r7
 80012a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ac:	4770      	bx	lr
 80012ae:	bf00      	nop
 80012b0:	2000000c 	.word	0x2000000c
 80012b4:	200003e8 	.word	0x200003e8

080012b8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012b8:	b480      	push	{r7}
 80012ba:	af00      	add	r7, sp, #0
  return uwTick;
 80012bc:	4b03      	ldr	r3, [pc, #12]	; (80012cc <HAL_GetTick+0x14>)
 80012be:	681b      	ldr	r3, [r3, #0]
}
 80012c0:	4618      	mov	r0, r3
 80012c2:	46bd      	mov	sp, r7
 80012c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c8:	4770      	bx	lr
 80012ca:	bf00      	nop
 80012cc:	200003e8 	.word	0x200003e8

080012d0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012d0:	b480      	push	{r7}
 80012d2:	b085      	sub	sp, #20
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	f003 0307 	and.w	r3, r3, #7
 80012de:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80012e0:	4b0c      	ldr	r3, [pc, #48]	; (8001314 <__NVIC_SetPriorityGrouping+0x44>)
 80012e2:	68db      	ldr	r3, [r3, #12]
 80012e4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80012e6:	68ba      	ldr	r2, [r7, #8]
 80012e8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80012ec:	4013      	ands	r3, r2
 80012ee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80012f0:	68fb      	ldr	r3, [r7, #12]
 80012f2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80012f4:	68bb      	ldr	r3, [r7, #8]
 80012f6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80012f8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80012fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001300:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001302:	4a04      	ldr	r2, [pc, #16]	; (8001314 <__NVIC_SetPriorityGrouping+0x44>)
 8001304:	68bb      	ldr	r3, [r7, #8]
 8001306:	60d3      	str	r3, [r2, #12]
}
 8001308:	bf00      	nop
 800130a:	3714      	adds	r7, #20
 800130c:	46bd      	mov	sp, r7
 800130e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001312:	4770      	bx	lr
 8001314:	e000ed00 	.word	0xe000ed00

08001318 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001318:	b480      	push	{r7}
 800131a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800131c:	4b04      	ldr	r3, [pc, #16]	; (8001330 <__NVIC_GetPriorityGrouping+0x18>)
 800131e:	68db      	ldr	r3, [r3, #12]
 8001320:	0a1b      	lsrs	r3, r3, #8
 8001322:	f003 0307 	and.w	r3, r3, #7
}
 8001326:	4618      	mov	r0, r3
 8001328:	46bd      	mov	sp, r7
 800132a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132e:	4770      	bx	lr
 8001330:	e000ed00 	.word	0xe000ed00

08001334 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001334:	b480      	push	{r7}
 8001336:	b083      	sub	sp, #12
 8001338:	af00      	add	r7, sp, #0
 800133a:	4603      	mov	r3, r0
 800133c:	6039      	str	r1, [r7, #0]
 800133e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001340:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001344:	2b00      	cmp	r3, #0
 8001346:	db0a      	blt.n	800135e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001348:	683b      	ldr	r3, [r7, #0]
 800134a:	b2da      	uxtb	r2, r3
 800134c:	490c      	ldr	r1, [pc, #48]	; (8001380 <__NVIC_SetPriority+0x4c>)
 800134e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001352:	0112      	lsls	r2, r2, #4
 8001354:	b2d2      	uxtb	r2, r2
 8001356:	440b      	add	r3, r1
 8001358:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800135c:	e00a      	b.n	8001374 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800135e:	683b      	ldr	r3, [r7, #0]
 8001360:	b2da      	uxtb	r2, r3
 8001362:	4908      	ldr	r1, [pc, #32]	; (8001384 <__NVIC_SetPriority+0x50>)
 8001364:	79fb      	ldrb	r3, [r7, #7]
 8001366:	f003 030f 	and.w	r3, r3, #15
 800136a:	3b04      	subs	r3, #4
 800136c:	0112      	lsls	r2, r2, #4
 800136e:	b2d2      	uxtb	r2, r2
 8001370:	440b      	add	r3, r1
 8001372:	761a      	strb	r2, [r3, #24]
}
 8001374:	bf00      	nop
 8001376:	370c      	adds	r7, #12
 8001378:	46bd      	mov	sp, r7
 800137a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137e:	4770      	bx	lr
 8001380:	e000e100 	.word	0xe000e100
 8001384:	e000ed00 	.word	0xe000ed00

08001388 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001388:	b480      	push	{r7}
 800138a:	b089      	sub	sp, #36	; 0x24
 800138c:	af00      	add	r7, sp, #0
 800138e:	60f8      	str	r0, [r7, #12]
 8001390:	60b9      	str	r1, [r7, #8]
 8001392:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001394:	68fb      	ldr	r3, [r7, #12]
 8001396:	f003 0307 	and.w	r3, r3, #7
 800139a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800139c:	69fb      	ldr	r3, [r7, #28]
 800139e:	f1c3 0307 	rsb	r3, r3, #7
 80013a2:	2b04      	cmp	r3, #4
 80013a4:	bf28      	it	cs
 80013a6:	2304      	movcs	r3, #4
 80013a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80013aa:	69fb      	ldr	r3, [r7, #28]
 80013ac:	3304      	adds	r3, #4
 80013ae:	2b06      	cmp	r3, #6
 80013b0:	d902      	bls.n	80013b8 <NVIC_EncodePriority+0x30>
 80013b2:	69fb      	ldr	r3, [r7, #28]
 80013b4:	3b03      	subs	r3, #3
 80013b6:	e000      	b.n	80013ba <NVIC_EncodePriority+0x32>
 80013b8:	2300      	movs	r3, #0
 80013ba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013bc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80013c0:	69bb      	ldr	r3, [r7, #24]
 80013c2:	fa02 f303 	lsl.w	r3, r2, r3
 80013c6:	43da      	mvns	r2, r3
 80013c8:	68bb      	ldr	r3, [r7, #8]
 80013ca:	401a      	ands	r2, r3
 80013cc:	697b      	ldr	r3, [r7, #20]
 80013ce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80013d0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80013d4:	697b      	ldr	r3, [r7, #20]
 80013d6:	fa01 f303 	lsl.w	r3, r1, r3
 80013da:	43d9      	mvns	r1, r3
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013e0:	4313      	orrs	r3, r2
         );
}
 80013e2:	4618      	mov	r0, r3
 80013e4:	3724      	adds	r7, #36	; 0x24
 80013e6:	46bd      	mov	sp, r7
 80013e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ec:	4770      	bx	lr
	...

080013f0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b082      	sub	sp, #8
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	3b01      	subs	r3, #1
 80013fc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001400:	d301      	bcc.n	8001406 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001402:	2301      	movs	r3, #1
 8001404:	e00f      	b.n	8001426 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001406:	4a0a      	ldr	r2, [pc, #40]	; (8001430 <SysTick_Config+0x40>)
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	3b01      	subs	r3, #1
 800140c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800140e:	210f      	movs	r1, #15
 8001410:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001414:	f7ff ff8e 	bl	8001334 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001418:	4b05      	ldr	r3, [pc, #20]	; (8001430 <SysTick_Config+0x40>)
 800141a:	2200      	movs	r2, #0
 800141c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800141e:	4b04      	ldr	r3, [pc, #16]	; (8001430 <SysTick_Config+0x40>)
 8001420:	2207      	movs	r2, #7
 8001422:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001424:	2300      	movs	r3, #0
}
 8001426:	4618      	mov	r0, r3
 8001428:	3708      	adds	r7, #8
 800142a:	46bd      	mov	sp, r7
 800142c:	bd80      	pop	{r7, pc}
 800142e:	bf00      	nop
 8001430:	e000e010 	.word	0xe000e010

08001434 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	b082      	sub	sp, #8
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800143c:	6878      	ldr	r0, [r7, #4]
 800143e:	f7ff ff47 	bl	80012d0 <__NVIC_SetPriorityGrouping>
}
 8001442:	bf00      	nop
 8001444:	3708      	adds	r7, #8
 8001446:	46bd      	mov	sp, r7
 8001448:	bd80      	pop	{r7, pc}

0800144a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800144a:	b580      	push	{r7, lr}
 800144c:	b086      	sub	sp, #24
 800144e:	af00      	add	r7, sp, #0
 8001450:	4603      	mov	r3, r0
 8001452:	60b9      	str	r1, [r7, #8]
 8001454:	607a      	str	r2, [r7, #4]
 8001456:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001458:	2300      	movs	r3, #0
 800145a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800145c:	f7ff ff5c 	bl	8001318 <__NVIC_GetPriorityGrouping>
 8001460:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001462:	687a      	ldr	r2, [r7, #4]
 8001464:	68b9      	ldr	r1, [r7, #8]
 8001466:	6978      	ldr	r0, [r7, #20]
 8001468:	f7ff ff8e 	bl	8001388 <NVIC_EncodePriority>
 800146c:	4602      	mov	r2, r0
 800146e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001472:	4611      	mov	r1, r2
 8001474:	4618      	mov	r0, r3
 8001476:	f7ff ff5d 	bl	8001334 <__NVIC_SetPriority>
}
 800147a:	bf00      	nop
 800147c:	3718      	adds	r7, #24
 800147e:	46bd      	mov	sp, r7
 8001480:	bd80      	pop	{r7, pc}

08001482 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001482:	b580      	push	{r7, lr}
 8001484:	b082      	sub	sp, #8
 8001486:	af00      	add	r7, sp, #0
 8001488:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800148a:	6878      	ldr	r0, [r7, #4]
 800148c:	f7ff ffb0 	bl	80013f0 <SysTick_Config>
 8001490:	4603      	mov	r3, r0
}
 8001492:	4618      	mov	r0, r3
 8001494:	3708      	adds	r7, #8
 8001496:	46bd      	mov	sp, r7
 8001498:	bd80      	pop	{r7, pc}
	...

0800149c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800149c:	b480      	push	{r7}
 800149e:	b089      	sub	sp, #36	; 0x24
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	6078      	str	r0, [r7, #4]
 80014a4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80014a6:	2300      	movs	r3, #0
 80014a8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80014aa:	2300      	movs	r3, #0
 80014ac:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80014ae:	2300      	movs	r3, #0
 80014b0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80014b2:	2300      	movs	r3, #0
 80014b4:	61fb      	str	r3, [r7, #28]
 80014b6:	e159      	b.n	800176c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80014b8:	2201      	movs	r2, #1
 80014ba:	69fb      	ldr	r3, [r7, #28]
 80014bc:	fa02 f303 	lsl.w	r3, r2, r3
 80014c0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80014c2:	683b      	ldr	r3, [r7, #0]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	697a      	ldr	r2, [r7, #20]
 80014c8:	4013      	ands	r3, r2
 80014ca:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80014cc:	693a      	ldr	r2, [r7, #16]
 80014ce:	697b      	ldr	r3, [r7, #20]
 80014d0:	429a      	cmp	r2, r3
 80014d2:	f040 8148 	bne.w	8001766 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80014d6:	683b      	ldr	r3, [r7, #0]
 80014d8:	685b      	ldr	r3, [r3, #4]
 80014da:	f003 0303 	and.w	r3, r3, #3
 80014de:	2b01      	cmp	r3, #1
 80014e0:	d005      	beq.n	80014ee <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80014e2:	683b      	ldr	r3, [r7, #0]
 80014e4:	685b      	ldr	r3, [r3, #4]
 80014e6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80014ea:	2b02      	cmp	r3, #2
 80014ec:	d130      	bne.n	8001550 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	689b      	ldr	r3, [r3, #8]
 80014f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80014f4:	69fb      	ldr	r3, [r7, #28]
 80014f6:	005b      	lsls	r3, r3, #1
 80014f8:	2203      	movs	r2, #3
 80014fa:	fa02 f303 	lsl.w	r3, r2, r3
 80014fe:	43db      	mvns	r3, r3
 8001500:	69ba      	ldr	r2, [r7, #24]
 8001502:	4013      	ands	r3, r2
 8001504:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001506:	683b      	ldr	r3, [r7, #0]
 8001508:	68da      	ldr	r2, [r3, #12]
 800150a:	69fb      	ldr	r3, [r7, #28]
 800150c:	005b      	lsls	r3, r3, #1
 800150e:	fa02 f303 	lsl.w	r3, r2, r3
 8001512:	69ba      	ldr	r2, [r7, #24]
 8001514:	4313      	orrs	r3, r2
 8001516:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	69ba      	ldr	r2, [r7, #24]
 800151c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	685b      	ldr	r3, [r3, #4]
 8001522:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001524:	2201      	movs	r2, #1
 8001526:	69fb      	ldr	r3, [r7, #28]
 8001528:	fa02 f303 	lsl.w	r3, r2, r3
 800152c:	43db      	mvns	r3, r3
 800152e:	69ba      	ldr	r2, [r7, #24]
 8001530:	4013      	ands	r3, r2
 8001532:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001534:	683b      	ldr	r3, [r7, #0]
 8001536:	685b      	ldr	r3, [r3, #4]
 8001538:	091b      	lsrs	r3, r3, #4
 800153a:	f003 0201 	and.w	r2, r3, #1
 800153e:	69fb      	ldr	r3, [r7, #28]
 8001540:	fa02 f303 	lsl.w	r3, r2, r3
 8001544:	69ba      	ldr	r2, [r7, #24]
 8001546:	4313      	orrs	r3, r2
 8001548:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	69ba      	ldr	r2, [r7, #24]
 800154e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001550:	683b      	ldr	r3, [r7, #0]
 8001552:	685b      	ldr	r3, [r3, #4]
 8001554:	f003 0303 	and.w	r3, r3, #3
 8001558:	2b03      	cmp	r3, #3
 800155a:	d017      	beq.n	800158c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	68db      	ldr	r3, [r3, #12]
 8001560:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001562:	69fb      	ldr	r3, [r7, #28]
 8001564:	005b      	lsls	r3, r3, #1
 8001566:	2203      	movs	r2, #3
 8001568:	fa02 f303 	lsl.w	r3, r2, r3
 800156c:	43db      	mvns	r3, r3
 800156e:	69ba      	ldr	r2, [r7, #24]
 8001570:	4013      	ands	r3, r2
 8001572:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001574:	683b      	ldr	r3, [r7, #0]
 8001576:	689a      	ldr	r2, [r3, #8]
 8001578:	69fb      	ldr	r3, [r7, #28]
 800157a:	005b      	lsls	r3, r3, #1
 800157c:	fa02 f303 	lsl.w	r3, r2, r3
 8001580:	69ba      	ldr	r2, [r7, #24]
 8001582:	4313      	orrs	r3, r2
 8001584:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	69ba      	ldr	r2, [r7, #24]
 800158a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800158c:	683b      	ldr	r3, [r7, #0]
 800158e:	685b      	ldr	r3, [r3, #4]
 8001590:	f003 0303 	and.w	r3, r3, #3
 8001594:	2b02      	cmp	r3, #2
 8001596:	d123      	bne.n	80015e0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001598:	69fb      	ldr	r3, [r7, #28]
 800159a:	08da      	lsrs	r2, r3, #3
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	3208      	adds	r2, #8
 80015a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80015a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80015a6:	69fb      	ldr	r3, [r7, #28]
 80015a8:	f003 0307 	and.w	r3, r3, #7
 80015ac:	009b      	lsls	r3, r3, #2
 80015ae:	220f      	movs	r2, #15
 80015b0:	fa02 f303 	lsl.w	r3, r2, r3
 80015b4:	43db      	mvns	r3, r3
 80015b6:	69ba      	ldr	r2, [r7, #24]
 80015b8:	4013      	ands	r3, r2
 80015ba:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80015bc:	683b      	ldr	r3, [r7, #0]
 80015be:	691a      	ldr	r2, [r3, #16]
 80015c0:	69fb      	ldr	r3, [r7, #28]
 80015c2:	f003 0307 	and.w	r3, r3, #7
 80015c6:	009b      	lsls	r3, r3, #2
 80015c8:	fa02 f303 	lsl.w	r3, r2, r3
 80015cc:	69ba      	ldr	r2, [r7, #24]
 80015ce:	4313      	orrs	r3, r2
 80015d0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80015d2:	69fb      	ldr	r3, [r7, #28]
 80015d4:	08da      	lsrs	r2, r3, #3
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	3208      	adds	r2, #8
 80015da:	69b9      	ldr	r1, [r7, #24]
 80015dc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80015e6:	69fb      	ldr	r3, [r7, #28]
 80015e8:	005b      	lsls	r3, r3, #1
 80015ea:	2203      	movs	r2, #3
 80015ec:	fa02 f303 	lsl.w	r3, r2, r3
 80015f0:	43db      	mvns	r3, r3
 80015f2:	69ba      	ldr	r2, [r7, #24]
 80015f4:	4013      	ands	r3, r2
 80015f6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80015f8:	683b      	ldr	r3, [r7, #0]
 80015fa:	685b      	ldr	r3, [r3, #4]
 80015fc:	f003 0203 	and.w	r2, r3, #3
 8001600:	69fb      	ldr	r3, [r7, #28]
 8001602:	005b      	lsls	r3, r3, #1
 8001604:	fa02 f303 	lsl.w	r3, r2, r3
 8001608:	69ba      	ldr	r2, [r7, #24]
 800160a:	4313      	orrs	r3, r2
 800160c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	69ba      	ldr	r2, [r7, #24]
 8001612:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001614:	683b      	ldr	r3, [r7, #0]
 8001616:	685b      	ldr	r3, [r3, #4]
 8001618:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800161c:	2b00      	cmp	r3, #0
 800161e:	f000 80a2 	beq.w	8001766 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001622:	2300      	movs	r3, #0
 8001624:	60fb      	str	r3, [r7, #12]
 8001626:	4b57      	ldr	r3, [pc, #348]	; (8001784 <HAL_GPIO_Init+0x2e8>)
 8001628:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800162a:	4a56      	ldr	r2, [pc, #344]	; (8001784 <HAL_GPIO_Init+0x2e8>)
 800162c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001630:	6453      	str	r3, [r2, #68]	; 0x44
 8001632:	4b54      	ldr	r3, [pc, #336]	; (8001784 <HAL_GPIO_Init+0x2e8>)
 8001634:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001636:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800163a:	60fb      	str	r3, [r7, #12]
 800163c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800163e:	4a52      	ldr	r2, [pc, #328]	; (8001788 <HAL_GPIO_Init+0x2ec>)
 8001640:	69fb      	ldr	r3, [r7, #28]
 8001642:	089b      	lsrs	r3, r3, #2
 8001644:	3302      	adds	r3, #2
 8001646:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800164a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800164c:	69fb      	ldr	r3, [r7, #28]
 800164e:	f003 0303 	and.w	r3, r3, #3
 8001652:	009b      	lsls	r3, r3, #2
 8001654:	220f      	movs	r2, #15
 8001656:	fa02 f303 	lsl.w	r3, r2, r3
 800165a:	43db      	mvns	r3, r3
 800165c:	69ba      	ldr	r2, [r7, #24]
 800165e:	4013      	ands	r3, r2
 8001660:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	4a49      	ldr	r2, [pc, #292]	; (800178c <HAL_GPIO_Init+0x2f0>)
 8001666:	4293      	cmp	r3, r2
 8001668:	d019      	beq.n	800169e <HAL_GPIO_Init+0x202>
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	4a48      	ldr	r2, [pc, #288]	; (8001790 <HAL_GPIO_Init+0x2f4>)
 800166e:	4293      	cmp	r3, r2
 8001670:	d013      	beq.n	800169a <HAL_GPIO_Init+0x1fe>
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	4a47      	ldr	r2, [pc, #284]	; (8001794 <HAL_GPIO_Init+0x2f8>)
 8001676:	4293      	cmp	r3, r2
 8001678:	d00d      	beq.n	8001696 <HAL_GPIO_Init+0x1fa>
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	4a46      	ldr	r2, [pc, #280]	; (8001798 <HAL_GPIO_Init+0x2fc>)
 800167e:	4293      	cmp	r3, r2
 8001680:	d007      	beq.n	8001692 <HAL_GPIO_Init+0x1f6>
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	4a45      	ldr	r2, [pc, #276]	; (800179c <HAL_GPIO_Init+0x300>)
 8001686:	4293      	cmp	r3, r2
 8001688:	d101      	bne.n	800168e <HAL_GPIO_Init+0x1f2>
 800168a:	2304      	movs	r3, #4
 800168c:	e008      	b.n	80016a0 <HAL_GPIO_Init+0x204>
 800168e:	2307      	movs	r3, #7
 8001690:	e006      	b.n	80016a0 <HAL_GPIO_Init+0x204>
 8001692:	2303      	movs	r3, #3
 8001694:	e004      	b.n	80016a0 <HAL_GPIO_Init+0x204>
 8001696:	2302      	movs	r3, #2
 8001698:	e002      	b.n	80016a0 <HAL_GPIO_Init+0x204>
 800169a:	2301      	movs	r3, #1
 800169c:	e000      	b.n	80016a0 <HAL_GPIO_Init+0x204>
 800169e:	2300      	movs	r3, #0
 80016a0:	69fa      	ldr	r2, [r7, #28]
 80016a2:	f002 0203 	and.w	r2, r2, #3
 80016a6:	0092      	lsls	r2, r2, #2
 80016a8:	4093      	lsls	r3, r2
 80016aa:	69ba      	ldr	r2, [r7, #24]
 80016ac:	4313      	orrs	r3, r2
 80016ae:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80016b0:	4935      	ldr	r1, [pc, #212]	; (8001788 <HAL_GPIO_Init+0x2ec>)
 80016b2:	69fb      	ldr	r3, [r7, #28]
 80016b4:	089b      	lsrs	r3, r3, #2
 80016b6:	3302      	adds	r3, #2
 80016b8:	69ba      	ldr	r2, [r7, #24]
 80016ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80016be:	4b38      	ldr	r3, [pc, #224]	; (80017a0 <HAL_GPIO_Init+0x304>)
 80016c0:	689b      	ldr	r3, [r3, #8]
 80016c2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016c4:	693b      	ldr	r3, [r7, #16]
 80016c6:	43db      	mvns	r3, r3
 80016c8:	69ba      	ldr	r2, [r7, #24]
 80016ca:	4013      	ands	r3, r2
 80016cc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80016ce:	683b      	ldr	r3, [r7, #0]
 80016d0:	685b      	ldr	r3, [r3, #4]
 80016d2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d003      	beq.n	80016e2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80016da:	69ba      	ldr	r2, [r7, #24]
 80016dc:	693b      	ldr	r3, [r7, #16]
 80016de:	4313      	orrs	r3, r2
 80016e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80016e2:	4a2f      	ldr	r2, [pc, #188]	; (80017a0 <HAL_GPIO_Init+0x304>)
 80016e4:	69bb      	ldr	r3, [r7, #24]
 80016e6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80016e8:	4b2d      	ldr	r3, [pc, #180]	; (80017a0 <HAL_GPIO_Init+0x304>)
 80016ea:	68db      	ldr	r3, [r3, #12]
 80016ec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016ee:	693b      	ldr	r3, [r7, #16]
 80016f0:	43db      	mvns	r3, r3
 80016f2:	69ba      	ldr	r2, [r7, #24]
 80016f4:	4013      	ands	r3, r2
 80016f6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80016f8:	683b      	ldr	r3, [r7, #0]
 80016fa:	685b      	ldr	r3, [r3, #4]
 80016fc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001700:	2b00      	cmp	r3, #0
 8001702:	d003      	beq.n	800170c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001704:	69ba      	ldr	r2, [r7, #24]
 8001706:	693b      	ldr	r3, [r7, #16]
 8001708:	4313      	orrs	r3, r2
 800170a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800170c:	4a24      	ldr	r2, [pc, #144]	; (80017a0 <HAL_GPIO_Init+0x304>)
 800170e:	69bb      	ldr	r3, [r7, #24]
 8001710:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001712:	4b23      	ldr	r3, [pc, #140]	; (80017a0 <HAL_GPIO_Init+0x304>)
 8001714:	685b      	ldr	r3, [r3, #4]
 8001716:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001718:	693b      	ldr	r3, [r7, #16]
 800171a:	43db      	mvns	r3, r3
 800171c:	69ba      	ldr	r2, [r7, #24]
 800171e:	4013      	ands	r3, r2
 8001720:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001722:	683b      	ldr	r3, [r7, #0]
 8001724:	685b      	ldr	r3, [r3, #4]
 8001726:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800172a:	2b00      	cmp	r3, #0
 800172c:	d003      	beq.n	8001736 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800172e:	69ba      	ldr	r2, [r7, #24]
 8001730:	693b      	ldr	r3, [r7, #16]
 8001732:	4313      	orrs	r3, r2
 8001734:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001736:	4a1a      	ldr	r2, [pc, #104]	; (80017a0 <HAL_GPIO_Init+0x304>)
 8001738:	69bb      	ldr	r3, [r7, #24]
 800173a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800173c:	4b18      	ldr	r3, [pc, #96]	; (80017a0 <HAL_GPIO_Init+0x304>)
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001742:	693b      	ldr	r3, [r7, #16]
 8001744:	43db      	mvns	r3, r3
 8001746:	69ba      	ldr	r2, [r7, #24]
 8001748:	4013      	ands	r3, r2
 800174a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800174c:	683b      	ldr	r3, [r7, #0]
 800174e:	685b      	ldr	r3, [r3, #4]
 8001750:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001754:	2b00      	cmp	r3, #0
 8001756:	d003      	beq.n	8001760 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001758:	69ba      	ldr	r2, [r7, #24]
 800175a:	693b      	ldr	r3, [r7, #16]
 800175c:	4313      	orrs	r3, r2
 800175e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001760:	4a0f      	ldr	r2, [pc, #60]	; (80017a0 <HAL_GPIO_Init+0x304>)
 8001762:	69bb      	ldr	r3, [r7, #24]
 8001764:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001766:	69fb      	ldr	r3, [r7, #28]
 8001768:	3301      	adds	r3, #1
 800176a:	61fb      	str	r3, [r7, #28]
 800176c:	69fb      	ldr	r3, [r7, #28]
 800176e:	2b0f      	cmp	r3, #15
 8001770:	f67f aea2 	bls.w	80014b8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001774:	bf00      	nop
 8001776:	bf00      	nop
 8001778:	3724      	adds	r7, #36	; 0x24
 800177a:	46bd      	mov	sp, r7
 800177c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001780:	4770      	bx	lr
 8001782:	bf00      	nop
 8001784:	40023800 	.word	0x40023800
 8001788:	40013800 	.word	0x40013800
 800178c:	40020000 	.word	0x40020000
 8001790:	40020400 	.word	0x40020400
 8001794:	40020800 	.word	0x40020800
 8001798:	40020c00 	.word	0x40020c00
 800179c:	40021000 	.word	0x40021000
 80017a0:	40013c00 	.word	0x40013c00

080017a4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80017a4:	b480      	push	{r7}
 80017a6:	b083      	sub	sp, #12
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]
 80017ac:	460b      	mov	r3, r1
 80017ae:	807b      	strh	r3, [r7, #2]
 80017b0:	4613      	mov	r3, r2
 80017b2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80017b4:	787b      	ldrb	r3, [r7, #1]
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d003      	beq.n	80017c2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80017ba:	887a      	ldrh	r2, [r7, #2]
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80017c0:	e003      	b.n	80017ca <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80017c2:	887b      	ldrh	r3, [r7, #2]
 80017c4:	041a      	lsls	r2, r3, #16
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	619a      	str	r2, [r3, #24]
}
 80017ca:	bf00      	nop
 80017cc:	370c      	adds	r7, #12
 80017ce:	46bd      	mov	sp, r7
 80017d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d4:	4770      	bx	lr
	...

080017d8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	b086      	sub	sp, #24
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d101      	bne.n	80017ea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80017e6:	2301      	movs	r3, #1
 80017e8:	e267      	b.n	8001cba <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	f003 0301 	and.w	r3, r3, #1
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d075      	beq.n	80018e2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80017f6:	4b88      	ldr	r3, [pc, #544]	; (8001a18 <HAL_RCC_OscConfig+0x240>)
 80017f8:	689b      	ldr	r3, [r3, #8]
 80017fa:	f003 030c 	and.w	r3, r3, #12
 80017fe:	2b04      	cmp	r3, #4
 8001800:	d00c      	beq.n	800181c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001802:	4b85      	ldr	r3, [pc, #532]	; (8001a18 <HAL_RCC_OscConfig+0x240>)
 8001804:	689b      	ldr	r3, [r3, #8]
 8001806:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800180a:	2b08      	cmp	r3, #8
 800180c:	d112      	bne.n	8001834 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800180e:	4b82      	ldr	r3, [pc, #520]	; (8001a18 <HAL_RCC_OscConfig+0x240>)
 8001810:	685b      	ldr	r3, [r3, #4]
 8001812:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001816:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800181a:	d10b      	bne.n	8001834 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800181c:	4b7e      	ldr	r3, [pc, #504]	; (8001a18 <HAL_RCC_OscConfig+0x240>)
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001824:	2b00      	cmp	r3, #0
 8001826:	d05b      	beq.n	80018e0 <HAL_RCC_OscConfig+0x108>
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	685b      	ldr	r3, [r3, #4]
 800182c:	2b00      	cmp	r3, #0
 800182e:	d157      	bne.n	80018e0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001830:	2301      	movs	r3, #1
 8001832:	e242      	b.n	8001cba <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	685b      	ldr	r3, [r3, #4]
 8001838:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800183c:	d106      	bne.n	800184c <HAL_RCC_OscConfig+0x74>
 800183e:	4b76      	ldr	r3, [pc, #472]	; (8001a18 <HAL_RCC_OscConfig+0x240>)
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	4a75      	ldr	r2, [pc, #468]	; (8001a18 <HAL_RCC_OscConfig+0x240>)
 8001844:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001848:	6013      	str	r3, [r2, #0]
 800184a:	e01d      	b.n	8001888 <HAL_RCC_OscConfig+0xb0>
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	685b      	ldr	r3, [r3, #4]
 8001850:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001854:	d10c      	bne.n	8001870 <HAL_RCC_OscConfig+0x98>
 8001856:	4b70      	ldr	r3, [pc, #448]	; (8001a18 <HAL_RCC_OscConfig+0x240>)
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	4a6f      	ldr	r2, [pc, #444]	; (8001a18 <HAL_RCC_OscConfig+0x240>)
 800185c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001860:	6013      	str	r3, [r2, #0]
 8001862:	4b6d      	ldr	r3, [pc, #436]	; (8001a18 <HAL_RCC_OscConfig+0x240>)
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	4a6c      	ldr	r2, [pc, #432]	; (8001a18 <HAL_RCC_OscConfig+0x240>)
 8001868:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800186c:	6013      	str	r3, [r2, #0]
 800186e:	e00b      	b.n	8001888 <HAL_RCC_OscConfig+0xb0>
 8001870:	4b69      	ldr	r3, [pc, #420]	; (8001a18 <HAL_RCC_OscConfig+0x240>)
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	4a68      	ldr	r2, [pc, #416]	; (8001a18 <HAL_RCC_OscConfig+0x240>)
 8001876:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800187a:	6013      	str	r3, [r2, #0]
 800187c:	4b66      	ldr	r3, [pc, #408]	; (8001a18 <HAL_RCC_OscConfig+0x240>)
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	4a65      	ldr	r2, [pc, #404]	; (8001a18 <HAL_RCC_OscConfig+0x240>)
 8001882:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001886:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	685b      	ldr	r3, [r3, #4]
 800188c:	2b00      	cmp	r3, #0
 800188e:	d013      	beq.n	80018b8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001890:	f7ff fd12 	bl	80012b8 <HAL_GetTick>
 8001894:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001896:	e008      	b.n	80018aa <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001898:	f7ff fd0e 	bl	80012b8 <HAL_GetTick>
 800189c:	4602      	mov	r2, r0
 800189e:	693b      	ldr	r3, [r7, #16]
 80018a0:	1ad3      	subs	r3, r2, r3
 80018a2:	2b64      	cmp	r3, #100	; 0x64
 80018a4:	d901      	bls.n	80018aa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80018a6:	2303      	movs	r3, #3
 80018a8:	e207      	b.n	8001cba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018aa:	4b5b      	ldr	r3, [pc, #364]	; (8001a18 <HAL_RCC_OscConfig+0x240>)
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d0f0      	beq.n	8001898 <HAL_RCC_OscConfig+0xc0>
 80018b6:	e014      	b.n	80018e2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018b8:	f7ff fcfe 	bl	80012b8 <HAL_GetTick>
 80018bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80018be:	e008      	b.n	80018d2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80018c0:	f7ff fcfa 	bl	80012b8 <HAL_GetTick>
 80018c4:	4602      	mov	r2, r0
 80018c6:	693b      	ldr	r3, [r7, #16]
 80018c8:	1ad3      	subs	r3, r2, r3
 80018ca:	2b64      	cmp	r3, #100	; 0x64
 80018cc:	d901      	bls.n	80018d2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80018ce:	2303      	movs	r3, #3
 80018d0:	e1f3      	b.n	8001cba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80018d2:	4b51      	ldr	r3, [pc, #324]	; (8001a18 <HAL_RCC_OscConfig+0x240>)
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d1f0      	bne.n	80018c0 <HAL_RCC_OscConfig+0xe8>
 80018de:	e000      	b.n	80018e2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018e0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	f003 0302 	and.w	r3, r3, #2
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d063      	beq.n	80019b6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80018ee:	4b4a      	ldr	r3, [pc, #296]	; (8001a18 <HAL_RCC_OscConfig+0x240>)
 80018f0:	689b      	ldr	r3, [r3, #8]
 80018f2:	f003 030c 	and.w	r3, r3, #12
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d00b      	beq.n	8001912 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80018fa:	4b47      	ldr	r3, [pc, #284]	; (8001a18 <HAL_RCC_OscConfig+0x240>)
 80018fc:	689b      	ldr	r3, [r3, #8]
 80018fe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001902:	2b08      	cmp	r3, #8
 8001904:	d11c      	bne.n	8001940 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001906:	4b44      	ldr	r3, [pc, #272]	; (8001a18 <HAL_RCC_OscConfig+0x240>)
 8001908:	685b      	ldr	r3, [r3, #4]
 800190a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800190e:	2b00      	cmp	r3, #0
 8001910:	d116      	bne.n	8001940 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001912:	4b41      	ldr	r3, [pc, #260]	; (8001a18 <HAL_RCC_OscConfig+0x240>)
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	f003 0302 	and.w	r3, r3, #2
 800191a:	2b00      	cmp	r3, #0
 800191c:	d005      	beq.n	800192a <HAL_RCC_OscConfig+0x152>
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	68db      	ldr	r3, [r3, #12]
 8001922:	2b01      	cmp	r3, #1
 8001924:	d001      	beq.n	800192a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001926:	2301      	movs	r3, #1
 8001928:	e1c7      	b.n	8001cba <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800192a:	4b3b      	ldr	r3, [pc, #236]	; (8001a18 <HAL_RCC_OscConfig+0x240>)
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	691b      	ldr	r3, [r3, #16]
 8001936:	00db      	lsls	r3, r3, #3
 8001938:	4937      	ldr	r1, [pc, #220]	; (8001a18 <HAL_RCC_OscConfig+0x240>)
 800193a:	4313      	orrs	r3, r2
 800193c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800193e:	e03a      	b.n	80019b6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	68db      	ldr	r3, [r3, #12]
 8001944:	2b00      	cmp	r3, #0
 8001946:	d020      	beq.n	800198a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001948:	4b34      	ldr	r3, [pc, #208]	; (8001a1c <HAL_RCC_OscConfig+0x244>)
 800194a:	2201      	movs	r2, #1
 800194c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800194e:	f7ff fcb3 	bl	80012b8 <HAL_GetTick>
 8001952:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001954:	e008      	b.n	8001968 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001956:	f7ff fcaf 	bl	80012b8 <HAL_GetTick>
 800195a:	4602      	mov	r2, r0
 800195c:	693b      	ldr	r3, [r7, #16]
 800195e:	1ad3      	subs	r3, r2, r3
 8001960:	2b02      	cmp	r3, #2
 8001962:	d901      	bls.n	8001968 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001964:	2303      	movs	r3, #3
 8001966:	e1a8      	b.n	8001cba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001968:	4b2b      	ldr	r3, [pc, #172]	; (8001a18 <HAL_RCC_OscConfig+0x240>)
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	f003 0302 	and.w	r3, r3, #2
 8001970:	2b00      	cmp	r3, #0
 8001972:	d0f0      	beq.n	8001956 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001974:	4b28      	ldr	r3, [pc, #160]	; (8001a18 <HAL_RCC_OscConfig+0x240>)
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	691b      	ldr	r3, [r3, #16]
 8001980:	00db      	lsls	r3, r3, #3
 8001982:	4925      	ldr	r1, [pc, #148]	; (8001a18 <HAL_RCC_OscConfig+0x240>)
 8001984:	4313      	orrs	r3, r2
 8001986:	600b      	str	r3, [r1, #0]
 8001988:	e015      	b.n	80019b6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800198a:	4b24      	ldr	r3, [pc, #144]	; (8001a1c <HAL_RCC_OscConfig+0x244>)
 800198c:	2200      	movs	r2, #0
 800198e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001990:	f7ff fc92 	bl	80012b8 <HAL_GetTick>
 8001994:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001996:	e008      	b.n	80019aa <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001998:	f7ff fc8e 	bl	80012b8 <HAL_GetTick>
 800199c:	4602      	mov	r2, r0
 800199e:	693b      	ldr	r3, [r7, #16]
 80019a0:	1ad3      	subs	r3, r2, r3
 80019a2:	2b02      	cmp	r3, #2
 80019a4:	d901      	bls.n	80019aa <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80019a6:	2303      	movs	r3, #3
 80019a8:	e187      	b.n	8001cba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80019aa:	4b1b      	ldr	r3, [pc, #108]	; (8001a18 <HAL_RCC_OscConfig+0x240>)
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	f003 0302 	and.w	r3, r3, #2
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d1f0      	bne.n	8001998 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	f003 0308 	and.w	r3, r3, #8
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d036      	beq.n	8001a30 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	695b      	ldr	r3, [r3, #20]
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d016      	beq.n	80019f8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80019ca:	4b15      	ldr	r3, [pc, #84]	; (8001a20 <HAL_RCC_OscConfig+0x248>)
 80019cc:	2201      	movs	r2, #1
 80019ce:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019d0:	f7ff fc72 	bl	80012b8 <HAL_GetTick>
 80019d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80019d6:	e008      	b.n	80019ea <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80019d8:	f7ff fc6e 	bl	80012b8 <HAL_GetTick>
 80019dc:	4602      	mov	r2, r0
 80019de:	693b      	ldr	r3, [r7, #16]
 80019e0:	1ad3      	subs	r3, r2, r3
 80019e2:	2b02      	cmp	r3, #2
 80019e4:	d901      	bls.n	80019ea <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80019e6:	2303      	movs	r3, #3
 80019e8:	e167      	b.n	8001cba <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80019ea:	4b0b      	ldr	r3, [pc, #44]	; (8001a18 <HAL_RCC_OscConfig+0x240>)
 80019ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80019ee:	f003 0302 	and.w	r3, r3, #2
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d0f0      	beq.n	80019d8 <HAL_RCC_OscConfig+0x200>
 80019f6:	e01b      	b.n	8001a30 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80019f8:	4b09      	ldr	r3, [pc, #36]	; (8001a20 <HAL_RCC_OscConfig+0x248>)
 80019fa:	2200      	movs	r2, #0
 80019fc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019fe:	f7ff fc5b 	bl	80012b8 <HAL_GetTick>
 8001a02:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a04:	e00e      	b.n	8001a24 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001a06:	f7ff fc57 	bl	80012b8 <HAL_GetTick>
 8001a0a:	4602      	mov	r2, r0
 8001a0c:	693b      	ldr	r3, [r7, #16]
 8001a0e:	1ad3      	subs	r3, r2, r3
 8001a10:	2b02      	cmp	r3, #2
 8001a12:	d907      	bls.n	8001a24 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001a14:	2303      	movs	r3, #3
 8001a16:	e150      	b.n	8001cba <HAL_RCC_OscConfig+0x4e2>
 8001a18:	40023800 	.word	0x40023800
 8001a1c:	42470000 	.word	0x42470000
 8001a20:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a24:	4b88      	ldr	r3, [pc, #544]	; (8001c48 <HAL_RCC_OscConfig+0x470>)
 8001a26:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001a28:	f003 0302 	and.w	r3, r3, #2
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d1ea      	bne.n	8001a06 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	f003 0304 	and.w	r3, r3, #4
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	f000 8097 	beq.w	8001b6c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001a3e:	2300      	movs	r3, #0
 8001a40:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001a42:	4b81      	ldr	r3, [pc, #516]	; (8001c48 <HAL_RCC_OscConfig+0x470>)
 8001a44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d10f      	bne.n	8001a6e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a4e:	2300      	movs	r3, #0
 8001a50:	60bb      	str	r3, [r7, #8]
 8001a52:	4b7d      	ldr	r3, [pc, #500]	; (8001c48 <HAL_RCC_OscConfig+0x470>)
 8001a54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a56:	4a7c      	ldr	r2, [pc, #496]	; (8001c48 <HAL_RCC_OscConfig+0x470>)
 8001a58:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a5c:	6413      	str	r3, [r2, #64]	; 0x40
 8001a5e:	4b7a      	ldr	r3, [pc, #488]	; (8001c48 <HAL_RCC_OscConfig+0x470>)
 8001a60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a66:	60bb      	str	r3, [r7, #8]
 8001a68:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001a6a:	2301      	movs	r3, #1
 8001a6c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a6e:	4b77      	ldr	r3, [pc, #476]	; (8001c4c <HAL_RCC_OscConfig+0x474>)
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d118      	bne.n	8001aac <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001a7a:	4b74      	ldr	r3, [pc, #464]	; (8001c4c <HAL_RCC_OscConfig+0x474>)
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	4a73      	ldr	r2, [pc, #460]	; (8001c4c <HAL_RCC_OscConfig+0x474>)
 8001a80:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a84:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001a86:	f7ff fc17 	bl	80012b8 <HAL_GetTick>
 8001a8a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a8c:	e008      	b.n	8001aa0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a8e:	f7ff fc13 	bl	80012b8 <HAL_GetTick>
 8001a92:	4602      	mov	r2, r0
 8001a94:	693b      	ldr	r3, [r7, #16]
 8001a96:	1ad3      	subs	r3, r2, r3
 8001a98:	2b02      	cmp	r3, #2
 8001a9a:	d901      	bls.n	8001aa0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001a9c:	2303      	movs	r3, #3
 8001a9e:	e10c      	b.n	8001cba <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001aa0:	4b6a      	ldr	r3, [pc, #424]	; (8001c4c <HAL_RCC_OscConfig+0x474>)
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d0f0      	beq.n	8001a8e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	689b      	ldr	r3, [r3, #8]
 8001ab0:	2b01      	cmp	r3, #1
 8001ab2:	d106      	bne.n	8001ac2 <HAL_RCC_OscConfig+0x2ea>
 8001ab4:	4b64      	ldr	r3, [pc, #400]	; (8001c48 <HAL_RCC_OscConfig+0x470>)
 8001ab6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ab8:	4a63      	ldr	r2, [pc, #396]	; (8001c48 <HAL_RCC_OscConfig+0x470>)
 8001aba:	f043 0301 	orr.w	r3, r3, #1
 8001abe:	6713      	str	r3, [r2, #112]	; 0x70
 8001ac0:	e01c      	b.n	8001afc <HAL_RCC_OscConfig+0x324>
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	689b      	ldr	r3, [r3, #8]
 8001ac6:	2b05      	cmp	r3, #5
 8001ac8:	d10c      	bne.n	8001ae4 <HAL_RCC_OscConfig+0x30c>
 8001aca:	4b5f      	ldr	r3, [pc, #380]	; (8001c48 <HAL_RCC_OscConfig+0x470>)
 8001acc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ace:	4a5e      	ldr	r2, [pc, #376]	; (8001c48 <HAL_RCC_OscConfig+0x470>)
 8001ad0:	f043 0304 	orr.w	r3, r3, #4
 8001ad4:	6713      	str	r3, [r2, #112]	; 0x70
 8001ad6:	4b5c      	ldr	r3, [pc, #368]	; (8001c48 <HAL_RCC_OscConfig+0x470>)
 8001ad8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ada:	4a5b      	ldr	r2, [pc, #364]	; (8001c48 <HAL_RCC_OscConfig+0x470>)
 8001adc:	f043 0301 	orr.w	r3, r3, #1
 8001ae0:	6713      	str	r3, [r2, #112]	; 0x70
 8001ae2:	e00b      	b.n	8001afc <HAL_RCC_OscConfig+0x324>
 8001ae4:	4b58      	ldr	r3, [pc, #352]	; (8001c48 <HAL_RCC_OscConfig+0x470>)
 8001ae6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ae8:	4a57      	ldr	r2, [pc, #348]	; (8001c48 <HAL_RCC_OscConfig+0x470>)
 8001aea:	f023 0301 	bic.w	r3, r3, #1
 8001aee:	6713      	str	r3, [r2, #112]	; 0x70
 8001af0:	4b55      	ldr	r3, [pc, #340]	; (8001c48 <HAL_RCC_OscConfig+0x470>)
 8001af2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001af4:	4a54      	ldr	r2, [pc, #336]	; (8001c48 <HAL_RCC_OscConfig+0x470>)
 8001af6:	f023 0304 	bic.w	r3, r3, #4
 8001afa:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	689b      	ldr	r3, [r3, #8]
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d015      	beq.n	8001b30 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b04:	f7ff fbd8 	bl	80012b8 <HAL_GetTick>
 8001b08:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b0a:	e00a      	b.n	8001b22 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001b0c:	f7ff fbd4 	bl	80012b8 <HAL_GetTick>
 8001b10:	4602      	mov	r2, r0
 8001b12:	693b      	ldr	r3, [r7, #16]
 8001b14:	1ad3      	subs	r3, r2, r3
 8001b16:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b1a:	4293      	cmp	r3, r2
 8001b1c:	d901      	bls.n	8001b22 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001b1e:	2303      	movs	r3, #3
 8001b20:	e0cb      	b.n	8001cba <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b22:	4b49      	ldr	r3, [pc, #292]	; (8001c48 <HAL_RCC_OscConfig+0x470>)
 8001b24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b26:	f003 0302 	and.w	r3, r3, #2
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d0ee      	beq.n	8001b0c <HAL_RCC_OscConfig+0x334>
 8001b2e:	e014      	b.n	8001b5a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b30:	f7ff fbc2 	bl	80012b8 <HAL_GetTick>
 8001b34:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b36:	e00a      	b.n	8001b4e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001b38:	f7ff fbbe 	bl	80012b8 <HAL_GetTick>
 8001b3c:	4602      	mov	r2, r0
 8001b3e:	693b      	ldr	r3, [r7, #16]
 8001b40:	1ad3      	subs	r3, r2, r3
 8001b42:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b46:	4293      	cmp	r3, r2
 8001b48:	d901      	bls.n	8001b4e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001b4a:	2303      	movs	r3, #3
 8001b4c:	e0b5      	b.n	8001cba <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b4e:	4b3e      	ldr	r3, [pc, #248]	; (8001c48 <HAL_RCC_OscConfig+0x470>)
 8001b50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b52:	f003 0302 	and.w	r3, r3, #2
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d1ee      	bne.n	8001b38 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001b5a:	7dfb      	ldrb	r3, [r7, #23]
 8001b5c:	2b01      	cmp	r3, #1
 8001b5e:	d105      	bne.n	8001b6c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b60:	4b39      	ldr	r3, [pc, #228]	; (8001c48 <HAL_RCC_OscConfig+0x470>)
 8001b62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b64:	4a38      	ldr	r2, [pc, #224]	; (8001c48 <HAL_RCC_OscConfig+0x470>)
 8001b66:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001b6a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	699b      	ldr	r3, [r3, #24]
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	f000 80a1 	beq.w	8001cb8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001b76:	4b34      	ldr	r3, [pc, #208]	; (8001c48 <HAL_RCC_OscConfig+0x470>)
 8001b78:	689b      	ldr	r3, [r3, #8]
 8001b7a:	f003 030c 	and.w	r3, r3, #12
 8001b7e:	2b08      	cmp	r3, #8
 8001b80:	d05c      	beq.n	8001c3c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	699b      	ldr	r3, [r3, #24]
 8001b86:	2b02      	cmp	r3, #2
 8001b88:	d141      	bne.n	8001c0e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b8a:	4b31      	ldr	r3, [pc, #196]	; (8001c50 <HAL_RCC_OscConfig+0x478>)
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b90:	f7ff fb92 	bl	80012b8 <HAL_GetTick>
 8001b94:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b96:	e008      	b.n	8001baa <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b98:	f7ff fb8e 	bl	80012b8 <HAL_GetTick>
 8001b9c:	4602      	mov	r2, r0
 8001b9e:	693b      	ldr	r3, [r7, #16]
 8001ba0:	1ad3      	subs	r3, r2, r3
 8001ba2:	2b02      	cmp	r3, #2
 8001ba4:	d901      	bls.n	8001baa <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001ba6:	2303      	movs	r3, #3
 8001ba8:	e087      	b.n	8001cba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001baa:	4b27      	ldr	r3, [pc, #156]	; (8001c48 <HAL_RCC_OscConfig+0x470>)
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d1f0      	bne.n	8001b98 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	69da      	ldr	r2, [r3, #28]
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	6a1b      	ldr	r3, [r3, #32]
 8001bbe:	431a      	orrs	r2, r3
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bc4:	019b      	lsls	r3, r3, #6
 8001bc6:	431a      	orrs	r2, r3
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bcc:	085b      	lsrs	r3, r3, #1
 8001bce:	3b01      	subs	r3, #1
 8001bd0:	041b      	lsls	r3, r3, #16
 8001bd2:	431a      	orrs	r2, r3
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bd8:	061b      	lsls	r3, r3, #24
 8001bda:	491b      	ldr	r1, [pc, #108]	; (8001c48 <HAL_RCC_OscConfig+0x470>)
 8001bdc:	4313      	orrs	r3, r2
 8001bde:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001be0:	4b1b      	ldr	r3, [pc, #108]	; (8001c50 <HAL_RCC_OscConfig+0x478>)
 8001be2:	2201      	movs	r2, #1
 8001be4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001be6:	f7ff fb67 	bl	80012b8 <HAL_GetTick>
 8001bea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001bec:	e008      	b.n	8001c00 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001bee:	f7ff fb63 	bl	80012b8 <HAL_GetTick>
 8001bf2:	4602      	mov	r2, r0
 8001bf4:	693b      	ldr	r3, [r7, #16]
 8001bf6:	1ad3      	subs	r3, r2, r3
 8001bf8:	2b02      	cmp	r3, #2
 8001bfa:	d901      	bls.n	8001c00 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001bfc:	2303      	movs	r3, #3
 8001bfe:	e05c      	b.n	8001cba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c00:	4b11      	ldr	r3, [pc, #68]	; (8001c48 <HAL_RCC_OscConfig+0x470>)
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d0f0      	beq.n	8001bee <HAL_RCC_OscConfig+0x416>
 8001c0c:	e054      	b.n	8001cb8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c0e:	4b10      	ldr	r3, [pc, #64]	; (8001c50 <HAL_RCC_OscConfig+0x478>)
 8001c10:	2200      	movs	r2, #0
 8001c12:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c14:	f7ff fb50 	bl	80012b8 <HAL_GetTick>
 8001c18:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c1a:	e008      	b.n	8001c2e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c1c:	f7ff fb4c 	bl	80012b8 <HAL_GetTick>
 8001c20:	4602      	mov	r2, r0
 8001c22:	693b      	ldr	r3, [r7, #16]
 8001c24:	1ad3      	subs	r3, r2, r3
 8001c26:	2b02      	cmp	r3, #2
 8001c28:	d901      	bls.n	8001c2e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001c2a:	2303      	movs	r3, #3
 8001c2c:	e045      	b.n	8001cba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c2e:	4b06      	ldr	r3, [pc, #24]	; (8001c48 <HAL_RCC_OscConfig+0x470>)
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d1f0      	bne.n	8001c1c <HAL_RCC_OscConfig+0x444>
 8001c3a:	e03d      	b.n	8001cb8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	699b      	ldr	r3, [r3, #24]
 8001c40:	2b01      	cmp	r3, #1
 8001c42:	d107      	bne.n	8001c54 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001c44:	2301      	movs	r3, #1
 8001c46:	e038      	b.n	8001cba <HAL_RCC_OscConfig+0x4e2>
 8001c48:	40023800 	.word	0x40023800
 8001c4c:	40007000 	.word	0x40007000
 8001c50:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001c54:	4b1b      	ldr	r3, [pc, #108]	; (8001cc4 <HAL_RCC_OscConfig+0x4ec>)
 8001c56:	685b      	ldr	r3, [r3, #4]
 8001c58:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	699b      	ldr	r3, [r3, #24]
 8001c5e:	2b01      	cmp	r3, #1
 8001c60:	d028      	beq.n	8001cb4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001c6c:	429a      	cmp	r2, r3
 8001c6e:	d121      	bne.n	8001cb4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c7a:	429a      	cmp	r2, r3
 8001c7c:	d11a      	bne.n	8001cb4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001c7e:	68fa      	ldr	r2, [r7, #12]
 8001c80:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001c84:	4013      	ands	r3, r2
 8001c86:	687a      	ldr	r2, [r7, #4]
 8001c88:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001c8a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001c8c:	4293      	cmp	r3, r2
 8001c8e:	d111      	bne.n	8001cb4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c9a:	085b      	lsrs	r3, r3, #1
 8001c9c:	3b01      	subs	r3, #1
 8001c9e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001ca0:	429a      	cmp	r2, r3
 8001ca2:	d107      	bne.n	8001cb4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cae:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001cb0:	429a      	cmp	r2, r3
 8001cb2:	d001      	beq.n	8001cb8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001cb4:	2301      	movs	r3, #1
 8001cb6:	e000      	b.n	8001cba <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001cb8:	2300      	movs	r3, #0
}
 8001cba:	4618      	mov	r0, r3
 8001cbc:	3718      	adds	r7, #24
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	bd80      	pop	{r7, pc}
 8001cc2:	bf00      	nop
 8001cc4:	40023800 	.word	0x40023800

08001cc8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b084      	sub	sp, #16
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
 8001cd0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d101      	bne.n	8001cdc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001cd8:	2301      	movs	r3, #1
 8001cda:	e0cc      	b.n	8001e76 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001cdc:	4b68      	ldr	r3, [pc, #416]	; (8001e80 <HAL_RCC_ClockConfig+0x1b8>)
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	f003 0307 	and.w	r3, r3, #7
 8001ce4:	683a      	ldr	r2, [r7, #0]
 8001ce6:	429a      	cmp	r2, r3
 8001ce8:	d90c      	bls.n	8001d04 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001cea:	4b65      	ldr	r3, [pc, #404]	; (8001e80 <HAL_RCC_ClockConfig+0x1b8>)
 8001cec:	683a      	ldr	r2, [r7, #0]
 8001cee:	b2d2      	uxtb	r2, r2
 8001cf0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001cf2:	4b63      	ldr	r3, [pc, #396]	; (8001e80 <HAL_RCC_ClockConfig+0x1b8>)
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f003 0307 	and.w	r3, r3, #7
 8001cfa:	683a      	ldr	r2, [r7, #0]
 8001cfc:	429a      	cmp	r2, r3
 8001cfe:	d001      	beq.n	8001d04 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001d00:	2301      	movs	r3, #1
 8001d02:	e0b8      	b.n	8001e76 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	f003 0302 	and.w	r3, r3, #2
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d020      	beq.n	8001d52 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	f003 0304 	and.w	r3, r3, #4
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d005      	beq.n	8001d28 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001d1c:	4b59      	ldr	r3, [pc, #356]	; (8001e84 <HAL_RCC_ClockConfig+0x1bc>)
 8001d1e:	689b      	ldr	r3, [r3, #8]
 8001d20:	4a58      	ldr	r2, [pc, #352]	; (8001e84 <HAL_RCC_ClockConfig+0x1bc>)
 8001d22:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001d26:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	f003 0308 	and.w	r3, r3, #8
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d005      	beq.n	8001d40 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001d34:	4b53      	ldr	r3, [pc, #332]	; (8001e84 <HAL_RCC_ClockConfig+0x1bc>)
 8001d36:	689b      	ldr	r3, [r3, #8]
 8001d38:	4a52      	ldr	r2, [pc, #328]	; (8001e84 <HAL_RCC_ClockConfig+0x1bc>)
 8001d3a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001d3e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d40:	4b50      	ldr	r3, [pc, #320]	; (8001e84 <HAL_RCC_ClockConfig+0x1bc>)
 8001d42:	689b      	ldr	r3, [r3, #8]
 8001d44:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	689b      	ldr	r3, [r3, #8]
 8001d4c:	494d      	ldr	r1, [pc, #308]	; (8001e84 <HAL_RCC_ClockConfig+0x1bc>)
 8001d4e:	4313      	orrs	r3, r2
 8001d50:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	f003 0301 	and.w	r3, r3, #1
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d044      	beq.n	8001de8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	685b      	ldr	r3, [r3, #4]
 8001d62:	2b01      	cmp	r3, #1
 8001d64:	d107      	bne.n	8001d76 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d66:	4b47      	ldr	r3, [pc, #284]	; (8001e84 <HAL_RCC_ClockConfig+0x1bc>)
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d119      	bne.n	8001da6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d72:	2301      	movs	r3, #1
 8001d74:	e07f      	b.n	8001e76 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	685b      	ldr	r3, [r3, #4]
 8001d7a:	2b02      	cmp	r3, #2
 8001d7c:	d003      	beq.n	8001d86 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001d82:	2b03      	cmp	r3, #3
 8001d84:	d107      	bne.n	8001d96 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d86:	4b3f      	ldr	r3, [pc, #252]	; (8001e84 <HAL_RCC_ClockConfig+0x1bc>)
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d109      	bne.n	8001da6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d92:	2301      	movs	r3, #1
 8001d94:	e06f      	b.n	8001e76 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d96:	4b3b      	ldr	r3, [pc, #236]	; (8001e84 <HAL_RCC_ClockConfig+0x1bc>)
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	f003 0302 	and.w	r3, r3, #2
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d101      	bne.n	8001da6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001da2:	2301      	movs	r3, #1
 8001da4:	e067      	b.n	8001e76 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001da6:	4b37      	ldr	r3, [pc, #220]	; (8001e84 <HAL_RCC_ClockConfig+0x1bc>)
 8001da8:	689b      	ldr	r3, [r3, #8]
 8001daa:	f023 0203 	bic.w	r2, r3, #3
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	685b      	ldr	r3, [r3, #4]
 8001db2:	4934      	ldr	r1, [pc, #208]	; (8001e84 <HAL_RCC_ClockConfig+0x1bc>)
 8001db4:	4313      	orrs	r3, r2
 8001db6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001db8:	f7ff fa7e 	bl	80012b8 <HAL_GetTick>
 8001dbc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001dbe:	e00a      	b.n	8001dd6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001dc0:	f7ff fa7a 	bl	80012b8 <HAL_GetTick>
 8001dc4:	4602      	mov	r2, r0
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	1ad3      	subs	r3, r2, r3
 8001dca:	f241 3288 	movw	r2, #5000	; 0x1388
 8001dce:	4293      	cmp	r3, r2
 8001dd0:	d901      	bls.n	8001dd6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001dd2:	2303      	movs	r3, #3
 8001dd4:	e04f      	b.n	8001e76 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001dd6:	4b2b      	ldr	r3, [pc, #172]	; (8001e84 <HAL_RCC_ClockConfig+0x1bc>)
 8001dd8:	689b      	ldr	r3, [r3, #8]
 8001dda:	f003 020c 	and.w	r2, r3, #12
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	685b      	ldr	r3, [r3, #4]
 8001de2:	009b      	lsls	r3, r3, #2
 8001de4:	429a      	cmp	r2, r3
 8001de6:	d1eb      	bne.n	8001dc0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001de8:	4b25      	ldr	r3, [pc, #148]	; (8001e80 <HAL_RCC_ClockConfig+0x1b8>)
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	f003 0307 	and.w	r3, r3, #7
 8001df0:	683a      	ldr	r2, [r7, #0]
 8001df2:	429a      	cmp	r2, r3
 8001df4:	d20c      	bcs.n	8001e10 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001df6:	4b22      	ldr	r3, [pc, #136]	; (8001e80 <HAL_RCC_ClockConfig+0x1b8>)
 8001df8:	683a      	ldr	r2, [r7, #0]
 8001dfa:	b2d2      	uxtb	r2, r2
 8001dfc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001dfe:	4b20      	ldr	r3, [pc, #128]	; (8001e80 <HAL_RCC_ClockConfig+0x1b8>)
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f003 0307 	and.w	r3, r3, #7
 8001e06:	683a      	ldr	r2, [r7, #0]
 8001e08:	429a      	cmp	r2, r3
 8001e0a:	d001      	beq.n	8001e10 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001e0c:	2301      	movs	r3, #1
 8001e0e:	e032      	b.n	8001e76 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	f003 0304 	and.w	r3, r3, #4
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d008      	beq.n	8001e2e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001e1c:	4b19      	ldr	r3, [pc, #100]	; (8001e84 <HAL_RCC_ClockConfig+0x1bc>)
 8001e1e:	689b      	ldr	r3, [r3, #8]
 8001e20:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	68db      	ldr	r3, [r3, #12]
 8001e28:	4916      	ldr	r1, [pc, #88]	; (8001e84 <HAL_RCC_ClockConfig+0x1bc>)
 8001e2a:	4313      	orrs	r3, r2
 8001e2c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	f003 0308 	and.w	r3, r3, #8
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d009      	beq.n	8001e4e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001e3a:	4b12      	ldr	r3, [pc, #72]	; (8001e84 <HAL_RCC_ClockConfig+0x1bc>)
 8001e3c:	689b      	ldr	r3, [r3, #8]
 8001e3e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	691b      	ldr	r3, [r3, #16]
 8001e46:	00db      	lsls	r3, r3, #3
 8001e48:	490e      	ldr	r1, [pc, #56]	; (8001e84 <HAL_RCC_ClockConfig+0x1bc>)
 8001e4a:	4313      	orrs	r3, r2
 8001e4c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001e4e:	f000 f821 	bl	8001e94 <HAL_RCC_GetSysClockFreq>
 8001e52:	4602      	mov	r2, r0
 8001e54:	4b0b      	ldr	r3, [pc, #44]	; (8001e84 <HAL_RCC_ClockConfig+0x1bc>)
 8001e56:	689b      	ldr	r3, [r3, #8]
 8001e58:	091b      	lsrs	r3, r3, #4
 8001e5a:	f003 030f 	and.w	r3, r3, #15
 8001e5e:	490a      	ldr	r1, [pc, #40]	; (8001e88 <HAL_RCC_ClockConfig+0x1c0>)
 8001e60:	5ccb      	ldrb	r3, [r1, r3]
 8001e62:	fa22 f303 	lsr.w	r3, r2, r3
 8001e66:	4a09      	ldr	r2, [pc, #36]	; (8001e8c <HAL_RCC_ClockConfig+0x1c4>)
 8001e68:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001e6a:	4b09      	ldr	r3, [pc, #36]	; (8001e90 <HAL_RCC_ClockConfig+0x1c8>)
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	4618      	mov	r0, r3
 8001e70:	f7ff f9de 	bl	8001230 <HAL_InitTick>

  return HAL_OK;
 8001e74:	2300      	movs	r3, #0
}
 8001e76:	4618      	mov	r0, r3
 8001e78:	3710      	adds	r7, #16
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	bd80      	pop	{r7, pc}
 8001e7e:	bf00      	nop
 8001e80:	40023c00 	.word	0x40023c00
 8001e84:	40023800 	.word	0x40023800
 8001e88:	080039e4 	.word	0x080039e4
 8001e8c:	20000004 	.word	0x20000004
 8001e90:	20000008 	.word	0x20000008

08001e94 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001e94:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001e98:	b094      	sub	sp, #80	; 0x50
 8001e9a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001e9c:	2300      	movs	r3, #0
 8001e9e:	647b      	str	r3, [r7, #68]	; 0x44
 8001ea0:	2300      	movs	r3, #0
 8001ea2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001ea4:	2300      	movs	r3, #0
 8001ea6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8001ea8:	2300      	movs	r3, #0
 8001eaa:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001eac:	4b79      	ldr	r3, [pc, #484]	; (8002094 <HAL_RCC_GetSysClockFreq+0x200>)
 8001eae:	689b      	ldr	r3, [r3, #8]
 8001eb0:	f003 030c 	and.w	r3, r3, #12
 8001eb4:	2b08      	cmp	r3, #8
 8001eb6:	d00d      	beq.n	8001ed4 <HAL_RCC_GetSysClockFreq+0x40>
 8001eb8:	2b08      	cmp	r3, #8
 8001eba:	f200 80e1 	bhi.w	8002080 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d002      	beq.n	8001ec8 <HAL_RCC_GetSysClockFreq+0x34>
 8001ec2:	2b04      	cmp	r3, #4
 8001ec4:	d003      	beq.n	8001ece <HAL_RCC_GetSysClockFreq+0x3a>
 8001ec6:	e0db      	b.n	8002080 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001ec8:	4b73      	ldr	r3, [pc, #460]	; (8002098 <HAL_RCC_GetSysClockFreq+0x204>)
 8001eca:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8001ecc:	e0db      	b.n	8002086 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001ece:	4b73      	ldr	r3, [pc, #460]	; (800209c <HAL_RCC_GetSysClockFreq+0x208>)
 8001ed0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001ed2:	e0d8      	b.n	8002086 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001ed4:	4b6f      	ldr	r3, [pc, #444]	; (8002094 <HAL_RCC_GetSysClockFreq+0x200>)
 8001ed6:	685b      	ldr	r3, [r3, #4]
 8001ed8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001edc:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001ede:	4b6d      	ldr	r3, [pc, #436]	; (8002094 <HAL_RCC_GetSysClockFreq+0x200>)
 8001ee0:	685b      	ldr	r3, [r3, #4]
 8001ee2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d063      	beq.n	8001fb2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001eea:	4b6a      	ldr	r3, [pc, #424]	; (8002094 <HAL_RCC_GetSysClockFreq+0x200>)
 8001eec:	685b      	ldr	r3, [r3, #4]
 8001eee:	099b      	lsrs	r3, r3, #6
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	63bb      	str	r3, [r7, #56]	; 0x38
 8001ef4:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001ef6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001ef8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001efc:	633b      	str	r3, [r7, #48]	; 0x30
 8001efe:	2300      	movs	r3, #0
 8001f00:	637b      	str	r3, [r7, #52]	; 0x34
 8001f02:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001f06:	4622      	mov	r2, r4
 8001f08:	462b      	mov	r3, r5
 8001f0a:	f04f 0000 	mov.w	r0, #0
 8001f0e:	f04f 0100 	mov.w	r1, #0
 8001f12:	0159      	lsls	r1, r3, #5
 8001f14:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001f18:	0150      	lsls	r0, r2, #5
 8001f1a:	4602      	mov	r2, r0
 8001f1c:	460b      	mov	r3, r1
 8001f1e:	4621      	mov	r1, r4
 8001f20:	1a51      	subs	r1, r2, r1
 8001f22:	6139      	str	r1, [r7, #16]
 8001f24:	4629      	mov	r1, r5
 8001f26:	eb63 0301 	sbc.w	r3, r3, r1
 8001f2a:	617b      	str	r3, [r7, #20]
 8001f2c:	f04f 0200 	mov.w	r2, #0
 8001f30:	f04f 0300 	mov.w	r3, #0
 8001f34:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001f38:	4659      	mov	r1, fp
 8001f3a:	018b      	lsls	r3, r1, #6
 8001f3c:	4651      	mov	r1, sl
 8001f3e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001f42:	4651      	mov	r1, sl
 8001f44:	018a      	lsls	r2, r1, #6
 8001f46:	4651      	mov	r1, sl
 8001f48:	ebb2 0801 	subs.w	r8, r2, r1
 8001f4c:	4659      	mov	r1, fp
 8001f4e:	eb63 0901 	sbc.w	r9, r3, r1
 8001f52:	f04f 0200 	mov.w	r2, #0
 8001f56:	f04f 0300 	mov.w	r3, #0
 8001f5a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001f5e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001f62:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001f66:	4690      	mov	r8, r2
 8001f68:	4699      	mov	r9, r3
 8001f6a:	4623      	mov	r3, r4
 8001f6c:	eb18 0303 	adds.w	r3, r8, r3
 8001f70:	60bb      	str	r3, [r7, #8]
 8001f72:	462b      	mov	r3, r5
 8001f74:	eb49 0303 	adc.w	r3, r9, r3
 8001f78:	60fb      	str	r3, [r7, #12]
 8001f7a:	f04f 0200 	mov.w	r2, #0
 8001f7e:	f04f 0300 	mov.w	r3, #0
 8001f82:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001f86:	4629      	mov	r1, r5
 8001f88:	024b      	lsls	r3, r1, #9
 8001f8a:	4621      	mov	r1, r4
 8001f8c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001f90:	4621      	mov	r1, r4
 8001f92:	024a      	lsls	r2, r1, #9
 8001f94:	4610      	mov	r0, r2
 8001f96:	4619      	mov	r1, r3
 8001f98:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	62bb      	str	r3, [r7, #40]	; 0x28
 8001f9e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001fa0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001fa4:	f7fe f994 	bl	80002d0 <__aeabi_uldivmod>
 8001fa8:	4602      	mov	r2, r0
 8001faa:	460b      	mov	r3, r1
 8001fac:	4613      	mov	r3, r2
 8001fae:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001fb0:	e058      	b.n	8002064 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001fb2:	4b38      	ldr	r3, [pc, #224]	; (8002094 <HAL_RCC_GetSysClockFreq+0x200>)
 8001fb4:	685b      	ldr	r3, [r3, #4]
 8001fb6:	099b      	lsrs	r3, r3, #6
 8001fb8:	2200      	movs	r2, #0
 8001fba:	4618      	mov	r0, r3
 8001fbc:	4611      	mov	r1, r2
 8001fbe:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001fc2:	623b      	str	r3, [r7, #32]
 8001fc4:	2300      	movs	r3, #0
 8001fc6:	627b      	str	r3, [r7, #36]	; 0x24
 8001fc8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001fcc:	4642      	mov	r2, r8
 8001fce:	464b      	mov	r3, r9
 8001fd0:	f04f 0000 	mov.w	r0, #0
 8001fd4:	f04f 0100 	mov.w	r1, #0
 8001fd8:	0159      	lsls	r1, r3, #5
 8001fda:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001fde:	0150      	lsls	r0, r2, #5
 8001fe0:	4602      	mov	r2, r0
 8001fe2:	460b      	mov	r3, r1
 8001fe4:	4641      	mov	r1, r8
 8001fe6:	ebb2 0a01 	subs.w	sl, r2, r1
 8001fea:	4649      	mov	r1, r9
 8001fec:	eb63 0b01 	sbc.w	fp, r3, r1
 8001ff0:	f04f 0200 	mov.w	r2, #0
 8001ff4:	f04f 0300 	mov.w	r3, #0
 8001ff8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001ffc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002000:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002004:	ebb2 040a 	subs.w	r4, r2, sl
 8002008:	eb63 050b 	sbc.w	r5, r3, fp
 800200c:	f04f 0200 	mov.w	r2, #0
 8002010:	f04f 0300 	mov.w	r3, #0
 8002014:	00eb      	lsls	r3, r5, #3
 8002016:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800201a:	00e2      	lsls	r2, r4, #3
 800201c:	4614      	mov	r4, r2
 800201e:	461d      	mov	r5, r3
 8002020:	4643      	mov	r3, r8
 8002022:	18e3      	adds	r3, r4, r3
 8002024:	603b      	str	r3, [r7, #0]
 8002026:	464b      	mov	r3, r9
 8002028:	eb45 0303 	adc.w	r3, r5, r3
 800202c:	607b      	str	r3, [r7, #4]
 800202e:	f04f 0200 	mov.w	r2, #0
 8002032:	f04f 0300 	mov.w	r3, #0
 8002036:	e9d7 4500 	ldrd	r4, r5, [r7]
 800203a:	4629      	mov	r1, r5
 800203c:	028b      	lsls	r3, r1, #10
 800203e:	4621      	mov	r1, r4
 8002040:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002044:	4621      	mov	r1, r4
 8002046:	028a      	lsls	r2, r1, #10
 8002048:	4610      	mov	r0, r2
 800204a:	4619      	mov	r1, r3
 800204c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800204e:	2200      	movs	r2, #0
 8002050:	61bb      	str	r3, [r7, #24]
 8002052:	61fa      	str	r2, [r7, #28]
 8002054:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002058:	f7fe f93a 	bl	80002d0 <__aeabi_uldivmod>
 800205c:	4602      	mov	r2, r0
 800205e:	460b      	mov	r3, r1
 8002060:	4613      	mov	r3, r2
 8002062:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002064:	4b0b      	ldr	r3, [pc, #44]	; (8002094 <HAL_RCC_GetSysClockFreq+0x200>)
 8002066:	685b      	ldr	r3, [r3, #4]
 8002068:	0c1b      	lsrs	r3, r3, #16
 800206a:	f003 0303 	and.w	r3, r3, #3
 800206e:	3301      	adds	r3, #1
 8002070:	005b      	lsls	r3, r3, #1
 8002072:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002074:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002076:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002078:	fbb2 f3f3 	udiv	r3, r2, r3
 800207c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800207e:	e002      	b.n	8002086 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002080:	4b05      	ldr	r3, [pc, #20]	; (8002098 <HAL_RCC_GetSysClockFreq+0x204>)
 8002082:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002084:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002086:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002088:	4618      	mov	r0, r3
 800208a:	3750      	adds	r7, #80	; 0x50
 800208c:	46bd      	mov	sp, r7
 800208e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002092:	bf00      	nop
 8002094:	40023800 	.word	0x40023800
 8002098:	00f42400 	.word	0x00f42400
 800209c:	007a1200 	.word	0x007a1200

080020a0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80020a0:	b480      	push	{r7}
 80020a2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80020a4:	4b03      	ldr	r3, [pc, #12]	; (80020b4 <HAL_RCC_GetHCLKFreq+0x14>)
 80020a6:	681b      	ldr	r3, [r3, #0]
}
 80020a8:	4618      	mov	r0, r3
 80020aa:	46bd      	mov	sp, r7
 80020ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b0:	4770      	bx	lr
 80020b2:	bf00      	nop
 80020b4:	20000004 	.word	0x20000004

080020b8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80020bc:	f7ff fff0 	bl	80020a0 <HAL_RCC_GetHCLKFreq>
 80020c0:	4602      	mov	r2, r0
 80020c2:	4b05      	ldr	r3, [pc, #20]	; (80020d8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80020c4:	689b      	ldr	r3, [r3, #8]
 80020c6:	0a9b      	lsrs	r3, r3, #10
 80020c8:	f003 0307 	and.w	r3, r3, #7
 80020cc:	4903      	ldr	r1, [pc, #12]	; (80020dc <HAL_RCC_GetPCLK1Freq+0x24>)
 80020ce:	5ccb      	ldrb	r3, [r1, r3]
 80020d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80020d4:	4618      	mov	r0, r3
 80020d6:	bd80      	pop	{r7, pc}
 80020d8:	40023800 	.word	0x40023800
 80020dc:	080039f4 	.word	0x080039f4

080020e0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80020e4:	f7ff ffdc 	bl	80020a0 <HAL_RCC_GetHCLKFreq>
 80020e8:	4602      	mov	r2, r0
 80020ea:	4b05      	ldr	r3, [pc, #20]	; (8002100 <HAL_RCC_GetPCLK2Freq+0x20>)
 80020ec:	689b      	ldr	r3, [r3, #8]
 80020ee:	0b5b      	lsrs	r3, r3, #13
 80020f0:	f003 0307 	and.w	r3, r3, #7
 80020f4:	4903      	ldr	r1, [pc, #12]	; (8002104 <HAL_RCC_GetPCLK2Freq+0x24>)
 80020f6:	5ccb      	ldrb	r3, [r1, r3]
 80020f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80020fc:	4618      	mov	r0, r3
 80020fe:	bd80      	pop	{r7, pc}
 8002100:	40023800 	.word	0x40023800
 8002104:	080039f4 	.word	0x080039f4

08002108 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002108:	b580      	push	{r7, lr}
 800210a:	b082      	sub	sp, #8
 800210c:	af00      	add	r7, sp, #0
 800210e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	2b00      	cmp	r3, #0
 8002114:	d101      	bne.n	800211a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002116:	2301      	movs	r3, #1
 8002118:	e03f      	b.n	800219a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002120:	b2db      	uxtb	r3, r3
 8002122:	2b00      	cmp	r3, #0
 8002124:	d106      	bne.n	8002134 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	2200      	movs	r2, #0
 800212a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800212e:	6878      	ldr	r0, [r7, #4]
 8002130:	f7fe fed4 	bl	8000edc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	2224      	movs	r2, #36	; 0x24
 8002138:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	68da      	ldr	r2, [r3, #12]
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800214a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800214c:	6878      	ldr	r0, [r7, #4]
 800214e:	f000 f929 	bl	80023a4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	691a      	ldr	r2, [r3, #16]
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002160:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	695a      	ldr	r2, [r3, #20]
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002170:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	68da      	ldr	r2, [r3, #12]
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002180:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	2200      	movs	r2, #0
 8002186:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	2220      	movs	r2, #32
 800218c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	2220      	movs	r2, #32
 8002194:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002198:	2300      	movs	r3, #0
}
 800219a:	4618      	mov	r0, r3
 800219c:	3708      	adds	r7, #8
 800219e:	46bd      	mov	sp, r7
 80021a0:	bd80      	pop	{r7, pc}

080021a2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80021a2:	b580      	push	{r7, lr}
 80021a4:	b08a      	sub	sp, #40	; 0x28
 80021a6:	af02      	add	r7, sp, #8
 80021a8:	60f8      	str	r0, [r7, #12]
 80021aa:	60b9      	str	r1, [r7, #8]
 80021ac:	603b      	str	r3, [r7, #0]
 80021ae:	4613      	mov	r3, r2
 80021b0:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80021b2:	2300      	movs	r3, #0
 80021b4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80021bc:	b2db      	uxtb	r3, r3
 80021be:	2b20      	cmp	r3, #32
 80021c0:	d17c      	bne.n	80022bc <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80021c2:	68bb      	ldr	r3, [r7, #8]
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d002      	beq.n	80021ce <HAL_UART_Transmit+0x2c>
 80021c8:	88fb      	ldrh	r3, [r7, #6]
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d101      	bne.n	80021d2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80021ce:	2301      	movs	r3, #1
 80021d0:	e075      	b.n	80022be <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80021d8:	2b01      	cmp	r3, #1
 80021da:	d101      	bne.n	80021e0 <HAL_UART_Transmit+0x3e>
 80021dc:	2302      	movs	r3, #2
 80021de:	e06e      	b.n	80022be <HAL_UART_Transmit+0x11c>
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	2201      	movs	r2, #1
 80021e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	2200      	movs	r2, #0
 80021ec:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	2221      	movs	r2, #33	; 0x21
 80021f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80021f6:	f7ff f85f 	bl	80012b8 <HAL_GetTick>
 80021fa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	88fa      	ldrh	r2, [r7, #6]
 8002200:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	88fa      	ldrh	r2, [r7, #6]
 8002206:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	689b      	ldr	r3, [r3, #8]
 800220c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002210:	d108      	bne.n	8002224 <HAL_UART_Transmit+0x82>
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	691b      	ldr	r3, [r3, #16]
 8002216:	2b00      	cmp	r3, #0
 8002218:	d104      	bne.n	8002224 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800221a:	2300      	movs	r3, #0
 800221c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800221e:	68bb      	ldr	r3, [r7, #8]
 8002220:	61bb      	str	r3, [r7, #24]
 8002222:	e003      	b.n	800222c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002224:	68bb      	ldr	r3, [r7, #8]
 8002226:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002228:	2300      	movs	r3, #0
 800222a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	2200      	movs	r2, #0
 8002230:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002234:	e02a      	b.n	800228c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002236:	683b      	ldr	r3, [r7, #0]
 8002238:	9300      	str	r3, [sp, #0]
 800223a:	697b      	ldr	r3, [r7, #20]
 800223c:	2200      	movs	r2, #0
 800223e:	2180      	movs	r1, #128	; 0x80
 8002240:	68f8      	ldr	r0, [r7, #12]
 8002242:	f000 f840 	bl	80022c6 <UART_WaitOnFlagUntilTimeout>
 8002246:	4603      	mov	r3, r0
 8002248:	2b00      	cmp	r3, #0
 800224a:	d001      	beq.n	8002250 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800224c:	2303      	movs	r3, #3
 800224e:	e036      	b.n	80022be <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002250:	69fb      	ldr	r3, [r7, #28]
 8002252:	2b00      	cmp	r3, #0
 8002254:	d10b      	bne.n	800226e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002256:	69bb      	ldr	r3, [r7, #24]
 8002258:	881b      	ldrh	r3, [r3, #0]
 800225a:	461a      	mov	r2, r3
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002264:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002266:	69bb      	ldr	r3, [r7, #24]
 8002268:	3302      	adds	r3, #2
 800226a:	61bb      	str	r3, [r7, #24]
 800226c:	e007      	b.n	800227e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800226e:	69fb      	ldr	r3, [r7, #28]
 8002270:	781a      	ldrb	r2, [r3, #0]
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002278:	69fb      	ldr	r3, [r7, #28]
 800227a:	3301      	adds	r3, #1
 800227c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002282:	b29b      	uxth	r3, r3
 8002284:	3b01      	subs	r3, #1
 8002286:	b29a      	uxth	r2, r3
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002290:	b29b      	uxth	r3, r3
 8002292:	2b00      	cmp	r3, #0
 8002294:	d1cf      	bne.n	8002236 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002296:	683b      	ldr	r3, [r7, #0]
 8002298:	9300      	str	r3, [sp, #0]
 800229a:	697b      	ldr	r3, [r7, #20]
 800229c:	2200      	movs	r2, #0
 800229e:	2140      	movs	r1, #64	; 0x40
 80022a0:	68f8      	ldr	r0, [r7, #12]
 80022a2:	f000 f810 	bl	80022c6 <UART_WaitOnFlagUntilTimeout>
 80022a6:	4603      	mov	r3, r0
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d001      	beq.n	80022b0 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80022ac:	2303      	movs	r3, #3
 80022ae:	e006      	b.n	80022be <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	2220      	movs	r2, #32
 80022b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80022b8:	2300      	movs	r3, #0
 80022ba:	e000      	b.n	80022be <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80022bc:	2302      	movs	r3, #2
  }
}
 80022be:	4618      	mov	r0, r3
 80022c0:	3720      	adds	r7, #32
 80022c2:	46bd      	mov	sp, r7
 80022c4:	bd80      	pop	{r7, pc}

080022c6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80022c6:	b580      	push	{r7, lr}
 80022c8:	b090      	sub	sp, #64	; 0x40
 80022ca:	af00      	add	r7, sp, #0
 80022cc:	60f8      	str	r0, [r7, #12]
 80022ce:	60b9      	str	r1, [r7, #8]
 80022d0:	603b      	str	r3, [r7, #0]
 80022d2:	4613      	mov	r3, r2
 80022d4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80022d6:	e050      	b.n	800237a <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80022d8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80022da:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80022de:	d04c      	beq.n	800237a <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80022e0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d007      	beq.n	80022f6 <UART_WaitOnFlagUntilTimeout+0x30>
 80022e6:	f7fe ffe7 	bl	80012b8 <HAL_GetTick>
 80022ea:	4602      	mov	r2, r0
 80022ec:	683b      	ldr	r3, [r7, #0]
 80022ee:	1ad3      	subs	r3, r2, r3
 80022f0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80022f2:	429a      	cmp	r2, r3
 80022f4:	d241      	bcs.n	800237a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	330c      	adds	r3, #12
 80022fc:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80022fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002300:	e853 3f00 	ldrex	r3, [r3]
 8002304:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002306:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002308:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800230c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	330c      	adds	r3, #12
 8002314:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002316:	637a      	str	r2, [r7, #52]	; 0x34
 8002318:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800231a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800231c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800231e:	e841 2300 	strex	r3, r2, [r1]
 8002322:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002324:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002326:	2b00      	cmp	r3, #0
 8002328:	d1e5      	bne.n	80022f6 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	3314      	adds	r3, #20
 8002330:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002332:	697b      	ldr	r3, [r7, #20]
 8002334:	e853 3f00 	ldrex	r3, [r3]
 8002338:	613b      	str	r3, [r7, #16]
   return(result);
 800233a:	693b      	ldr	r3, [r7, #16]
 800233c:	f023 0301 	bic.w	r3, r3, #1
 8002340:	63bb      	str	r3, [r7, #56]	; 0x38
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	3314      	adds	r3, #20
 8002348:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800234a:	623a      	str	r2, [r7, #32]
 800234c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800234e:	69f9      	ldr	r1, [r7, #28]
 8002350:	6a3a      	ldr	r2, [r7, #32]
 8002352:	e841 2300 	strex	r3, r2, [r1]
 8002356:	61bb      	str	r3, [r7, #24]
   return(result);
 8002358:	69bb      	ldr	r3, [r7, #24]
 800235a:	2b00      	cmp	r3, #0
 800235c:	d1e5      	bne.n	800232a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	2220      	movs	r2, #32
 8002362:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	2220      	movs	r2, #32
 800236a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	2200      	movs	r2, #0
 8002372:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002376:	2303      	movs	r3, #3
 8002378:	e00f      	b.n	800239a <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	681a      	ldr	r2, [r3, #0]
 8002380:	68bb      	ldr	r3, [r7, #8]
 8002382:	4013      	ands	r3, r2
 8002384:	68ba      	ldr	r2, [r7, #8]
 8002386:	429a      	cmp	r2, r3
 8002388:	bf0c      	ite	eq
 800238a:	2301      	moveq	r3, #1
 800238c:	2300      	movne	r3, #0
 800238e:	b2db      	uxtb	r3, r3
 8002390:	461a      	mov	r2, r3
 8002392:	79fb      	ldrb	r3, [r7, #7]
 8002394:	429a      	cmp	r2, r3
 8002396:	d09f      	beq.n	80022d8 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002398:	2300      	movs	r3, #0
}
 800239a:	4618      	mov	r0, r3
 800239c:	3740      	adds	r7, #64	; 0x40
 800239e:	46bd      	mov	sp, r7
 80023a0:	bd80      	pop	{r7, pc}
	...

080023a4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80023a4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80023a8:	b0c0      	sub	sp, #256	; 0x100
 80023aa:	af00      	add	r7, sp, #0
 80023ac:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80023b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	691b      	ldr	r3, [r3, #16]
 80023b8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80023bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80023c0:	68d9      	ldr	r1, [r3, #12]
 80023c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80023c6:	681a      	ldr	r2, [r3, #0]
 80023c8:	ea40 0301 	orr.w	r3, r0, r1
 80023cc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80023ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80023d2:	689a      	ldr	r2, [r3, #8]
 80023d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80023d8:	691b      	ldr	r3, [r3, #16]
 80023da:	431a      	orrs	r2, r3
 80023dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80023e0:	695b      	ldr	r3, [r3, #20]
 80023e2:	431a      	orrs	r2, r3
 80023e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80023e8:	69db      	ldr	r3, [r3, #28]
 80023ea:	4313      	orrs	r3, r2
 80023ec:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80023f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	68db      	ldr	r3, [r3, #12]
 80023f8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80023fc:	f021 010c 	bic.w	r1, r1, #12
 8002400:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002404:	681a      	ldr	r2, [r3, #0]
 8002406:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800240a:	430b      	orrs	r3, r1
 800240c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800240e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	695b      	ldr	r3, [r3, #20]
 8002416:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800241a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800241e:	6999      	ldr	r1, [r3, #24]
 8002420:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002424:	681a      	ldr	r2, [r3, #0]
 8002426:	ea40 0301 	orr.w	r3, r0, r1
 800242a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800242c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002430:	681a      	ldr	r2, [r3, #0]
 8002432:	4b8f      	ldr	r3, [pc, #572]	; (8002670 <UART_SetConfig+0x2cc>)
 8002434:	429a      	cmp	r2, r3
 8002436:	d005      	beq.n	8002444 <UART_SetConfig+0xa0>
 8002438:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800243c:	681a      	ldr	r2, [r3, #0]
 800243e:	4b8d      	ldr	r3, [pc, #564]	; (8002674 <UART_SetConfig+0x2d0>)
 8002440:	429a      	cmp	r2, r3
 8002442:	d104      	bne.n	800244e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002444:	f7ff fe4c 	bl	80020e0 <HAL_RCC_GetPCLK2Freq>
 8002448:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800244c:	e003      	b.n	8002456 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800244e:	f7ff fe33 	bl	80020b8 <HAL_RCC_GetPCLK1Freq>
 8002452:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002456:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800245a:	69db      	ldr	r3, [r3, #28]
 800245c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002460:	f040 810c 	bne.w	800267c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002464:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002468:	2200      	movs	r2, #0
 800246a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800246e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8002472:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8002476:	4622      	mov	r2, r4
 8002478:	462b      	mov	r3, r5
 800247a:	1891      	adds	r1, r2, r2
 800247c:	65b9      	str	r1, [r7, #88]	; 0x58
 800247e:	415b      	adcs	r3, r3
 8002480:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002482:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002486:	4621      	mov	r1, r4
 8002488:	eb12 0801 	adds.w	r8, r2, r1
 800248c:	4629      	mov	r1, r5
 800248e:	eb43 0901 	adc.w	r9, r3, r1
 8002492:	f04f 0200 	mov.w	r2, #0
 8002496:	f04f 0300 	mov.w	r3, #0
 800249a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800249e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80024a2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80024a6:	4690      	mov	r8, r2
 80024a8:	4699      	mov	r9, r3
 80024aa:	4623      	mov	r3, r4
 80024ac:	eb18 0303 	adds.w	r3, r8, r3
 80024b0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80024b4:	462b      	mov	r3, r5
 80024b6:	eb49 0303 	adc.w	r3, r9, r3
 80024ba:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80024be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80024c2:	685b      	ldr	r3, [r3, #4]
 80024c4:	2200      	movs	r2, #0
 80024c6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80024ca:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80024ce:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80024d2:	460b      	mov	r3, r1
 80024d4:	18db      	adds	r3, r3, r3
 80024d6:	653b      	str	r3, [r7, #80]	; 0x50
 80024d8:	4613      	mov	r3, r2
 80024da:	eb42 0303 	adc.w	r3, r2, r3
 80024de:	657b      	str	r3, [r7, #84]	; 0x54
 80024e0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80024e4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80024e8:	f7fd fef2 	bl	80002d0 <__aeabi_uldivmod>
 80024ec:	4602      	mov	r2, r0
 80024ee:	460b      	mov	r3, r1
 80024f0:	4b61      	ldr	r3, [pc, #388]	; (8002678 <UART_SetConfig+0x2d4>)
 80024f2:	fba3 2302 	umull	r2, r3, r3, r2
 80024f6:	095b      	lsrs	r3, r3, #5
 80024f8:	011c      	lsls	r4, r3, #4
 80024fa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80024fe:	2200      	movs	r2, #0
 8002500:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002504:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8002508:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800250c:	4642      	mov	r2, r8
 800250e:	464b      	mov	r3, r9
 8002510:	1891      	adds	r1, r2, r2
 8002512:	64b9      	str	r1, [r7, #72]	; 0x48
 8002514:	415b      	adcs	r3, r3
 8002516:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002518:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800251c:	4641      	mov	r1, r8
 800251e:	eb12 0a01 	adds.w	sl, r2, r1
 8002522:	4649      	mov	r1, r9
 8002524:	eb43 0b01 	adc.w	fp, r3, r1
 8002528:	f04f 0200 	mov.w	r2, #0
 800252c:	f04f 0300 	mov.w	r3, #0
 8002530:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002534:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002538:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800253c:	4692      	mov	sl, r2
 800253e:	469b      	mov	fp, r3
 8002540:	4643      	mov	r3, r8
 8002542:	eb1a 0303 	adds.w	r3, sl, r3
 8002546:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800254a:	464b      	mov	r3, r9
 800254c:	eb4b 0303 	adc.w	r3, fp, r3
 8002550:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002554:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002558:	685b      	ldr	r3, [r3, #4]
 800255a:	2200      	movs	r2, #0
 800255c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002560:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8002564:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002568:	460b      	mov	r3, r1
 800256a:	18db      	adds	r3, r3, r3
 800256c:	643b      	str	r3, [r7, #64]	; 0x40
 800256e:	4613      	mov	r3, r2
 8002570:	eb42 0303 	adc.w	r3, r2, r3
 8002574:	647b      	str	r3, [r7, #68]	; 0x44
 8002576:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800257a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800257e:	f7fd fea7 	bl	80002d0 <__aeabi_uldivmod>
 8002582:	4602      	mov	r2, r0
 8002584:	460b      	mov	r3, r1
 8002586:	4611      	mov	r1, r2
 8002588:	4b3b      	ldr	r3, [pc, #236]	; (8002678 <UART_SetConfig+0x2d4>)
 800258a:	fba3 2301 	umull	r2, r3, r3, r1
 800258e:	095b      	lsrs	r3, r3, #5
 8002590:	2264      	movs	r2, #100	; 0x64
 8002592:	fb02 f303 	mul.w	r3, r2, r3
 8002596:	1acb      	subs	r3, r1, r3
 8002598:	00db      	lsls	r3, r3, #3
 800259a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800259e:	4b36      	ldr	r3, [pc, #216]	; (8002678 <UART_SetConfig+0x2d4>)
 80025a0:	fba3 2302 	umull	r2, r3, r3, r2
 80025a4:	095b      	lsrs	r3, r3, #5
 80025a6:	005b      	lsls	r3, r3, #1
 80025a8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80025ac:	441c      	add	r4, r3
 80025ae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80025b2:	2200      	movs	r2, #0
 80025b4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80025b8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80025bc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80025c0:	4642      	mov	r2, r8
 80025c2:	464b      	mov	r3, r9
 80025c4:	1891      	adds	r1, r2, r2
 80025c6:	63b9      	str	r1, [r7, #56]	; 0x38
 80025c8:	415b      	adcs	r3, r3
 80025ca:	63fb      	str	r3, [r7, #60]	; 0x3c
 80025cc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80025d0:	4641      	mov	r1, r8
 80025d2:	1851      	adds	r1, r2, r1
 80025d4:	6339      	str	r1, [r7, #48]	; 0x30
 80025d6:	4649      	mov	r1, r9
 80025d8:	414b      	adcs	r3, r1
 80025da:	637b      	str	r3, [r7, #52]	; 0x34
 80025dc:	f04f 0200 	mov.w	r2, #0
 80025e0:	f04f 0300 	mov.w	r3, #0
 80025e4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80025e8:	4659      	mov	r1, fp
 80025ea:	00cb      	lsls	r3, r1, #3
 80025ec:	4651      	mov	r1, sl
 80025ee:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80025f2:	4651      	mov	r1, sl
 80025f4:	00ca      	lsls	r2, r1, #3
 80025f6:	4610      	mov	r0, r2
 80025f8:	4619      	mov	r1, r3
 80025fa:	4603      	mov	r3, r0
 80025fc:	4642      	mov	r2, r8
 80025fe:	189b      	adds	r3, r3, r2
 8002600:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002604:	464b      	mov	r3, r9
 8002606:	460a      	mov	r2, r1
 8002608:	eb42 0303 	adc.w	r3, r2, r3
 800260c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002610:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002614:	685b      	ldr	r3, [r3, #4]
 8002616:	2200      	movs	r2, #0
 8002618:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800261c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8002620:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8002624:	460b      	mov	r3, r1
 8002626:	18db      	adds	r3, r3, r3
 8002628:	62bb      	str	r3, [r7, #40]	; 0x28
 800262a:	4613      	mov	r3, r2
 800262c:	eb42 0303 	adc.w	r3, r2, r3
 8002630:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002632:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002636:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800263a:	f7fd fe49 	bl	80002d0 <__aeabi_uldivmod>
 800263e:	4602      	mov	r2, r0
 8002640:	460b      	mov	r3, r1
 8002642:	4b0d      	ldr	r3, [pc, #52]	; (8002678 <UART_SetConfig+0x2d4>)
 8002644:	fba3 1302 	umull	r1, r3, r3, r2
 8002648:	095b      	lsrs	r3, r3, #5
 800264a:	2164      	movs	r1, #100	; 0x64
 800264c:	fb01 f303 	mul.w	r3, r1, r3
 8002650:	1ad3      	subs	r3, r2, r3
 8002652:	00db      	lsls	r3, r3, #3
 8002654:	3332      	adds	r3, #50	; 0x32
 8002656:	4a08      	ldr	r2, [pc, #32]	; (8002678 <UART_SetConfig+0x2d4>)
 8002658:	fba2 2303 	umull	r2, r3, r2, r3
 800265c:	095b      	lsrs	r3, r3, #5
 800265e:	f003 0207 	and.w	r2, r3, #7
 8002662:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	4422      	add	r2, r4
 800266a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800266c:	e105      	b.n	800287a <UART_SetConfig+0x4d6>
 800266e:	bf00      	nop
 8002670:	40011000 	.word	0x40011000
 8002674:	40011400 	.word	0x40011400
 8002678:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800267c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002680:	2200      	movs	r2, #0
 8002682:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002686:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800268a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800268e:	4642      	mov	r2, r8
 8002690:	464b      	mov	r3, r9
 8002692:	1891      	adds	r1, r2, r2
 8002694:	6239      	str	r1, [r7, #32]
 8002696:	415b      	adcs	r3, r3
 8002698:	627b      	str	r3, [r7, #36]	; 0x24
 800269a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800269e:	4641      	mov	r1, r8
 80026a0:	1854      	adds	r4, r2, r1
 80026a2:	4649      	mov	r1, r9
 80026a4:	eb43 0501 	adc.w	r5, r3, r1
 80026a8:	f04f 0200 	mov.w	r2, #0
 80026ac:	f04f 0300 	mov.w	r3, #0
 80026b0:	00eb      	lsls	r3, r5, #3
 80026b2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80026b6:	00e2      	lsls	r2, r4, #3
 80026b8:	4614      	mov	r4, r2
 80026ba:	461d      	mov	r5, r3
 80026bc:	4643      	mov	r3, r8
 80026be:	18e3      	adds	r3, r4, r3
 80026c0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80026c4:	464b      	mov	r3, r9
 80026c6:	eb45 0303 	adc.w	r3, r5, r3
 80026ca:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80026ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80026d2:	685b      	ldr	r3, [r3, #4]
 80026d4:	2200      	movs	r2, #0
 80026d6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80026da:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80026de:	f04f 0200 	mov.w	r2, #0
 80026e2:	f04f 0300 	mov.w	r3, #0
 80026e6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80026ea:	4629      	mov	r1, r5
 80026ec:	008b      	lsls	r3, r1, #2
 80026ee:	4621      	mov	r1, r4
 80026f0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80026f4:	4621      	mov	r1, r4
 80026f6:	008a      	lsls	r2, r1, #2
 80026f8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80026fc:	f7fd fde8 	bl	80002d0 <__aeabi_uldivmod>
 8002700:	4602      	mov	r2, r0
 8002702:	460b      	mov	r3, r1
 8002704:	4b60      	ldr	r3, [pc, #384]	; (8002888 <UART_SetConfig+0x4e4>)
 8002706:	fba3 2302 	umull	r2, r3, r3, r2
 800270a:	095b      	lsrs	r3, r3, #5
 800270c:	011c      	lsls	r4, r3, #4
 800270e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002712:	2200      	movs	r2, #0
 8002714:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002718:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800271c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8002720:	4642      	mov	r2, r8
 8002722:	464b      	mov	r3, r9
 8002724:	1891      	adds	r1, r2, r2
 8002726:	61b9      	str	r1, [r7, #24]
 8002728:	415b      	adcs	r3, r3
 800272a:	61fb      	str	r3, [r7, #28]
 800272c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002730:	4641      	mov	r1, r8
 8002732:	1851      	adds	r1, r2, r1
 8002734:	6139      	str	r1, [r7, #16]
 8002736:	4649      	mov	r1, r9
 8002738:	414b      	adcs	r3, r1
 800273a:	617b      	str	r3, [r7, #20]
 800273c:	f04f 0200 	mov.w	r2, #0
 8002740:	f04f 0300 	mov.w	r3, #0
 8002744:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002748:	4659      	mov	r1, fp
 800274a:	00cb      	lsls	r3, r1, #3
 800274c:	4651      	mov	r1, sl
 800274e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002752:	4651      	mov	r1, sl
 8002754:	00ca      	lsls	r2, r1, #3
 8002756:	4610      	mov	r0, r2
 8002758:	4619      	mov	r1, r3
 800275a:	4603      	mov	r3, r0
 800275c:	4642      	mov	r2, r8
 800275e:	189b      	adds	r3, r3, r2
 8002760:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002764:	464b      	mov	r3, r9
 8002766:	460a      	mov	r2, r1
 8002768:	eb42 0303 	adc.w	r3, r2, r3
 800276c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002770:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002774:	685b      	ldr	r3, [r3, #4]
 8002776:	2200      	movs	r2, #0
 8002778:	67bb      	str	r3, [r7, #120]	; 0x78
 800277a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800277c:	f04f 0200 	mov.w	r2, #0
 8002780:	f04f 0300 	mov.w	r3, #0
 8002784:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8002788:	4649      	mov	r1, r9
 800278a:	008b      	lsls	r3, r1, #2
 800278c:	4641      	mov	r1, r8
 800278e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002792:	4641      	mov	r1, r8
 8002794:	008a      	lsls	r2, r1, #2
 8002796:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800279a:	f7fd fd99 	bl	80002d0 <__aeabi_uldivmod>
 800279e:	4602      	mov	r2, r0
 80027a0:	460b      	mov	r3, r1
 80027a2:	4b39      	ldr	r3, [pc, #228]	; (8002888 <UART_SetConfig+0x4e4>)
 80027a4:	fba3 1302 	umull	r1, r3, r3, r2
 80027a8:	095b      	lsrs	r3, r3, #5
 80027aa:	2164      	movs	r1, #100	; 0x64
 80027ac:	fb01 f303 	mul.w	r3, r1, r3
 80027b0:	1ad3      	subs	r3, r2, r3
 80027b2:	011b      	lsls	r3, r3, #4
 80027b4:	3332      	adds	r3, #50	; 0x32
 80027b6:	4a34      	ldr	r2, [pc, #208]	; (8002888 <UART_SetConfig+0x4e4>)
 80027b8:	fba2 2303 	umull	r2, r3, r2, r3
 80027bc:	095b      	lsrs	r3, r3, #5
 80027be:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80027c2:	441c      	add	r4, r3
 80027c4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80027c8:	2200      	movs	r2, #0
 80027ca:	673b      	str	r3, [r7, #112]	; 0x70
 80027cc:	677a      	str	r2, [r7, #116]	; 0x74
 80027ce:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80027d2:	4642      	mov	r2, r8
 80027d4:	464b      	mov	r3, r9
 80027d6:	1891      	adds	r1, r2, r2
 80027d8:	60b9      	str	r1, [r7, #8]
 80027da:	415b      	adcs	r3, r3
 80027dc:	60fb      	str	r3, [r7, #12]
 80027de:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80027e2:	4641      	mov	r1, r8
 80027e4:	1851      	adds	r1, r2, r1
 80027e6:	6039      	str	r1, [r7, #0]
 80027e8:	4649      	mov	r1, r9
 80027ea:	414b      	adcs	r3, r1
 80027ec:	607b      	str	r3, [r7, #4]
 80027ee:	f04f 0200 	mov.w	r2, #0
 80027f2:	f04f 0300 	mov.w	r3, #0
 80027f6:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80027fa:	4659      	mov	r1, fp
 80027fc:	00cb      	lsls	r3, r1, #3
 80027fe:	4651      	mov	r1, sl
 8002800:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002804:	4651      	mov	r1, sl
 8002806:	00ca      	lsls	r2, r1, #3
 8002808:	4610      	mov	r0, r2
 800280a:	4619      	mov	r1, r3
 800280c:	4603      	mov	r3, r0
 800280e:	4642      	mov	r2, r8
 8002810:	189b      	adds	r3, r3, r2
 8002812:	66bb      	str	r3, [r7, #104]	; 0x68
 8002814:	464b      	mov	r3, r9
 8002816:	460a      	mov	r2, r1
 8002818:	eb42 0303 	adc.w	r3, r2, r3
 800281c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800281e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002822:	685b      	ldr	r3, [r3, #4]
 8002824:	2200      	movs	r2, #0
 8002826:	663b      	str	r3, [r7, #96]	; 0x60
 8002828:	667a      	str	r2, [r7, #100]	; 0x64
 800282a:	f04f 0200 	mov.w	r2, #0
 800282e:	f04f 0300 	mov.w	r3, #0
 8002832:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8002836:	4649      	mov	r1, r9
 8002838:	008b      	lsls	r3, r1, #2
 800283a:	4641      	mov	r1, r8
 800283c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002840:	4641      	mov	r1, r8
 8002842:	008a      	lsls	r2, r1, #2
 8002844:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8002848:	f7fd fd42 	bl	80002d0 <__aeabi_uldivmod>
 800284c:	4602      	mov	r2, r0
 800284e:	460b      	mov	r3, r1
 8002850:	4b0d      	ldr	r3, [pc, #52]	; (8002888 <UART_SetConfig+0x4e4>)
 8002852:	fba3 1302 	umull	r1, r3, r3, r2
 8002856:	095b      	lsrs	r3, r3, #5
 8002858:	2164      	movs	r1, #100	; 0x64
 800285a:	fb01 f303 	mul.w	r3, r1, r3
 800285e:	1ad3      	subs	r3, r2, r3
 8002860:	011b      	lsls	r3, r3, #4
 8002862:	3332      	adds	r3, #50	; 0x32
 8002864:	4a08      	ldr	r2, [pc, #32]	; (8002888 <UART_SetConfig+0x4e4>)
 8002866:	fba2 2303 	umull	r2, r3, r2, r3
 800286a:	095b      	lsrs	r3, r3, #5
 800286c:	f003 020f 	and.w	r2, r3, #15
 8002870:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	4422      	add	r2, r4
 8002878:	609a      	str	r2, [r3, #8]
}
 800287a:	bf00      	nop
 800287c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8002880:	46bd      	mov	sp, r7
 8002882:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002886:	bf00      	nop
 8002888:	51eb851f 	.word	0x51eb851f

0800288c <__errno>:
 800288c:	4b01      	ldr	r3, [pc, #4]	; (8002894 <__errno+0x8>)
 800288e:	6818      	ldr	r0, [r3, #0]
 8002890:	4770      	bx	lr
 8002892:	bf00      	nop
 8002894:	20000010 	.word	0x20000010

08002898 <__libc_init_array>:
 8002898:	b570      	push	{r4, r5, r6, lr}
 800289a:	4d0d      	ldr	r5, [pc, #52]	; (80028d0 <__libc_init_array+0x38>)
 800289c:	4c0d      	ldr	r4, [pc, #52]	; (80028d4 <__libc_init_array+0x3c>)
 800289e:	1b64      	subs	r4, r4, r5
 80028a0:	10a4      	asrs	r4, r4, #2
 80028a2:	2600      	movs	r6, #0
 80028a4:	42a6      	cmp	r6, r4
 80028a6:	d109      	bne.n	80028bc <__libc_init_array+0x24>
 80028a8:	4d0b      	ldr	r5, [pc, #44]	; (80028d8 <__libc_init_array+0x40>)
 80028aa:	4c0c      	ldr	r4, [pc, #48]	; (80028dc <__libc_init_array+0x44>)
 80028ac:	f001 f824 	bl	80038f8 <_init>
 80028b0:	1b64      	subs	r4, r4, r5
 80028b2:	10a4      	asrs	r4, r4, #2
 80028b4:	2600      	movs	r6, #0
 80028b6:	42a6      	cmp	r6, r4
 80028b8:	d105      	bne.n	80028c6 <__libc_init_array+0x2e>
 80028ba:	bd70      	pop	{r4, r5, r6, pc}
 80028bc:	f855 3b04 	ldr.w	r3, [r5], #4
 80028c0:	4798      	blx	r3
 80028c2:	3601      	adds	r6, #1
 80028c4:	e7ee      	b.n	80028a4 <__libc_init_array+0xc>
 80028c6:	f855 3b04 	ldr.w	r3, [r5], #4
 80028ca:	4798      	blx	r3
 80028cc:	3601      	adds	r6, #1
 80028ce:	e7f2      	b.n	80028b6 <__libc_init_array+0x1e>
 80028d0:	08003a9c 	.word	0x08003a9c
 80028d4:	08003a9c 	.word	0x08003a9c
 80028d8:	08003a9c 	.word	0x08003a9c
 80028dc:	08003aa0 	.word	0x08003aa0

080028e0 <memset>:
 80028e0:	4402      	add	r2, r0
 80028e2:	4603      	mov	r3, r0
 80028e4:	4293      	cmp	r3, r2
 80028e6:	d100      	bne.n	80028ea <memset+0xa>
 80028e8:	4770      	bx	lr
 80028ea:	f803 1b01 	strb.w	r1, [r3], #1
 80028ee:	e7f9      	b.n	80028e4 <memset+0x4>

080028f0 <iprintf>:
 80028f0:	b40f      	push	{r0, r1, r2, r3}
 80028f2:	4b0a      	ldr	r3, [pc, #40]	; (800291c <iprintf+0x2c>)
 80028f4:	b513      	push	{r0, r1, r4, lr}
 80028f6:	681c      	ldr	r4, [r3, #0]
 80028f8:	b124      	cbz	r4, 8002904 <iprintf+0x14>
 80028fa:	69a3      	ldr	r3, [r4, #24]
 80028fc:	b913      	cbnz	r3, 8002904 <iprintf+0x14>
 80028fe:	4620      	mov	r0, r4
 8002900:	f000 fa5e 	bl	8002dc0 <__sinit>
 8002904:	ab05      	add	r3, sp, #20
 8002906:	9a04      	ldr	r2, [sp, #16]
 8002908:	68a1      	ldr	r1, [r4, #8]
 800290a:	9301      	str	r3, [sp, #4]
 800290c:	4620      	mov	r0, r4
 800290e:	f000 fc67 	bl	80031e0 <_vfiprintf_r>
 8002912:	b002      	add	sp, #8
 8002914:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002918:	b004      	add	sp, #16
 800291a:	4770      	bx	lr
 800291c:	20000010 	.word	0x20000010

08002920 <_puts_r>:
 8002920:	b570      	push	{r4, r5, r6, lr}
 8002922:	460e      	mov	r6, r1
 8002924:	4605      	mov	r5, r0
 8002926:	b118      	cbz	r0, 8002930 <_puts_r+0x10>
 8002928:	6983      	ldr	r3, [r0, #24]
 800292a:	b90b      	cbnz	r3, 8002930 <_puts_r+0x10>
 800292c:	f000 fa48 	bl	8002dc0 <__sinit>
 8002930:	69ab      	ldr	r3, [r5, #24]
 8002932:	68ac      	ldr	r4, [r5, #8]
 8002934:	b913      	cbnz	r3, 800293c <_puts_r+0x1c>
 8002936:	4628      	mov	r0, r5
 8002938:	f000 fa42 	bl	8002dc0 <__sinit>
 800293c:	4b2c      	ldr	r3, [pc, #176]	; (80029f0 <_puts_r+0xd0>)
 800293e:	429c      	cmp	r4, r3
 8002940:	d120      	bne.n	8002984 <_puts_r+0x64>
 8002942:	686c      	ldr	r4, [r5, #4]
 8002944:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002946:	07db      	lsls	r3, r3, #31
 8002948:	d405      	bmi.n	8002956 <_puts_r+0x36>
 800294a:	89a3      	ldrh	r3, [r4, #12]
 800294c:	0598      	lsls	r0, r3, #22
 800294e:	d402      	bmi.n	8002956 <_puts_r+0x36>
 8002950:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002952:	f000 fad3 	bl	8002efc <__retarget_lock_acquire_recursive>
 8002956:	89a3      	ldrh	r3, [r4, #12]
 8002958:	0719      	lsls	r1, r3, #28
 800295a:	d51d      	bpl.n	8002998 <_puts_r+0x78>
 800295c:	6923      	ldr	r3, [r4, #16]
 800295e:	b1db      	cbz	r3, 8002998 <_puts_r+0x78>
 8002960:	3e01      	subs	r6, #1
 8002962:	68a3      	ldr	r3, [r4, #8]
 8002964:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8002968:	3b01      	subs	r3, #1
 800296a:	60a3      	str	r3, [r4, #8]
 800296c:	bb39      	cbnz	r1, 80029be <_puts_r+0x9e>
 800296e:	2b00      	cmp	r3, #0
 8002970:	da38      	bge.n	80029e4 <_puts_r+0xc4>
 8002972:	4622      	mov	r2, r4
 8002974:	210a      	movs	r1, #10
 8002976:	4628      	mov	r0, r5
 8002978:	f000 f848 	bl	8002a0c <__swbuf_r>
 800297c:	3001      	adds	r0, #1
 800297e:	d011      	beq.n	80029a4 <_puts_r+0x84>
 8002980:	250a      	movs	r5, #10
 8002982:	e011      	b.n	80029a8 <_puts_r+0x88>
 8002984:	4b1b      	ldr	r3, [pc, #108]	; (80029f4 <_puts_r+0xd4>)
 8002986:	429c      	cmp	r4, r3
 8002988:	d101      	bne.n	800298e <_puts_r+0x6e>
 800298a:	68ac      	ldr	r4, [r5, #8]
 800298c:	e7da      	b.n	8002944 <_puts_r+0x24>
 800298e:	4b1a      	ldr	r3, [pc, #104]	; (80029f8 <_puts_r+0xd8>)
 8002990:	429c      	cmp	r4, r3
 8002992:	bf08      	it	eq
 8002994:	68ec      	ldreq	r4, [r5, #12]
 8002996:	e7d5      	b.n	8002944 <_puts_r+0x24>
 8002998:	4621      	mov	r1, r4
 800299a:	4628      	mov	r0, r5
 800299c:	f000 f888 	bl	8002ab0 <__swsetup_r>
 80029a0:	2800      	cmp	r0, #0
 80029a2:	d0dd      	beq.n	8002960 <_puts_r+0x40>
 80029a4:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 80029a8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80029aa:	07da      	lsls	r2, r3, #31
 80029ac:	d405      	bmi.n	80029ba <_puts_r+0x9a>
 80029ae:	89a3      	ldrh	r3, [r4, #12]
 80029b0:	059b      	lsls	r3, r3, #22
 80029b2:	d402      	bmi.n	80029ba <_puts_r+0x9a>
 80029b4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80029b6:	f000 faa2 	bl	8002efe <__retarget_lock_release_recursive>
 80029ba:	4628      	mov	r0, r5
 80029bc:	bd70      	pop	{r4, r5, r6, pc}
 80029be:	2b00      	cmp	r3, #0
 80029c0:	da04      	bge.n	80029cc <_puts_r+0xac>
 80029c2:	69a2      	ldr	r2, [r4, #24]
 80029c4:	429a      	cmp	r2, r3
 80029c6:	dc06      	bgt.n	80029d6 <_puts_r+0xb6>
 80029c8:	290a      	cmp	r1, #10
 80029ca:	d004      	beq.n	80029d6 <_puts_r+0xb6>
 80029cc:	6823      	ldr	r3, [r4, #0]
 80029ce:	1c5a      	adds	r2, r3, #1
 80029d0:	6022      	str	r2, [r4, #0]
 80029d2:	7019      	strb	r1, [r3, #0]
 80029d4:	e7c5      	b.n	8002962 <_puts_r+0x42>
 80029d6:	4622      	mov	r2, r4
 80029d8:	4628      	mov	r0, r5
 80029da:	f000 f817 	bl	8002a0c <__swbuf_r>
 80029de:	3001      	adds	r0, #1
 80029e0:	d1bf      	bne.n	8002962 <_puts_r+0x42>
 80029e2:	e7df      	b.n	80029a4 <_puts_r+0x84>
 80029e4:	6823      	ldr	r3, [r4, #0]
 80029e6:	250a      	movs	r5, #10
 80029e8:	1c5a      	adds	r2, r3, #1
 80029ea:	6022      	str	r2, [r4, #0]
 80029ec:	701d      	strb	r5, [r3, #0]
 80029ee:	e7db      	b.n	80029a8 <_puts_r+0x88>
 80029f0:	08003a20 	.word	0x08003a20
 80029f4:	08003a40 	.word	0x08003a40
 80029f8:	08003a00 	.word	0x08003a00

080029fc <puts>:
 80029fc:	4b02      	ldr	r3, [pc, #8]	; (8002a08 <puts+0xc>)
 80029fe:	4601      	mov	r1, r0
 8002a00:	6818      	ldr	r0, [r3, #0]
 8002a02:	f7ff bf8d 	b.w	8002920 <_puts_r>
 8002a06:	bf00      	nop
 8002a08:	20000010 	.word	0x20000010

08002a0c <__swbuf_r>:
 8002a0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a0e:	460e      	mov	r6, r1
 8002a10:	4614      	mov	r4, r2
 8002a12:	4605      	mov	r5, r0
 8002a14:	b118      	cbz	r0, 8002a1e <__swbuf_r+0x12>
 8002a16:	6983      	ldr	r3, [r0, #24]
 8002a18:	b90b      	cbnz	r3, 8002a1e <__swbuf_r+0x12>
 8002a1a:	f000 f9d1 	bl	8002dc0 <__sinit>
 8002a1e:	4b21      	ldr	r3, [pc, #132]	; (8002aa4 <__swbuf_r+0x98>)
 8002a20:	429c      	cmp	r4, r3
 8002a22:	d12b      	bne.n	8002a7c <__swbuf_r+0x70>
 8002a24:	686c      	ldr	r4, [r5, #4]
 8002a26:	69a3      	ldr	r3, [r4, #24]
 8002a28:	60a3      	str	r3, [r4, #8]
 8002a2a:	89a3      	ldrh	r3, [r4, #12]
 8002a2c:	071a      	lsls	r2, r3, #28
 8002a2e:	d52f      	bpl.n	8002a90 <__swbuf_r+0x84>
 8002a30:	6923      	ldr	r3, [r4, #16]
 8002a32:	b36b      	cbz	r3, 8002a90 <__swbuf_r+0x84>
 8002a34:	6923      	ldr	r3, [r4, #16]
 8002a36:	6820      	ldr	r0, [r4, #0]
 8002a38:	1ac0      	subs	r0, r0, r3
 8002a3a:	6963      	ldr	r3, [r4, #20]
 8002a3c:	b2f6      	uxtb	r6, r6
 8002a3e:	4283      	cmp	r3, r0
 8002a40:	4637      	mov	r7, r6
 8002a42:	dc04      	bgt.n	8002a4e <__swbuf_r+0x42>
 8002a44:	4621      	mov	r1, r4
 8002a46:	4628      	mov	r0, r5
 8002a48:	f000 f926 	bl	8002c98 <_fflush_r>
 8002a4c:	bb30      	cbnz	r0, 8002a9c <__swbuf_r+0x90>
 8002a4e:	68a3      	ldr	r3, [r4, #8]
 8002a50:	3b01      	subs	r3, #1
 8002a52:	60a3      	str	r3, [r4, #8]
 8002a54:	6823      	ldr	r3, [r4, #0]
 8002a56:	1c5a      	adds	r2, r3, #1
 8002a58:	6022      	str	r2, [r4, #0]
 8002a5a:	701e      	strb	r6, [r3, #0]
 8002a5c:	6963      	ldr	r3, [r4, #20]
 8002a5e:	3001      	adds	r0, #1
 8002a60:	4283      	cmp	r3, r0
 8002a62:	d004      	beq.n	8002a6e <__swbuf_r+0x62>
 8002a64:	89a3      	ldrh	r3, [r4, #12]
 8002a66:	07db      	lsls	r3, r3, #31
 8002a68:	d506      	bpl.n	8002a78 <__swbuf_r+0x6c>
 8002a6a:	2e0a      	cmp	r6, #10
 8002a6c:	d104      	bne.n	8002a78 <__swbuf_r+0x6c>
 8002a6e:	4621      	mov	r1, r4
 8002a70:	4628      	mov	r0, r5
 8002a72:	f000 f911 	bl	8002c98 <_fflush_r>
 8002a76:	b988      	cbnz	r0, 8002a9c <__swbuf_r+0x90>
 8002a78:	4638      	mov	r0, r7
 8002a7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002a7c:	4b0a      	ldr	r3, [pc, #40]	; (8002aa8 <__swbuf_r+0x9c>)
 8002a7e:	429c      	cmp	r4, r3
 8002a80:	d101      	bne.n	8002a86 <__swbuf_r+0x7a>
 8002a82:	68ac      	ldr	r4, [r5, #8]
 8002a84:	e7cf      	b.n	8002a26 <__swbuf_r+0x1a>
 8002a86:	4b09      	ldr	r3, [pc, #36]	; (8002aac <__swbuf_r+0xa0>)
 8002a88:	429c      	cmp	r4, r3
 8002a8a:	bf08      	it	eq
 8002a8c:	68ec      	ldreq	r4, [r5, #12]
 8002a8e:	e7ca      	b.n	8002a26 <__swbuf_r+0x1a>
 8002a90:	4621      	mov	r1, r4
 8002a92:	4628      	mov	r0, r5
 8002a94:	f000 f80c 	bl	8002ab0 <__swsetup_r>
 8002a98:	2800      	cmp	r0, #0
 8002a9a:	d0cb      	beq.n	8002a34 <__swbuf_r+0x28>
 8002a9c:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8002aa0:	e7ea      	b.n	8002a78 <__swbuf_r+0x6c>
 8002aa2:	bf00      	nop
 8002aa4:	08003a20 	.word	0x08003a20
 8002aa8:	08003a40 	.word	0x08003a40
 8002aac:	08003a00 	.word	0x08003a00

08002ab0 <__swsetup_r>:
 8002ab0:	4b32      	ldr	r3, [pc, #200]	; (8002b7c <__swsetup_r+0xcc>)
 8002ab2:	b570      	push	{r4, r5, r6, lr}
 8002ab4:	681d      	ldr	r5, [r3, #0]
 8002ab6:	4606      	mov	r6, r0
 8002ab8:	460c      	mov	r4, r1
 8002aba:	b125      	cbz	r5, 8002ac6 <__swsetup_r+0x16>
 8002abc:	69ab      	ldr	r3, [r5, #24]
 8002abe:	b913      	cbnz	r3, 8002ac6 <__swsetup_r+0x16>
 8002ac0:	4628      	mov	r0, r5
 8002ac2:	f000 f97d 	bl	8002dc0 <__sinit>
 8002ac6:	4b2e      	ldr	r3, [pc, #184]	; (8002b80 <__swsetup_r+0xd0>)
 8002ac8:	429c      	cmp	r4, r3
 8002aca:	d10f      	bne.n	8002aec <__swsetup_r+0x3c>
 8002acc:	686c      	ldr	r4, [r5, #4]
 8002ace:	89a3      	ldrh	r3, [r4, #12]
 8002ad0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8002ad4:	0719      	lsls	r1, r3, #28
 8002ad6:	d42c      	bmi.n	8002b32 <__swsetup_r+0x82>
 8002ad8:	06dd      	lsls	r5, r3, #27
 8002ada:	d411      	bmi.n	8002b00 <__swsetup_r+0x50>
 8002adc:	2309      	movs	r3, #9
 8002ade:	6033      	str	r3, [r6, #0]
 8002ae0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8002ae4:	81a3      	strh	r3, [r4, #12]
 8002ae6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002aea:	e03e      	b.n	8002b6a <__swsetup_r+0xba>
 8002aec:	4b25      	ldr	r3, [pc, #148]	; (8002b84 <__swsetup_r+0xd4>)
 8002aee:	429c      	cmp	r4, r3
 8002af0:	d101      	bne.n	8002af6 <__swsetup_r+0x46>
 8002af2:	68ac      	ldr	r4, [r5, #8]
 8002af4:	e7eb      	b.n	8002ace <__swsetup_r+0x1e>
 8002af6:	4b24      	ldr	r3, [pc, #144]	; (8002b88 <__swsetup_r+0xd8>)
 8002af8:	429c      	cmp	r4, r3
 8002afa:	bf08      	it	eq
 8002afc:	68ec      	ldreq	r4, [r5, #12]
 8002afe:	e7e6      	b.n	8002ace <__swsetup_r+0x1e>
 8002b00:	0758      	lsls	r0, r3, #29
 8002b02:	d512      	bpl.n	8002b2a <__swsetup_r+0x7a>
 8002b04:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002b06:	b141      	cbz	r1, 8002b1a <__swsetup_r+0x6a>
 8002b08:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002b0c:	4299      	cmp	r1, r3
 8002b0e:	d002      	beq.n	8002b16 <__swsetup_r+0x66>
 8002b10:	4630      	mov	r0, r6
 8002b12:	f000 fa5b 	bl	8002fcc <_free_r>
 8002b16:	2300      	movs	r3, #0
 8002b18:	6363      	str	r3, [r4, #52]	; 0x34
 8002b1a:	89a3      	ldrh	r3, [r4, #12]
 8002b1c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8002b20:	81a3      	strh	r3, [r4, #12]
 8002b22:	2300      	movs	r3, #0
 8002b24:	6063      	str	r3, [r4, #4]
 8002b26:	6923      	ldr	r3, [r4, #16]
 8002b28:	6023      	str	r3, [r4, #0]
 8002b2a:	89a3      	ldrh	r3, [r4, #12]
 8002b2c:	f043 0308 	orr.w	r3, r3, #8
 8002b30:	81a3      	strh	r3, [r4, #12]
 8002b32:	6923      	ldr	r3, [r4, #16]
 8002b34:	b94b      	cbnz	r3, 8002b4a <__swsetup_r+0x9a>
 8002b36:	89a3      	ldrh	r3, [r4, #12]
 8002b38:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8002b3c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002b40:	d003      	beq.n	8002b4a <__swsetup_r+0x9a>
 8002b42:	4621      	mov	r1, r4
 8002b44:	4630      	mov	r0, r6
 8002b46:	f000 fa01 	bl	8002f4c <__smakebuf_r>
 8002b4a:	89a0      	ldrh	r0, [r4, #12]
 8002b4c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8002b50:	f010 0301 	ands.w	r3, r0, #1
 8002b54:	d00a      	beq.n	8002b6c <__swsetup_r+0xbc>
 8002b56:	2300      	movs	r3, #0
 8002b58:	60a3      	str	r3, [r4, #8]
 8002b5a:	6963      	ldr	r3, [r4, #20]
 8002b5c:	425b      	negs	r3, r3
 8002b5e:	61a3      	str	r3, [r4, #24]
 8002b60:	6923      	ldr	r3, [r4, #16]
 8002b62:	b943      	cbnz	r3, 8002b76 <__swsetup_r+0xc6>
 8002b64:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8002b68:	d1ba      	bne.n	8002ae0 <__swsetup_r+0x30>
 8002b6a:	bd70      	pop	{r4, r5, r6, pc}
 8002b6c:	0781      	lsls	r1, r0, #30
 8002b6e:	bf58      	it	pl
 8002b70:	6963      	ldrpl	r3, [r4, #20]
 8002b72:	60a3      	str	r3, [r4, #8]
 8002b74:	e7f4      	b.n	8002b60 <__swsetup_r+0xb0>
 8002b76:	2000      	movs	r0, #0
 8002b78:	e7f7      	b.n	8002b6a <__swsetup_r+0xba>
 8002b7a:	bf00      	nop
 8002b7c:	20000010 	.word	0x20000010
 8002b80:	08003a20 	.word	0x08003a20
 8002b84:	08003a40 	.word	0x08003a40
 8002b88:	08003a00 	.word	0x08003a00

08002b8c <__sflush_r>:
 8002b8c:	898a      	ldrh	r2, [r1, #12]
 8002b8e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002b92:	4605      	mov	r5, r0
 8002b94:	0710      	lsls	r0, r2, #28
 8002b96:	460c      	mov	r4, r1
 8002b98:	d458      	bmi.n	8002c4c <__sflush_r+0xc0>
 8002b9a:	684b      	ldr	r3, [r1, #4]
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	dc05      	bgt.n	8002bac <__sflush_r+0x20>
 8002ba0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	dc02      	bgt.n	8002bac <__sflush_r+0x20>
 8002ba6:	2000      	movs	r0, #0
 8002ba8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002bac:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002bae:	2e00      	cmp	r6, #0
 8002bb0:	d0f9      	beq.n	8002ba6 <__sflush_r+0x1a>
 8002bb2:	2300      	movs	r3, #0
 8002bb4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8002bb8:	682f      	ldr	r7, [r5, #0]
 8002bba:	602b      	str	r3, [r5, #0]
 8002bbc:	d032      	beq.n	8002c24 <__sflush_r+0x98>
 8002bbe:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8002bc0:	89a3      	ldrh	r3, [r4, #12]
 8002bc2:	075a      	lsls	r2, r3, #29
 8002bc4:	d505      	bpl.n	8002bd2 <__sflush_r+0x46>
 8002bc6:	6863      	ldr	r3, [r4, #4]
 8002bc8:	1ac0      	subs	r0, r0, r3
 8002bca:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002bcc:	b10b      	cbz	r3, 8002bd2 <__sflush_r+0x46>
 8002bce:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002bd0:	1ac0      	subs	r0, r0, r3
 8002bd2:	2300      	movs	r3, #0
 8002bd4:	4602      	mov	r2, r0
 8002bd6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002bd8:	6a21      	ldr	r1, [r4, #32]
 8002bda:	4628      	mov	r0, r5
 8002bdc:	47b0      	blx	r6
 8002bde:	1c43      	adds	r3, r0, #1
 8002be0:	89a3      	ldrh	r3, [r4, #12]
 8002be2:	d106      	bne.n	8002bf2 <__sflush_r+0x66>
 8002be4:	6829      	ldr	r1, [r5, #0]
 8002be6:	291d      	cmp	r1, #29
 8002be8:	d82c      	bhi.n	8002c44 <__sflush_r+0xb8>
 8002bea:	4a2a      	ldr	r2, [pc, #168]	; (8002c94 <__sflush_r+0x108>)
 8002bec:	40ca      	lsrs	r2, r1
 8002bee:	07d6      	lsls	r6, r2, #31
 8002bf0:	d528      	bpl.n	8002c44 <__sflush_r+0xb8>
 8002bf2:	2200      	movs	r2, #0
 8002bf4:	6062      	str	r2, [r4, #4]
 8002bf6:	04d9      	lsls	r1, r3, #19
 8002bf8:	6922      	ldr	r2, [r4, #16]
 8002bfa:	6022      	str	r2, [r4, #0]
 8002bfc:	d504      	bpl.n	8002c08 <__sflush_r+0x7c>
 8002bfe:	1c42      	adds	r2, r0, #1
 8002c00:	d101      	bne.n	8002c06 <__sflush_r+0x7a>
 8002c02:	682b      	ldr	r3, [r5, #0]
 8002c04:	b903      	cbnz	r3, 8002c08 <__sflush_r+0x7c>
 8002c06:	6560      	str	r0, [r4, #84]	; 0x54
 8002c08:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002c0a:	602f      	str	r7, [r5, #0]
 8002c0c:	2900      	cmp	r1, #0
 8002c0e:	d0ca      	beq.n	8002ba6 <__sflush_r+0x1a>
 8002c10:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002c14:	4299      	cmp	r1, r3
 8002c16:	d002      	beq.n	8002c1e <__sflush_r+0x92>
 8002c18:	4628      	mov	r0, r5
 8002c1a:	f000 f9d7 	bl	8002fcc <_free_r>
 8002c1e:	2000      	movs	r0, #0
 8002c20:	6360      	str	r0, [r4, #52]	; 0x34
 8002c22:	e7c1      	b.n	8002ba8 <__sflush_r+0x1c>
 8002c24:	6a21      	ldr	r1, [r4, #32]
 8002c26:	2301      	movs	r3, #1
 8002c28:	4628      	mov	r0, r5
 8002c2a:	47b0      	blx	r6
 8002c2c:	1c41      	adds	r1, r0, #1
 8002c2e:	d1c7      	bne.n	8002bc0 <__sflush_r+0x34>
 8002c30:	682b      	ldr	r3, [r5, #0]
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d0c4      	beq.n	8002bc0 <__sflush_r+0x34>
 8002c36:	2b1d      	cmp	r3, #29
 8002c38:	d001      	beq.n	8002c3e <__sflush_r+0xb2>
 8002c3a:	2b16      	cmp	r3, #22
 8002c3c:	d101      	bne.n	8002c42 <__sflush_r+0xb6>
 8002c3e:	602f      	str	r7, [r5, #0]
 8002c40:	e7b1      	b.n	8002ba6 <__sflush_r+0x1a>
 8002c42:	89a3      	ldrh	r3, [r4, #12]
 8002c44:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002c48:	81a3      	strh	r3, [r4, #12]
 8002c4a:	e7ad      	b.n	8002ba8 <__sflush_r+0x1c>
 8002c4c:	690f      	ldr	r7, [r1, #16]
 8002c4e:	2f00      	cmp	r7, #0
 8002c50:	d0a9      	beq.n	8002ba6 <__sflush_r+0x1a>
 8002c52:	0793      	lsls	r3, r2, #30
 8002c54:	680e      	ldr	r6, [r1, #0]
 8002c56:	bf08      	it	eq
 8002c58:	694b      	ldreq	r3, [r1, #20]
 8002c5a:	600f      	str	r7, [r1, #0]
 8002c5c:	bf18      	it	ne
 8002c5e:	2300      	movne	r3, #0
 8002c60:	eba6 0807 	sub.w	r8, r6, r7
 8002c64:	608b      	str	r3, [r1, #8]
 8002c66:	f1b8 0f00 	cmp.w	r8, #0
 8002c6a:	dd9c      	ble.n	8002ba6 <__sflush_r+0x1a>
 8002c6c:	6a21      	ldr	r1, [r4, #32]
 8002c6e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8002c70:	4643      	mov	r3, r8
 8002c72:	463a      	mov	r2, r7
 8002c74:	4628      	mov	r0, r5
 8002c76:	47b0      	blx	r6
 8002c78:	2800      	cmp	r0, #0
 8002c7a:	dc06      	bgt.n	8002c8a <__sflush_r+0xfe>
 8002c7c:	89a3      	ldrh	r3, [r4, #12]
 8002c7e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002c82:	81a3      	strh	r3, [r4, #12]
 8002c84:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002c88:	e78e      	b.n	8002ba8 <__sflush_r+0x1c>
 8002c8a:	4407      	add	r7, r0
 8002c8c:	eba8 0800 	sub.w	r8, r8, r0
 8002c90:	e7e9      	b.n	8002c66 <__sflush_r+0xda>
 8002c92:	bf00      	nop
 8002c94:	20400001 	.word	0x20400001

08002c98 <_fflush_r>:
 8002c98:	b538      	push	{r3, r4, r5, lr}
 8002c9a:	690b      	ldr	r3, [r1, #16]
 8002c9c:	4605      	mov	r5, r0
 8002c9e:	460c      	mov	r4, r1
 8002ca0:	b913      	cbnz	r3, 8002ca8 <_fflush_r+0x10>
 8002ca2:	2500      	movs	r5, #0
 8002ca4:	4628      	mov	r0, r5
 8002ca6:	bd38      	pop	{r3, r4, r5, pc}
 8002ca8:	b118      	cbz	r0, 8002cb2 <_fflush_r+0x1a>
 8002caa:	6983      	ldr	r3, [r0, #24]
 8002cac:	b90b      	cbnz	r3, 8002cb2 <_fflush_r+0x1a>
 8002cae:	f000 f887 	bl	8002dc0 <__sinit>
 8002cb2:	4b14      	ldr	r3, [pc, #80]	; (8002d04 <_fflush_r+0x6c>)
 8002cb4:	429c      	cmp	r4, r3
 8002cb6:	d11b      	bne.n	8002cf0 <_fflush_r+0x58>
 8002cb8:	686c      	ldr	r4, [r5, #4]
 8002cba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d0ef      	beq.n	8002ca2 <_fflush_r+0xa>
 8002cc2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8002cc4:	07d0      	lsls	r0, r2, #31
 8002cc6:	d404      	bmi.n	8002cd2 <_fflush_r+0x3a>
 8002cc8:	0599      	lsls	r1, r3, #22
 8002cca:	d402      	bmi.n	8002cd2 <_fflush_r+0x3a>
 8002ccc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002cce:	f000 f915 	bl	8002efc <__retarget_lock_acquire_recursive>
 8002cd2:	4628      	mov	r0, r5
 8002cd4:	4621      	mov	r1, r4
 8002cd6:	f7ff ff59 	bl	8002b8c <__sflush_r>
 8002cda:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002cdc:	07da      	lsls	r2, r3, #31
 8002cde:	4605      	mov	r5, r0
 8002ce0:	d4e0      	bmi.n	8002ca4 <_fflush_r+0xc>
 8002ce2:	89a3      	ldrh	r3, [r4, #12]
 8002ce4:	059b      	lsls	r3, r3, #22
 8002ce6:	d4dd      	bmi.n	8002ca4 <_fflush_r+0xc>
 8002ce8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002cea:	f000 f908 	bl	8002efe <__retarget_lock_release_recursive>
 8002cee:	e7d9      	b.n	8002ca4 <_fflush_r+0xc>
 8002cf0:	4b05      	ldr	r3, [pc, #20]	; (8002d08 <_fflush_r+0x70>)
 8002cf2:	429c      	cmp	r4, r3
 8002cf4:	d101      	bne.n	8002cfa <_fflush_r+0x62>
 8002cf6:	68ac      	ldr	r4, [r5, #8]
 8002cf8:	e7df      	b.n	8002cba <_fflush_r+0x22>
 8002cfa:	4b04      	ldr	r3, [pc, #16]	; (8002d0c <_fflush_r+0x74>)
 8002cfc:	429c      	cmp	r4, r3
 8002cfe:	bf08      	it	eq
 8002d00:	68ec      	ldreq	r4, [r5, #12]
 8002d02:	e7da      	b.n	8002cba <_fflush_r+0x22>
 8002d04:	08003a20 	.word	0x08003a20
 8002d08:	08003a40 	.word	0x08003a40
 8002d0c:	08003a00 	.word	0x08003a00

08002d10 <std>:
 8002d10:	2300      	movs	r3, #0
 8002d12:	b510      	push	{r4, lr}
 8002d14:	4604      	mov	r4, r0
 8002d16:	e9c0 3300 	strd	r3, r3, [r0]
 8002d1a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8002d1e:	6083      	str	r3, [r0, #8]
 8002d20:	8181      	strh	r1, [r0, #12]
 8002d22:	6643      	str	r3, [r0, #100]	; 0x64
 8002d24:	81c2      	strh	r2, [r0, #14]
 8002d26:	6183      	str	r3, [r0, #24]
 8002d28:	4619      	mov	r1, r3
 8002d2a:	2208      	movs	r2, #8
 8002d2c:	305c      	adds	r0, #92	; 0x5c
 8002d2e:	f7ff fdd7 	bl	80028e0 <memset>
 8002d32:	4b05      	ldr	r3, [pc, #20]	; (8002d48 <std+0x38>)
 8002d34:	6263      	str	r3, [r4, #36]	; 0x24
 8002d36:	4b05      	ldr	r3, [pc, #20]	; (8002d4c <std+0x3c>)
 8002d38:	62a3      	str	r3, [r4, #40]	; 0x28
 8002d3a:	4b05      	ldr	r3, [pc, #20]	; (8002d50 <std+0x40>)
 8002d3c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002d3e:	4b05      	ldr	r3, [pc, #20]	; (8002d54 <std+0x44>)
 8002d40:	6224      	str	r4, [r4, #32]
 8002d42:	6323      	str	r3, [r4, #48]	; 0x30
 8002d44:	bd10      	pop	{r4, pc}
 8002d46:	bf00      	nop
 8002d48:	08003789 	.word	0x08003789
 8002d4c:	080037ab 	.word	0x080037ab
 8002d50:	080037e3 	.word	0x080037e3
 8002d54:	08003807 	.word	0x08003807

08002d58 <_cleanup_r>:
 8002d58:	4901      	ldr	r1, [pc, #4]	; (8002d60 <_cleanup_r+0x8>)
 8002d5a:	f000 b8af 	b.w	8002ebc <_fwalk_reent>
 8002d5e:	bf00      	nop
 8002d60:	08002c99 	.word	0x08002c99

08002d64 <__sfmoreglue>:
 8002d64:	b570      	push	{r4, r5, r6, lr}
 8002d66:	2268      	movs	r2, #104	; 0x68
 8002d68:	1e4d      	subs	r5, r1, #1
 8002d6a:	4355      	muls	r5, r2
 8002d6c:	460e      	mov	r6, r1
 8002d6e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8002d72:	f000 f997 	bl	80030a4 <_malloc_r>
 8002d76:	4604      	mov	r4, r0
 8002d78:	b140      	cbz	r0, 8002d8c <__sfmoreglue+0x28>
 8002d7a:	2100      	movs	r1, #0
 8002d7c:	e9c0 1600 	strd	r1, r6, [r0]
 8002d80:	300c      	adds	r0, #12
 8002d82:	60a0      	str	r0, [r4, #8]
 8002d84:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8002d88:	f7ff fdaa 	bl	80028e0 <memset>
 8002d8c:	4620      	mov	r0, r4
 8002d8e:	bd70      	pop	{r4, r5, r6, pc}

08002d90 <__sfp_lock_acquire>:
 8002d90:	4801      	ldr	r0, [pc, #4]	; (8002d98 <__sfp_lock_acquire+0x8>)
 8002d92:	f000 b8b3 	b.w	8002efc <__retarget_lock_acquire_recursive>
 8002d96:	bf00      	nop
 8002d98:	200003ed 	.word	0x200003ed

08002d9c <__sfp_lock_release>:
 8002d9c:	4801      	ldr	r0, [pc, #4]	; (8002da4 <__sfp_lock_release+0x8>)
 8002d9e:	f000 b8ae 	b.w	8002efe <__retarget_lock_release_recursive>
 8002da2:	bf00      	nop
 8002da4:	200003ed 	.word	0x200003ed

08002da8 <__sinit_lock_acquire>:
 8002da8:	4801      	ldr	r0, [pc, #4]	; (8002db0 <__sinit_lock_acquire+0x8>)
 8002daa:	f000 b8a7 	b.w	8002efc <__retarget_lock_acquire_recursive>
 8002dae:	bf00      	nop
 8002db0:	200003ee 	.word	0x200003ee

08002db4 <__sinit_lock_release>:
 8002db4:	4801      	ldr	r0, [pc, #4]	; (8002dbc <__sinit_lock_release+0x8>)
 8002db6:	f000 b8a2 	b.w	8002efe <__retarget_lock_release_recursive>
 8002dba:	bf00      	nop
 8002dbc:	200003ee 	.word	0x200003ee

08002dc0 <__sinit>:
 8002dc0:	b510      	push	{r4, lr}
 8002dc2:	4604      	mov	r4, r0
 8002dc4:	f7ff fff0 	bl	8002da8 <__sinit_lock_acquire>
 8002dc8:	69a3      	ldr	r3, [r4, #24]
 8002dca:	b11b      	cbz	r3, 8002dd4 <__sinit+0x14>
 8002dcc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002dd0:	f7ff bff0 	b.w	8002db4 <__sinit_lock_release>
 8002dd4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8002dd8:	6523      	str	r3, [r4, #80]	; 0x50
 8002dda:	4b13      	ldr	r3, [pc, #76]	; (8002e28 <__sinit+0x68>)
 8002ddc:	4a13      	ldr	r2, [pc, #76]	; (8002e2c <__sinit+0x6c>)
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	62a2      	str	r2, [r4, #40]	; 0x28
 8002de2:	42a3      	cmp	r3, r4
 8002de4:	bf04      	itt	eq
 8002de6:	2301      	moveq	r3, #1
 8002de8:	61a3      	streq	r3, [r4, #24]
 8002dea:	4620      	mov	r0, r4
 8002dec:	f000 f820 	bl	8002e30 <__sfp>
 8002df0:	6060      	str	r0, [r4, #4]
 8002df2:	4620      	mov	r0, r4
 8002df4:	f000 f81c 	bl	8002e30 <__sfp>
 8002df8:	60a0      	str	r0, [r4, #8]
 8002dfa:	4620      	mov	r0, r4
 8002dfc:	f000 f818 	bl	8002e30 <__sfp>
 8002e00:	2200      	movs	r2, #0
 8002e02:	60e0      	str	r0, [r4, #12]
 8002e04:	2104      	movs	r1, #4
 8002e06:	6860      	ldr	r0, [r4, #4]
 8002e08:	f7ff ff82 	bl	8002d10 <std>
 8002e0c:	68a0      	ldr	r0, [r4, #8]
 8002e0e:	2201      	movs	r2, #1
 8002e10:	2109      	movs	r1, #9
 8002e12:	f7ff ff7d 	bl	8002d10 <std>
 8002e16:	68e0      	ldr	r0, [r4, #12]
 8002e18:	2202      	movs	r2, #2
 8002e1a:	2112      	movs	r1, #18
 8002e1c:	f7ff ff78 	bl	8002d10 <std>
 8002e20:	2301      	movs	r3, #1
 8002e22:	61a3      	str	r3, [r4, #24]
 8002e24:	e7d2      	b.n	8002dcc <__sinit+0xc>
 8002e26:	bf00      	nop
 8002e28:	080039fc 	.word	0x080039fc
 8002e2c:	08002d59 	.word	0x08002d59

08002e30 <__sfp>:
 8002e30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e32:	4607      	mov	r7, r0
 8002e34:	f7ff ffac 	bl	8002d90 <__sfp_lock_acquire>
 8002e38:	4b1e      	ldr	r3, [pc, #120]	; (8002eb4 <__sfp+0x84>)
 8002e3a:	681e      	ldr	r6, [r3, #0]
 8002e3c:	69b3      	ldr	r3, [r6, #24]
 8002e3e:	b913      	cbnz	r3, 8002e46 <__sfp+0x16>
 8002e40:	4630      	mov	r0, r6
 8002e42:	f7ff ffbd 	bl	8002dc0 <__sinit>
 8002e46:	3648      	adds	r6, #72	; 0x48
 8002e48:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8002e4c:	3b01      	subs	r3, #1
 8002e4e:	d503      	bpl.n	8002e58 <__sfp+0x28>
 8002e50:	6833      	ldr	r3, [r6, #0]
 8002e52:	b30b      	cbz	r3, 8002e98 <__sfp+0x68>
 8002e54:	6836      	ldr	r6, [r6, #0]
 8002e56:	e7f7      	b.n	8002e48 <__sfp+0x18>
 8002e58:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8002e5c:	b9d5      	cbnz	r5, 8002e94 <__sfp+0x64>
 8002e5e:	4b16      	ldr	r3, [pc, #88]	; (8002eb8 <__sfp+0x88>)
 8002e60:	60e3      	str	r3, [r4, #12]
 8002e62:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8002e66:	6665      	str	r5, [r4, #100]	; 0x64
 8002e68:	f000 f847 	bl	8002efa <__retarget_lock_init_recursive>
 8002e6c:	f7ff ff96 	bl	8002d9c <__sfp_lock_release>
 8002e70:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8002e74:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8002e78:	6025      	str	r5, [r4, #0]
 8002e7a:	61a5      	str	r5, [r4, #24]
 8002e7c:	2208      	movs	r2, #8
 8002e7e:	4629      	mov	r1, r5
 8002e80:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8002e84:	f7ff fd2c 	bl	80028e0 <memset>
 8002e88:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8002e8c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8002e90:	4620      	mov	r0, r4
 8002e92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002e94:	3468      	adds	r4, #104	; 0x68
 8002e96:	e7d9      	b.n	8002e4c <__sfp+0x1c>
 8002e98:	2104      	movs	r1, #4
 8002e9a:	4638      	mov	r0, r7
 8002e9c:	f7ff ff62 	bl	8002d64 <__sfmoreglue>
 8002ea0:	4604      	mov	r4, r0
 8002ea2:	6030      	str	r0, [r6, #0]
 8002ea4:	2800      	cmp	r0, #0
 8002ea6:	d1d5      	bne.n	8002e54 <__sfp+0x24>
 8002ea8:	f7ff ff78 	bl	8002d9c <__sfp_lock_release>
 8002eac:	230c      	movs	r3, #12
 8002eae:	603b      	str	r3, [r7, #0]
 8002eb0:	e7ee      	b.n	8002e90 <__sfp+0x60>
 8002eb2:	bf00      	nop
 8002eb4:	080039fc 	.word	0x080039fc
 8002eb8:	ffff0001 	.word	0xffff0001

08002ebc <_fwalk_reent>:
 8002ebc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002ec0:	4606      	mov	r6, r0
 8002ec2:	4688      	mov	r8, r1
 8002ec4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8002ec8:	2700      	movs	r7, #0
 8002eca:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8002ece:	f1b9 0901 	subs.w	r9, r9, #1
 8002ed2:	d505      	bpl.n	8002ee0 <_fwalk_reent+0x24>
 8002ed4:	6824      	ldr	r4, [r4, #0]
 8002ed6:	2c00      	cmp	r4, #0
 8002ed8:	d1f7      	bne.n	8002eca <_fwalk_reent+0xe>
 8002eda:	4638      	mov	r0, r7
 8002edc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002ee0:	89ab      	ldrh	r3, [r5, #12]
 8002ee2:	2b01      	cmp	r3, #1
 8002ee4:	d907      	bls.n	8002ef6 <_fwalk_reent+0x3a>
 8002ee6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002eea:	3301      	adds	r3, #1
 8002eec:	d003      	beq.n	8002ef6 <_fwalk_reent+0x3a>
 8002eee:	4629      	mov	r1, r5
 8002ef0:	4630      	mov	r0, r6
 8002ef2:	47c0      	blx	r8
 8002ef4:	4307      	orrs	r7, r0
 8002ef6:	3568      	adds	r5, #104	; 0x68
 8002ef8:	e7e9      	b.n	8002ece <_fwalk_reent+0x12>

08002efa <__retarget_lock_init_recursive>:
 8002efa:	4770      	bx	lr

08002efc <__retarget_lock_acquire_recursive>:
 8002efc:	4770      	bx	lr

08002efe <__retarget_lock_release_recursive>:
 8002efe:	4770      	bx	lr

08002f00 <__swhatbuf_r>:
 8002f00:	b570      	push	{r4, r5, r6, lr}
 8002f02:	460e      	mov	r6, r1
 8002f04:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002f08:	2900      	cmp	r1, #0
 8002f0a:	b096      	sub	sp, #88	; 0x58
 8002f0c:	4614      	mov	r4, r2
 8002f0e:	461d      	mov	r5, r3
 8002f10:	da08      	bge.n	8002f24 <__swhatbuf_r+0x24>
 8002f12:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8002f16:	2200      	movs	r2, #0
 8002f18:	602a      	str	r2, [r5, #0]
 8002f1a:	061a      	lsls	r2, r3, #24
 8002f1c:	d410      	bmi.n	8002f40 <__swhatbuf_r+0x40>
 8002f1e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002f22:	e00e      	b.n	8002f42 <__swhatbuf_r+0x42>
 8002f24:	466a      	mov	r2, sp
 8002f26:	f000 fc95 	bl	8003854 <_fstat_r>
 8002f2a:	2800      	cmp	r0, #0
 8002f2c:	dbf1      	blt.n	8002f12 <__swhatbuf_r+0x12>
 8002f2e:	9a01      	ldr	r2, [sp, #4]
 8002f30:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8002f34:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8002f38:	425a      	negs	r2, r3
 8002f3a:	415a      	adcs	r2, r3
 8002f3c:	602a      	str	r2, [r5, #0]
 8002f3e:	e7ee      	b.n	8002f1e <__swhatbuf_r+0x1e>
 8002f40:	2340      	movs	r3, #64	; 0x40
 8002f42:	2000      	movs	r0, #0
 8002f44:	6023      	str	r3, [r4, #0]
 8002f46:	b016      	add	sp, #88	; 0x58
 8002f48:	bd70      	pop	{r4, r5, r6, pc}
	...

08002f4c <__smakebuf_r>:
 8002f4c:	898b      	ldrh	r3, [r1, #12]
 8002f4e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8002f50:	079d      	lsls	r5, r3, #30
 8002f52:	4606      	mov	r6, r0
 8002f54:	460c      	mov	r4, r1
 8002f56:	d507      	bpl.n	8002f68 <__smakebuf_r+0x1c>
 8002f58:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8002f5c:	6023      	str	r3, [r4, #0]
 8002f5e:	6123      	str	r3, [r4, #16]
 8002f60:	2301      	movs	r3, #1
 8002f62:	6163      	str	r3, [r4, #20]
 8002f64:	b002      	add	sp, #8
 8002f66:	bd70      	pop	{r4, r5, r6, pc}
 8002f68:	ab01      	add	r3, sp, #4
 8002f6a:	466a      	mov	r2, sp
 8002f6c:	f7ff ffc8 	bl	8002f00 <__swhatbuf_r>
 8002f70:	9900      	ldr	r1, [sp, #0]
 8002f72:	4605      	mov	r5, r0
 8002f74:	4630      	mov	r0, r6
 8002f76:	f000 f895 	bl	80030a4 <_malloc_r>
 8002f7a:	b948      	cbnz	r0, 8002f90 <__smakebuf_r+0x44>
 8002f7c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002f80:	059a      	lsls	r2, r3, #22
 8002f82:	d4ef      	bmi.n	8002f64 <__smakebuf_r+0x18>
 8002f84:	f023 0303 	bic.w	r3, r3, #3
 8002f88:	f043 0302 	orr.w	r3, r3, #2
 8002f8c:	81a3      	strh	r3, [r4, #12]
 8002f8e:	e7e3      	b.n	8002f58 <__smakebuf_r+0xc>
 8002f90:	4b0d      	ldr	r3, [pc, #52]	; (8002fc8 <__smakebuf_r+0x7c>)
 8002f92:	62b3      	str	r3, [r6, #40]	; 0x28
 8002f94:	89a3      	ldrh	r3, [r4, #12]
 8002f96:	6020      	str	r0, [r4, #0]
 8002f98:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002f9c:	81a3      	strh	r3, [r4, #12]
 8002f9e:	9b00      	ldr	r3, [sp, #0]
 8002fa0:	6163      	str	r3, [r4, #20]
 8002fa2:	9b01      	ldr	r3, [sp, #4]
 8002fa4:	6120      	str	r0, [r4, #16]
 8002fa6:	b15b      	cbz	r3, 8002fc0 <__smakebuf_r+0x74>
 8002fa8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002fac:	4630      	mov	r0, r6
 8002fae:	f000 fc63 	bl	8003878 <_isatty_r>
 8002fb2:	b128      	cbz	r0, 8002fc0 <__smakebuf_r+0x74>
 8002fb4:	89a3      	ldrh	r3, [r4, #12]
 8002fb6:	f023 0303 	bic.w	r3, r3, #3
 8002fba:	f043 0301 	orr.w	r3, r3, #1
 8002fbe:	81a3      	strh	r3, [r4, #12]
 8002fc0:	89a0      	ldrh	r0, [r4, #12]
 8002fc2:	4305      	orrs	r5, r0
 8002fc4:	81a5      	strh	r5, [r4, #12]
 8002fc6:	e7cd      	b.n	8002f64 <__smakebuf_r+0x18>
 8002fc8:	08002d59 	.word	0x08002d59

08002fcc <_free_r>:
 8002fcc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8002fce:	2900      	cmp	r1, #0
 8002fd0:	d044      	beq.n	800305c <_free_r+0x90>
 8002fd2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002fd6:	9001      	str	r0, [sp, #4]
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	f1a1 0404 	sub.w	r4, r1, #4
 8002fde:	bfb8      	it	lt
 8002fe0:	18e4      	addlt	r4, r4, r3
 8002fe2:	f000 fc6b 	bl	80038bc <__malloc_lock>
 8002fe6:	4a1e      	ldr	r2, [pc, #120]	; (8003060 <_free_r+0x94>)
 8002fe8:	9801      	ldr	r0, [sp, #4]
 8002fea:	6813      	ldr	r3, [r2, #0]
 8002fec:	b933      	cbnz	r3, 8002ffc <_free_r+0x30>
 8002fee:	6063      	str	r3, [r4, #4]
 8002ff0:	6014      	str	r4, [r2, #0]
 8002ff2:	b003      	add	sp, #12
 8002ff4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8002ff8:	f000 bc66 	b.w	80038c8 <__malloc_unlock>
 8002ffc:	42a3      	cmp	r3, r4
 8002ffe:	d908      	bls.n	8003012 <_free_r+0x46>
 8003000:	6825      	ldr	r5, [r4, #0]
 8003002:	1961      	adds	r1, r4, r5
 8003004:	428b      	cmp	r3, r1
 8003006:	bf01      	itttt	eq
 8003008:	6819      	ldreq	r1, [r3, #0]
 800300a:	685b      	ldreq	r3, [r3, #4]
 800300c:	1949      	addeq	r1, r1, r5
 800300e:	6021      	streq	r1, [r4, #0]
 8003010:	e7ed      	b.n	8002fee <_free_r+0x22>
 8003012:	461a      	mov	r2, r3
 8003014:	685b      	ldr	r3, [r3, #4]
 8003016:	b10b      	cbz	r3, 800301c <_free_r+0x50>
 8003018:	42a3      	cmp	r3, r4
 800301a:	d9fa      	bls.n	8003012 <_free_r+0x46>
 800301c:	6811      	ldr	r1, [r2, #0]
 800301e:	1855      	adds	r5, r2, r1
 8003020:	42a5      	cmp	r5, r4
 8003022:	d10b      	bne.n	800303c <_free_r+0x70>
 8003024:	6824      	ldr	r4, [r4, #0]
 8003026:	4421      	add	r1, r4
 8003028:	1854      	adds	r4, r2, r1
 800302a:	42a3      	cmp	r3, r4
 800302c:	6011      	str	r1, [r2, #0]
 800302e:	d1e0      	bne.n	8002ff2 <_free_r+0x26>
 8003030:	681c      	ldr	r4, [r3, #0]
 8003032:	685b      	ldr	r3, [r3, #4]
 8003034:	6053      	str	r3, [r2, #4]
 8003036:	4421      	add	r1, r4
 8003038:	6011      	str	r1, [r2, #0]
 800303a:	e7da      	b.n	8002ff2 <_free_r+0x26>
 800303c:	d902      	bls.n	8003044 <_free_r+0x78>
 800303e:	230c      	movs	r3, #12
 8003040:	6003      	str	r3, [r0, #0]
 8003042:	e7d6      	b.n	8002ff2 <_free_r+0x26>
 8003044:	6825      	ldr	r5, [r4, #0]
 8003046:	1961      	adds	r1, r4, r5
 8003048:	428b      	cmp	r3, r1
 800304a:	bf04      	itt	eq
 800304c:	6819      	ldreq	r1, [r3, #0]
 800304e:	685b      	ldreq	r3, [r3, #4]
 8003050:	6063      	str	r3, [r4, #4]
 8003052:	bf04      	itt	eq
 8003054:	1949      	addeq	r1, r1, r5
 8003056:	6021      	streq	r1, [r4, #0]
 8003058:	6054      	str	r4, [r2, #4]
 800305a:	e7ca      	b.n	8002ff2 <_free_r+0x26>
 800305c:	b003      	add	sp, #12
 800305e:	bd30      	pop	{r4, r5, pc}
 8003060:	200003f0 	.word	0x200003f0

08003064 <sbrk_aligned>:
 8003064:	b570      	push	{r4, r5, r6, lr}
 8003066:	4e0e      	ldr	r6, [pc, #56]	; (80030a0 <sbrk_aligned+0x3c>)
 8003068:	460c      	mov	r4, r1
 800306a:	6831      	ldr	r1, [r6, #0]
 800306c:	4605      	mov	r5, r0
 800306e:	b911      	cbnz	r1, 8003076 <sbrk_aligned+0x12>
 8003070:	f000 fb7a 	bl	8003768 <_sbrk_r>
 8003074:	6030      	str	r0, [r6, #0]
 8003076:	4621      	mov	r1, r4
 8003078:	4628      	mov	r0, r5
 800307a:	f000 fb75 	bl	8003768 <_sbrk_r>
 800307e:	1c43      	adds	r3, r0, #1
 8003080:	d00a      	beq.n	8003098 <sbrk_aligned+0x34>
 8003082:	1cc4      	adds	r4, r0, #3
 8003084:	f024 0403 	bic.w	r4, r4, #3
 8003088:	42a0      	cmp	r0, r4
 800308a:	d007      	beq.n	800309c <sbrk_aligned+0x38>
 800308c:	1a21      	subs	r1, r4, r0
 800308e:	4628      	mov	r0, r5
 8003090:	f000 fb6a 	bl	8003768 <_sbrk_r>
 8003094:	3001      	adds	r0, #1
 8003096:	d101      	bne.n	800309c <sbrk_aligned+0x38>
 8003098:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800309c:	4620      	mov	r0, r4
 800309e:	bd70      	pop	{r4, r5, r6, pc}
 80030a0:	200003f4 	.word	0x200003f4

080030a4 <_malloc_r>:
 80030a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80030a8:	1ccd      	adds	r5, r1, #3
 80030aa:	f025 0503 	bic.w	r5, r5, #3
 80030ae:	3508      	adds	r5, #8
 80030b0:	2d0c      	cmp	r5, #12
 80030b2:	bf38      	it	cc
 80030b4:	250c      	movcc	r5, #12
 80030b6:	2d00      	cmp	r5, #0
 80030b8:	4607      	mov	r7, r0
 80030ba:	db01      	blt.n	80030c0 <_malloc_r+0x1c>
 80030bc:	42a9      	cmp	r1, r5
 80030be:	d905      	bls.n	80030cc <_malloc_r+0x28>
 80030c0:	230c      	movs	r3, #12
 80030c2:	603b      	str	r3, [r7, #0]
 80030c4:	2600      	movs	r6, #0
 80030c6:	4630      	mov	r0, r6
 80030c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80030cc:	4e2e      	ldr	r6, [pc, #184]	; (8003188 <_malloc_r+0xe4>)
 80030ce:	f000 fbf5 	bl	80038bc <__malloc_lock>
 80030d2:	6833      	ldr	r3, [r6, #0]
 80030d4:	461c      	mov	r4, r3
 80030d6:	bb34      	cbnz	r4, 8003126 <_malloc_r+0x82>
 80030d8:	4629      	mov	r1, r5
 80030da:	4638      	mov	r0, r7
 80030dc:	f7ff ffc2 	bl	8003064 <sbrk_aligned>
 80030e0:	1c43      	adds	r3, r0, #1
 80030e2:	4604      	mov	r4, r0
 80030e4:	d14d      	bne.n	8003182 <_malloc_r+0xde>
 80030e6:	6834      	ldr	r4, [r6, #0]
 80030e8:	4626      	mov	r6, r4
 80030ea:	2e00      	cmp	r6, #0
 80030ec:	d140      	bne.n	8003170 <_malloc_r+0xcc>
 80030ee:	6823      	ldr	r3, [r4, #0]
 80030f0:	4631      	mov	r1, r6
 80030f2:	4638      	mov	r0, r7
 80030f4:	eb04 0803 	add.w	r8, r4, r3
 80030f8:	f000 fb36 	bl	8003768 <_sbrk_r>
 80030fc:	4580      	cmp	r8, r0
 80030fe:	d13a      	bne.n	8003176 <_malloc_r+0xd2>
 8003100:	6821      	ldr	r1, [r4, #0]
 8003102:	3503      	adds	r5, #3
 8003104:	1a6d      	subs	r5, r5, r1
 8003106:	f025 0503 	bic.w	r5, r5, #3
 800310a:	3508      	adds	r5, #8
 800310c:	2d0c      	cmp	r5, #12
 800310e:	bf38      	it	cc
 8003110:	250c      	movcc	r5, #12
 8003112:	4629      	mov	r1, r5
 8003114:	4638      	mov	r0, r7
 8003116:	f7ff ffa5 	bl	8003064 <sbrk_aligned>
 800311a:	3001      	adds	r0, #1
 800311c:	d02b      	beq.n	8003176 <_malloc_r+0xd2>
 800311e:	6823      	ldr	r3, [r4, #0]
 8003120:	442b      	add	r3, r5
 8003122:	6023      	str	r3, [r4, #0]
 8003124:	e00e      	b.n	8003144 <_malloc_r+0xa0>
 8003126:	6822      	ldr	r2, [r4, #0]
 8003128:	1b52      	subs	r2, r2, r5
 800312a:	d41e      	bmi.n	800316a <_malloc_r+0xc6>
 800312c:	2a0b      	cmp	r2, #11
 800312e:	d916      	bls.n	800315e <_malloc_r+0xba>
 8003130:	1961      	adds	r1, r4, r5
 8003132:	42a3      	cmp	r3, r4
 8003134:	6025      	str	r5, [r4, #0]
 8003136:	bf18      	it	ne
 8003138:	6059      	strne	r1, [r3, #4]
 800313a:	6863      	ldr	r3, [r4, #4]
 800313c:	bf08      	it	eq
 800313e:	6031      	streq	r1, [r6, #0]
 8003140:	5162      	str	r2, [r4, r5]
 8003142:	604b      	str	r3, [r1, #4]
 8003144:	4638      	mov	r0, r7
 8003146:	f104 060b 	add.w	r6, r4, #11
 800314a:	f000 fbbd 	bl	80038c8 <__malloc_unlock>
 800314e:	f026 0607 	bic.w	r6, r6, #7
 8003152:	1d23      	adds	r3, r4, #4
 8003154:	1af2      	subs	r2, r6, r3
 8003156:	d0b6      	beq.n	80030c6 <_malloc_r+0x22>
 8003158:	1b9b      	subs	r3, r3, r6
 800315a:	50a3      	str	r3, [r4, r2]
 800315c:	e7b3      	b.n	80030c6 <_malloc_r+0x22>
 800315e:	6862      	ldr	r2, [r4, #4]
 8003160:	42a3      	cmp	r3, r4
 8003162:	bf0c      	ite	eq
 8003164:	6032      	streq	r2, [r6, #0]
 8003166:	605a      	strne	r2, [r3, #4]
 8003168:	e7ec      	b.n	8003144 <_malloc_r+0xa0>
 800316a:	4623      	mov	r3, r4
 800316c:	6864      	ldr	r4, [r4, #4]
 800316e:	e7b2      	b.n	80030d6 <_malloc_r+0x32>
 8003170:	4634      	mov	r4, r6
 8003172:	6876      	ldr	r6, [r6, #4]
 8003174:	e7b9      	b.n	80030ea <_malloc_r+0x46>
 8003176:	230c      	movs	r3, #12
 8003178:	603b      	str	r3, [r7, #0]
 800317a:	4638      	mov	r0, r7
 800317c:	f000 fba4 	bl	80038c8 <__malloc_unlock>
 8003180:	e7a1      	b.n	80030c6 <_malloc_r+0x22>
 8003182:	6025      	str	r5, [r4, #0]
 8003184:	e7de      	b.n	8003144 <_malloc_r+0xa0>
 8003186:	bf00      	nop
 8003188:	200003f0 	.word	0x200003f0

0800318c <__sfputc_r>:
 800318c:	6893      	ldr	r3, [r2, #8]
 800318e:	3b01      	subs	r3, #1
 8003190:	2b00      	cmp	r3, #0
 8003192:	b410      	push	{r4}
 8003194:	6093      	str	r3, [r2, #8]
 8003196:	da08      	bge.n	80031aa <__sfputc_r+0x1e>
 8003198:	6994      	ldr	r4, [r2, #24]
 800319a:	42a3      	cmp	r3, r4
 800319c:	db01      	blt.n	80031a2 <__sfputc_r+0x16>
 800319e:	290a      	cmp	r1, #10
 80031a0:	d103      	bne.n	80031aa <__sfputc_r+0x1e>
 80031a2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80031a6:	f7ff bc31 	b.w	8002a0c <__swbuf_r>
 80031aa:	6813      	ldr	r3, [r2, #0]
 80031ac:	1c58      	adds	r0, r3, #1
 80031ae:	6010      	str	r0, [r2, #0]
 80031b0:	7019      	strb	r1, [r3, #0]
 80031b2:	4608      	mov	r0, r1
 80031b4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80031b8:	4770      	bx	lr

080031ba <__sfputs_r>:
 80031ba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80031bc:	4606      	mov	r6, r0
 80031be:	460f      	mov	r7, r1
 80031c0:	4614      	mov	r4, r2
 80031c2:	18d5      	adds	r5, r2, r3
 80031c4:	42ac      	cmp	r4, r5
 80031c6:	d101      	bne.n	80031cc <__sfputs_r+0x12>
 80031c8:	2000      	movs	r0, #0
 80031ca:	e007      	b.n	80031dc <__sfputs_r+0x22>
 80031cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80031d0:	463a      	mov	r2, r7
 80031d2:	4630      	mov	r0, r6
 80031d4:	f7ff ffda 	bl	800318c <__sfputc_r>
 80031d8:	1c43      	adds	r3, r0, #1
 80031da:	d1f3      	bne.n	80031c4 <__sfputs_r+0xa>
 80031dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080031e0 <_vfiprintf_r>:
 80031e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80031e4:	460d      	mov	r5, r1
 80031e6:	b09d      	sub	sp, #116	; 0x74
 80031e8:	4614      	mov	r4, r2
 80031ea:	4698      	mov	r8, r3
 80031ec:	4606      	mov	r6, r0
 80031ee:	b118      	cbz	r0, 80031f8 <_vfiprintf_r+0x18>
 80031f0:	6983      	ldr	r3, [r0, #24]
 80031f2:	b90b      	cbnz	r3, 80031f8 <_vfiprintf_r+0x18>
 80031f4:	f7ff fde4 	bl	8002dc0 <__sinit>
 80031f8:	4b89      	ldr	r3, [pc, #548]	; (8003420 <_vfiprintf_r+0x240>)
 80031fa:	429d      	cmp	r5, r3
 80031fc:	d11b      	bne.n	8003236 <_vfiprintf_r+0x56>
 80031fe:	6875      	ldr	r5, [r6, #4]
 8003200:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003202:	07d9      	lsls	r1, r3, #31
 8003204:	d405      	bmi.n	8003212 <_vfiprintf_r+0x32>
 8003206:	89ab      	ldrh	r3, [r5, #12]
 8003208:	059a      	lsls	r2, r3, #22
 800320a:	d402      	bmi.n	8003212 <_vfiprintf_r+0x32>
 800320c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800320e:	f7ff fe75 	bl	8002efc <__retarget_lock_acquire_recursive>
 8003212:	89ab      	ldrh	r3, [r5, #12]
 8003214:	071b      	lsls	r3, r3, #28
 8003216:	d501      	bpl.n	800321c <_vfiprintf_r+0x3c>
 8003218:	692b      	ldr	r3, [r5, #16]
 800321a:	b9eb      	cbnz	r3, 8003258 <_vfiprintf_r+0x78>
 800321c:	4629      	mov	r1, r5
 800321e:	4630      	mov	r0, r6
 8003220:	f7ff fc46 	bl	8002ab0 <__swsetup_r>
 8003224:	b1c0      	cbz	r0, 8003258 <_vfiprintf_r+0x78>
 8003226:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003228:	07dc      	lsls	r4, r3, #31
 800322a:	d50e      	bpl.n	800324a <_vfiprintf_r+0x6a>
 800322c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003230:	b01d      	add	sp, #116	; 0x74
 8003232:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003236:	4b7b      	ldr	r3, [pc, #492]	; (8003424 <_vfiprintf_r+0x244>)
 8003238:	429d      	cmp	r5, r3
 800323a:	d101      	bne.n	8003240 <_vfiprintf_r+0x60>
 800323c:	68b5      	ldr	r5, [r6, #8]
 800323e:	e7df      	b.n	8003200 <_vfiprintf_r+0x20>
 8003240:	4b79      	ldr	r3, [pc, #484]	; (8003428 <_vfiprintf_r+0x248>)
 8003242:	429d      	cmp	r5, r3
 8003244:	bf08      	it	eq
 8003246:	68f5      	ldreq	r5, [r6, #12]
 8003248:	e7da      	b.n	8003200 <_vfiprintf_r+0x20>
 800324a:	89ab      	ldrh	r3, [r5, #12]
 800324c:	0598      	lsls	r0, r3, #22
 800324e:	d4ed      	bmi.n	800322c <_vfiprintf_r+0x4c>
 8003250:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003252:	f7ff fe54 	bl	8002efe <__retarget_lock_release_recursive>
 8003256:	e7e9      	b.n	800322c <_vfiprintf_r+0x4c>
 8003258:	2300      	movs	r3, #0
 800325a:	9309      	str	r3, [sp, #36]	; 0x24
 800325c:	2320      	movs	r3, #32
 800325e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003262:	f8cd 800c 	str.w	r8, [sp, #12]
 8003266:	2330      	movs	r3, #48	; 0x30
 8003268:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800342c <_vfiprintf_r+0x24c>
 800326c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003270:	f04f 0901 	mov.w	r9, #1
 8003274:	4623      	mov	r3, r4
 8003276:	469a      	mov	sl, r3
 8003278:	f813 2b01 	ldrb.w	r2, [r3], #1
 800327c:	b10a      	cbz	r2, 8003282 <_vfiprintf_r+0xa2>
 800327e:	2a25      	cmp	r2, #37	; 0x25
 8003280:	d1f9      	bne.n	8003276 <_vfiprintf_r+0x96>
 8003282:	ebba 0b04 	subs.w	fp, sl, r4
 8003286:	d00b      	beq.n	80032a0 <_vfiprintf_r+0xc0>
 8003288:	465b      	mov	r3, fp
 800328a:	4622      	mov	r2, r4
 800328c:	4629      	mov	r1, r5
 800328e:	4630      	mov	r0, r6
 8003290:	f7ff ff93 	bl	80031ba <__sfputs_r>
 8003294:	3001      	adds	r0, #1
 8003296:	f000 80aa 	beq.w	80033ee <_vfiprintf_r+0x20e>
 800329a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800329c:	445a      	add	r2, fp
 800329e:	9209      	str	r2, [sp, #36]	; 0x24
 80032a0:	f89a 3000 	ldrb.w	r3, [sl]
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	f000 80a2 	beq.w	80033ee <_vfiprintf_r+0x20e>
 80032aa:	2300      	movs	r3, #0
 80032ac:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80032b0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80032b4:	f10a 0a01 	add.w	sl, sl, #1
 80032b8:	9304      	str	r3, [sp, #16]
 80032ba:	9307      	str	r3, [sp, #28]
 80032bc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80032c0:	931a      	str	r3, [sp, #104]	; 0x68
 80032c2:	4654      	mov	r4, sl
 80032c4:	2205      	movs	r2, #5
 80032c6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80032ca:	4858      	ldr	r0, [pc, #352]	; (800342c <_vfiprintf_r+0x24c>)
 80032cc:	f7fc ffb0 	bl	8000230 <memchr>
 80032d0:	9a04      	ldr	r2, [sp, #16]
 80032d2:	b9d8      	cbnz	r0, 800330c <_vfiprintf_r+0x12c>
 80032d4:	06d1      	lsls	r1, r2, #27
 80032d6:	bf44      	itt	mi
 80032d8:	2320      	movmi	r3, #32
 80032da:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80032de:	0713      	lsls	r3, r2, #28
 80032e0:	bf44      	itt	mi
 80032e2:	232b      	movmi	r3, #43	; 0x2b
 80032e4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80032e8:	f89a 3000 	ldrb.w	r3, [sl]
 80032ec:	2b2a      	cmp	r3, #42	; 0x2a
 80032ee:	d015      	beq.n	800331c <_vfiprintf_r+0x13c>
 80032f0:	9a07      	ldr	r2, [sp, #28]
 80032f2:	4654      	mov	r4, sl
 80032f4:	2000      	movs	r0, #0
 80032f6:	f04f 0c0a 	mov.w	ip, #10
 80032fa:	4621      	mov	r1, r4
 80032fc:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003300:	3b30      	subs	r3, #48	; 0x30
 8003302:	2b09      	cmp	r3, #9
 8003304:	d94e      	bls.n	80033a4 <_vfiprintf_r+0x1c4>
 8003306:	b1b0      	cbz	r0, 8003336 <_vfiprintf_r+0x156>
 8003308:	9207      	str	r2, [sp, #28]
 800330a:	e014      	b.n	8003336 <_vfiprintf_r+0x156>
 800330c:	eba0 0308 	sub.w	r3, r0, r8
 8003310:	fa09 f303 	lsl.w	r3, r9, r3
 8003314:	4313      	orrs	r3, r2
 8003316:	9304      	str	r3, [sp, #16]
 8003318:	46a2      	mov	sl, r4
 800331a:	e7d2      	b.n	80032c2 <_vfiprintf_r+0xe2>
 800331c:	9b03      	ldr	r3, [sp, #12]
 800331e:	1d19      	adds	r1, r3, #4
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	9103      	str	r1, [sp, #12]
 8003324:	2b00      	cmp	r3, #0
 8003326:	bfbb      	ittet	lt
 8003328:	425b      	neglt	r3, r3
 800332a:	f042 0202 	orrlt.w	r2, r2, #2
 800332e:	9307      	strge	r3, [sp, #28]
 8003330:	9307      	strlt	r3, [sp, #28]
 8003332:	bfb8      	it	lt
 8003334:	9204      	strlt	r2, [sp, #16]
 8003336:	7823      	ldrb	r3, [r4, #0]
 8003338:	2b2e      	cmp	r3, #46	; 0x2e
 800333a:	d10c      	bne.n	8003356 <_vfiprintf_r+0x176>
 800333c:	7863      	ldrb	r3, [r4, #1]
 800333e:	2b2a      	cmp	r3, #42	; 0x2a
 8003340:	d135      	bne.n	80033ae <_vfiprintf_r+0x1ce>
 8003342:	9b03      	ldr	r3, [sp, #12]
 8003344:	1d1a      	adds	r2, r3, #4
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	9203      	str	r2, [sp, #12]
 800334a:	2b00      	cmp	r3, #0
 800334c:	bfb8      	it	lt
 800334e:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8003352:	3402      	adds	r4, #2
 8003354:	9305      	str	r3, [sp, #20]
 8003356:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800343c <_vfiprintf_r+0x25c>
 800335a:	7821      	ldrb	r1, [r4, #0]
 800335c:	2203      	movs	r2, #3
 800335e:	4650      	mov	r0, sl
 8003360:	f7fc ff66 	bl	8000230 <memchr>
 8003364:	b140      	cbz	r0, 8003378 <_vfiprintf_r+0x198>
 8003366:	2340      	movs	r3, #64	; 0x40
 8003368:	eba0 000a 	sub.w	r0, r0, sl
 800336c:	fa03 f000 	lsl.w	r0, r3, r0
 8003370:	9b04      	ldr	r3, [sp, #16]
 8003372:	4303      	orrs	r3, r0
 8003374:	3401      	adds	r4, #1
 8003376:	9304      	str	r3, [sp, #16]
 8003378:	f814 1b01 	ldrb.w	r1, [r4], #1
 800337c:	482c      	ldr	r0, [pc, #176]	; (8003430 <_vfiprintf_r+0x250>)
 800337e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003382:	2206      	movs	r2, #6
 8003384:	f7fc ff54 	bl	8000230 <memchr>
 8003388:	2800      	cmp	r0, #0
 800338a:	d03f      	beq.n	800340c <_vfiprintf_r+0x22c>
 800338c:	4b29      	ldr	r3, [pc, #164]	; (8003434 <_vfiprintf_r+0x254>)
 800338e:	bb1b      	cbnz	r3, 80033d8 <_vfiprintf_r+0x1f8>
 8003390:	9b03      	ldr	r3, [sp, #12]
 8003392:	3307      	adds	r3, #7
 8003394:	f023 0307 	bic.w	r3, r3, #7
 8003398:	3308      	adds	r3, #8
 800339a:	9303      	str	r3, [sp, #12]
 800339c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800339e:	443b      	add	r3, r7
 80033a0:	9309      	str	r3, [sp, #36]	; 0x24
 80033a2:	e767      	b.n	8003274 <_vfiprintf_r+0x94>
 80033a4:	fb0c 3202 	mla	r2, ip, r2, r3
 80033a8:	460c      	mov	r4, r1
 80033aa:	2001      	movs	r0, #1
 80033ac:	e7a5      	b.n	80032fa <_vfiprintf_r+0x11a>
 80033ae:	2300      	movs	r3, #0
 80033b0:	3401      	adds	r4, #1
 80033b2:	9305      	str	r3, [sp, #20]
 80033b4:	4619      	mov	r1, r3
 80033b6:	f04f 0c0a 	mov.w	ip, #10
 80033ba:	4620      	mov	r0, r4
 80033bc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80033c0:	3a30      	subs	r2, #48	; 0x30
 80033c2:	2a09      	cmp	r2, #9
 80033c4:	d903      	bls.n	80033ce <_vfiprintf_r+0x1ee>
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d0c5      	beq.n	8003356 <_vfiprintf_r+0x176>
 80033ca:	9105      	str	r1, [sp, #20]
 80033cc:	e7c3      	b.n	8003356 <_vfiprintf_r+0x176>
 80033ce:	fb0c 2101 	mla	r1, ip, r1, r2
 80033d2:	4604      	mov	r4, r0
 80033d4:	2301      	movs	r3, #1
 80033d6:	e7f0      	b.n	80033ba <_vfiprintf_r+0x1da>
 80033d8:	ab03      	add	r3, sp, #12
 80033da:	9300      	str	r3, [sp, #0]
 80033dc:	462a      	mov	r2, r5
 80033de:	4b16      	ldr	r3, [pc, #88]	; (8003438 <_vfiprintf_r+0x258>)
 80033e0:	a904      	add	r1, sp, #16
 80033e2:	4630      	mov	r0, r6
 80033e4:	f3af 8000 	nop.w
 80033e8:	4607      	mov	r7, r0
 80033ea:	1c78      	adds	r0, r7, #1
 80033ec:	d1d6      	bne.n	800339c <_vfiprintf_r+0x1bc>
 80033ee:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80033f0:	07d9      	lsls	r1, r3, #31
 80033f2:	d405      	bmi.n	8003400 <_vfiprintf_r+0x220>
 80033f4:	89ab      	ldrh	r3, [r5, #12]
 80033f6:	059a      	lsls	r2, r3, #22
 80033f8:	d402      	bmi.n	8003400 <_vfiprintf_r+0x220>
 80033fa:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80033fc:	f7ff fd7f 	bl	8002efe <__retarget_lock_release_recursive>
 8003400:	89ab      	ldrh	r3, [r5, #12]
 8003402:	065b      	lsls	r3, r3, #25
 8003404:	f53f af12 	bmi.w	800322c <_vfiprintf_r+0x4c>
 8003408:	9809      	ldr	r0, [sp, #36]	; 0x24
 800340a:	e711      	b.n	8003230 <_vfiprintf_r+0x50>
 800340c:	ab03      	add	r3, sp, #12
 800340e:	9300      	str	r3, [sp, #0]
 8003410:	462a      	mov	r2, r5
 8003412:	4b09      	ldr	r3, [pc, #36]	; (8003438 <_vfiprintf_r+0x258>)
 8003414:	a904      	add	r1, sp, #16
 8003416:	4630      	mov	r0, r6
 8003418:	f000 f880 	bl	800351c <_printf_i>
 800341c:	e7e4      	b.n	80033e8 <_vfiprintf_r+0x208>
 800341e:	bf00      	nop
 8003420:	08003a20 	.word	0x08003a20
 8003424:	08003a40 	.word	0x08003a40
 8003428:	08003a00 	.word	0x08003a00
 800342c:	08003a60 	.word	0x08003a60
 8003430:	08003a6a 	.word	0x08003a6a
 8003434:	00000000 	.word	0x00000000
 8003438:	080031bb 	.word	0x080031bb
 800343c:	08003a66 	.word	0x08003a66

08003440 <_printf_common>:
 8003440:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003444:	4616      	mov	r6, r2
 8003446:	4699      	mov	r9, r3
 8003448:	688a      	ldr	r2, [r1, #8]
 800344a:	690b      	ldr	r3, [r1, #16]
 800344c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003450:	4293      	cmp	r3, r2
 8003452:	bfb8      	it	lt
 8003454:	4613      	movlt	r3, r2
 8003456:	6033      	str	r3, [r6, #0]
 8003458:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800345c:	4607      	mov	r7, r0
 800345e:	460c      	mov	r4, r1
 8003460:	b10a      	cbz	r2, 8003466 <_printf_common+0x26>
 8003462:	3301      	adds	r3, #1
 8003464:	6033      	str	r3, [r6, #0]
 8003466:	6823      	ldr	r3, [r4, #0]
 8003468:	0699      	lsls	r1, r3, #26
 800346a:	bf42      	ittt	mi
 800346c:	6833      	ldrmi	r3, [r6, #0]
 800346e:	3302      	addmi	r3, #2
 8003470:	6033      	strmi	r3, [r6, #0]
 8003472:	6825      	ldr	r5, [r4, #0]
 8003474:	f015 0506 	ands.w	r5, r5, #6
 8003478:	d106      	bne.n	8003488 <_printf_common+0x48>
 800347a:	f104 0a19 	add.w	sl, r4, #25
 800347e:	68e3      	ldr	r3, [r4, #12]
 8003480:	6832      	ldr	r2, [r6, #0]
 8003482:	1a9b      	subs	r3, r3, r2
 8003484:	42ab      	cmp	r3, r5
 8003486:	dc26      	bgt.n	80034d6 <_printf_common+0x96>
 8003488:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800348c:	1e13      	subs	r3, r2, #0
 800348e:	6822      	ldr	r2, [r4, #0]
 8003490:	bf18      	it	ne
 8003492:	2301      	movne	r3, #1
 8003494:	0692      	lsls	r2, r2, #26
 8003496:	d42b      	bmi.n	80034f0 <_printf_common+0xb0>
 8003498:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800349c:	4649      	mov	r1, r9
 800349e:	4638      	mov	r0, r7
 80034a0:	47c0      	blx	r8
 80034a2:	3001      	adds	r0, #1
 80034a4:	d01e      	beq.n	80034e4 <_printf_common+0xa4>
 80034a6:	6823      	ldr	r3, [r4, #0]
 80034a8:	68e5      	ldr	r5, [r4, #12]
 80034aa:	6832      	ldr	r2, [r6, #0]
 80034ac:	f003 0306 	and.w	r3, r3, #6
 80034b0:	2b04      	cmp	r3, #4
 80034b2:	bf08      	it	eq
 80034b4:	1aad      	subeq	r5, r5, r2
 80034b6:	68a3      	ldr	r3, [r4, #8]
 80034b8:	6922      	ldr	r2, [r4, #16]
 80034ba:	bf0c      	ite	eq
 80034bc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80034c0:	2500      	movne	r5, #0
 80034c2:	4293      	cmp	r3, r2
 80034c4:	bfc4      	itt	gt
 80034c6:	1a9b      	subgt	r3, r3, r2
 80034c8:	18ed      	addgt	r5, r5, r3
 80034ca:	2600      	movs	r6, #0
 80034cc:	341a      	adds	r4, #26
 80034ce:	42b5      	cmp	r5, r6
 80034d0:	d11a      	bne.n	8003508 <_printf_common+0xc8>
 80034d2:	2000      	movs	r0, #0
 80034d4:	e008      	b.n	80034e8 <_printf_common+0xa8>
 80034d6:	2301      	movs	r3, #1
 80034d8:	4652      	mov	r2, sl
 80034da:	4649      	mov	r1, r9
 80034dc:	4638      	mov	r0, r7
 80034de:	47c0      	blx	r8
 80034e0:	3001      	adds	r0, #1
 80034e2:	d103      	bne.n	80034ec <_printf_common+0xac>
 80034e4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80034e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80034ec:	3501      	adds	r5, #1
 80034ee:	e7c6      	b.n	800347e <_printf_common+0x3e>
 80034f0:	18e1      	adds	r1, r4, r3
 80034f2:	1c5a      	adds	r2, r3, #1
 80034f4:	2030      	movs	r0, #48	; 0x30
 80034f6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80034fa:	4422      	add	r2, r4
 80034fc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003500:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003504:	3302      	adds	r3, #2
 8003506:	e7c7      	b.n	8003498 <_printf_common+0x58>
 8003508:	2301      	movs	r3, #1
 800350a:	4622      	mov	r2, r4
 800350c:	4649      	mov	r1, r9
 800350e:	4638      	mov	r0, r7
 8003510:	47c0      	blx	r8
 8003512:	3001      	adds	r0, #1
 8003514:	d0e6      	beq.n	80034e4 <_printf_common+0xa4>
 8003516:	3601      	adds	r6, #1
 8003518:	e7d9      	b.n	80034ce <_printf_common+0x8e>
	...

0800351c <_printf_i>:
 800351c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003520:	7e0f      	ldrb	r7, [r1, #24]
 8003522:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003524:	2f78      	cmp	r7, #120	; 0x78
 8003526:	4691      	mov	r9, r2
 8003528:	4680      	mov	r8, r0
 800352a:	460c      	mov	r4, r1
 800352c:	469a      	mov	sl, r3
 800352e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003532:	d807      	bhi.n	8003544 <_printf_i+0x28>
 8003534:	2f62      	cmp	r7, #98	; 0x62
 8003536:	d80a      	bhi.n	800354e <_printf_i+0x32>
 8003538:	2f00      	cmp	r7, #0
 800353a:	f000 80d8 	beq.w	80036ee <_printf_i+0x1d2>
 800353e:	2f58      	cmp	r7, #88	; 0x58
 8003540:	f000 80a3 	beq.w	800368a <_printf_i+0x16e>
 8003544:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003548:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800354c:	e03a      	b.n	80035c4 <_printf_i+0xa8>
 800354e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003552:	2b15      	cmp	r3, #21
 8003554:	d8f6      	bhi.n	8003544 <_printf_i+0x28>
 8003556:	a101      	add	r1, pc, #4	; (adr r1, 800355c <_printf_i+0x40>)
 8003558:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800355c:	080035b5 	.word	0x080035b5
 8003560:	080035c9 	.word	0x080035c9
 8003564:	08003545 	.word	0x08003545
 8003568:	08003545 	.word	0x08003545
 800356c:	08003545 	.word	0x08003545
 8003570:	08003545 	.word	0x08003545
 8003574:	080035c9 	.word	0x080035c9
 8003578:	08003545 	.word	0x08003545
 800357c:	08003545 	.word	0x08003545
 8003580:	08003545 	.word	0x08003545
 8003584:	08003545 	.word	0x08003545
 8003588:	080036d5 	.word	0x080036d5
 800358c:	080035f9 	.word	0x080035f9
 8003590:	080036b7 	.word	0x080036b7
 8003594:	08003545 	.word	0x08003545
 8003598:	08003545 	.word	0x08003545
 800359c:	080036f7 	.word	0x080036f7
 80035a0:	08003545 	.word	0x08003545
 80035a4:	080035f9 	.word	0x080035f9
 80035a8:	08003545 	.word	0x08003545
 80035ac:	08003545 	.word	0x08003545
 80035b0:	080036bf 	.word	0x080036bf
 80035b4:	682b      	ldr	r3, [r5, #0]
 80035b6:	1d1a      	adds	r2, r3, #4
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	602a      	str	r2, [r5, #0]
 80035bc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80035c0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80035c4:	2301      	movs	r3, #1
 80035c6:	e0a3      	b.n	8003710 <_printf_i+0x1f4>
 80035c8:	6820      	ldr	r0, [r4, #0]
 80035ca:	6829      	ldr	r1, [r5, #0]
 80035cc:	0606      	lsls	r6, r0, #24
 80035ce:	f101 0304 	add.w	r3, r1, #4
 80035d2:	d50a      	bpl.n	80035ea <_printf_i+0xce>
 80035d4:	680e      	ldr	r6, [r1, #0]
 80035d6:	602b      	str	r3, [r5, #0]
 80035d8:	2e00      	cmp	r6, #0
 80035da:	da03      	bge.n	80035e4 <_printf_i+0xc8>
 80035dc:	232d      	movs	r3, #45	; 0x2d
 80035de:	4276      	negs	r6, r6
 80035e0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80035e4:	485e      	ldr	r0, [pc, #376]	; (8003760 <_printf_i+0x244>)
 80035e6:	230a      	movs	r3, #10
 80035e8:	e019      	b.n	800361e <_printf_i+0x102>
 80035ea:	680e      	ldr	r6, [r1, #0]
 80035ec:	602b      	str	r3, [r5, #0]
 80035ee:	f010 0f40 	tst.w	r0, #64	; 0x40
 80035f2:	bf18      	it	ne
 80035f4:	b236      	sxthne	r6, r6
 80035f6:	e7ef      	b.n	80035d8 <_printf_i+0xbc>
 80035f8:	682b      	ldr	r3, [r5, #0]
 80035fa:	6820      	ldr	r0, [r4, #0]
 80035fc:	1d19      	adds	r1, r3, #4
 80035fe:	6029      	str	r1, [r5, #0]
 8003600:	0601      	lsls	r1, r0, #24
 8003602:	d501      	bpl.n	8003608 <_printf_i+0xec>
 8003604:	681e      	ldr	r6, [r3, #0]
 8003606:	e002      	b.n	800360e <_printf_i+0xf2>
 8003608:	0646      	lsls	r6, r0, #25
 800360a:	d5fb      	bpl.n	8003604 <_printf_i+0xe8>
 800360c:	881e      	ldrh	r6, [r3, #0]
 800360e:	4854      	ldr	r0, [pc, #336]	; (8003760 <_printf_i+0x244>)
 8003610:	2f6f      	cmp	r7, #111	; 0x6f
 8003612:	bf0c      	ite	eq
 8003614:	2308      	moveq	r3, #8
 8003616:	230a      	movne	r3, #10
 8003618:	2100      	movs	r1, #0
 800361a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800361e:	6865      	ldr	r5, [r4, #4]
 8003620:	60a5      	str	r5, [r4, #8]
 8003622:	2d00      	cmp	r5, #0
 8003624:	bfa2      	ittt	ge
 8003626:	6821      	ldrge	r1, [r4, #0]
 8003628:	f021 0104 	bicge.w	r1, r1, #4
 800362c:	6021      	strge	r1, [r4, #0]
 800362e:	b90e      	cbnz	r6, 8003634 <_printf_i+0x118>
 8003630:	2d00      	cmp	r5, #0
 8003632:	d04d      	beq.n	80036d0 <_printf_i+0x1b4>
 8003634:	4615      	mov	r5, r2
 8003636:	fbb6 f1f3 	udiv	r1, r6, r3
 800363a:	fb03 6711 	mls	r7, r3, r1, r6
 800363e:	5dc7      	ldrb	r7, [r0, r7]
 8003640:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003644:	4637      	mov	r7, r6
 8003646:	42bb      	cmp	r3, r7
 8003648:	460e      	mov	r6, r1
 800364a:	d9f4      	bls.n	8003636 <_printf_i+0x11a>
 800364c:	2b08      	cmp	r3, #8
 800364e:	d10b      	bne.n	8003668 <_printf_i+0x14c>
 8003650:	6823      	ldr	r3, [r4, #0]
 8003652:	07de      	lsls	r6, r3, #31
 8003654:	d508      	bpl.n	8003668 <_printf_i+0x14c>
 8003656:	6923      	ldr	r3, [r4, #16]
 8003658:	6861      	ldr	r1, [r4, #4]
 800365a:	4299      	cmp	r1, r3
 800365c:	bfde      	ittt	le
 800365e:	2330      	movle	r3, #48	; 0x30
 8003660:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003664:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8003668:	1b52      	subs	r2, r2, r5
 800366a:	6122      	str	r2, [r4, #16]
 800366c:	f8cd a000 	str.w	sl, [sp]
 8003670:	464b      	mov	r3, r9
 8003672:	aa03      	add	r2, sp, #12
 8003674:	4621      	mov	r1, r4
 8003676:	4640      	mov	r0, r8
 8003678:	f7ff fee2 	bl	8003440 <_printf_common>
 800367c:	3001      	adds	r0, #1
 800367e:	d14c      	bne.n	800371a <_printf_i+0x1fe>
 8003680:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003684:	b004      	add	sp, #16
 8003686:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800368a:	4835      	ldr	r0, [pc, #212]	; (8003760 <_printf_i+0x244>)
 800368c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8003690:	6829      	ldr	r1, [r5, #0]
 8003692:	6823      	ldr	r3, [r4, #0]
 8003694:	f851 6b04 	ldr.w	r6, [r1], #4
 8003698:	6029      	str	r1, [r5, #0]
 800369a:	061d      	lsls	r5, r3, #24
 800369c:	d514      	bpl.n	80036c8 <_printf_i+0x1ac>
 800369e:	07df      	lsls	r7, r3, #31
 80036a0:	bf44      	itt	mi
 80036a2:	f043 0320 	orrmi.w	r3, r3, #32
 80036a6:	6023      	strmi	r3, [r4, #0]
 80036a8:	b91e      	cbnz	r6, 80036b2 <_printf_i+0x196>
 80036aa:	6823      	ldr	r3, [r4, #0]
 80036ac:	f023 0320 	bic.w	r3, r3, #32
 80036b0:	6023      	str	r3, [r4, #0]
 80036b2:	2310      	movs	r3, #16
 80036b4:	e7b0      	b.n	8003618 <_printf_i+0xfc>
 80036b6:	6823      	ldr	r3, [r4, #0]
 80036b8:	f043 0320 	orr.w	r3, r3, #32
 80036bc:	6023      	str	r3, [r4, #0]
 80036be:	2378      	movs	r3, #120	; 0x78
 80036c0:	4828      	ldr	r0, [pc, #160]	; (8003764 <_printf_i+0x248>)
 80036c2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80036c6:	e7e3      	b.n	8003690 <_printf_i+0x174>
 80036c8:	0659      	lsls	r1, r3, #25
 80036ca:	bf48      	it	mi
 80036cc:	b2b6      	uxthmi	r6, r6
 80036ce:	e7e6      	b.n	800369e <_printf_i+0x182>
 80036d0:	4615      	mov	r5, r2
 80036d2:	e7bb      	b.n	800364c <_printf_i+0x130>
 80036d4:	682b      	ldr	r3, [r5, #0]
 80036d6:	6826      	ldr	r6, [r4, #0]
 80036d8:	6961      	ldr	r1, [r4, #20]
 80036da:	1d18      	adds	r0, r3, #4
 80036dc:	6028      	str	r0, [r5, #0]
 80036de:	0635      	lsls	r5, r6, #24
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	d501      	bpl.n	80036e8 <_printf_i+0x1cc>
 80036e4:	6019      	str	r1, [r3, #0]
 80036e6:	e002      	b.n	80036ee <_printf_i+0x1d2>
 80036e8:	0670      	lsls	r0, r6, #25
 80036ea:	d5fb      	bpl.n	80036e4 <_printf_i+0x1c8>
 80036ec:	8019      	strh	r1, [r3, #0]
 80036ee:	2300      	movs	r3, #0
 80036f0:	6123      	str	r3, [r4, #16]
 80036f2:	4615      	mov	r5, r2
 80036f4:	e7ba      	b.n	800366c <_printf_i+0x150>
 80036f6:	682b      	ldr	r3, [r5, #0]
 80036f8:	1d1a      	adds	r2, r3, #4
 80036fa:	602a      	str	r2, [r5, #0]
 80036fc:	681d      	ldr	r5, [r3, #0]
 80036fe:	6862      	ldr	r2, [r4, #4]
 8003700:	2100      	movs	r1, #0
 8003702:	4628      	mov	r0, r5
 8003704:	f7fc fd94 	bl	8000230 <memchr>
 8003708:	b108      	cbz	r0, 800370e <_printf_i+0x1f2>
 800370a:	1b40      	subs	r0, r0, r5
 800370c:	6060      	str	r0, [r4, #4]
 800370e:	6863      	ldr	r3, [r4, #4]
 8003710:	6123      	str	r3, [r4, #16]
 8003712:	2300      	movs	r3, #0
 8003714:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003718:	e7a8      	b.n	800366c <_printf_i+0x150>
 800371a:	6923      	ldr	r3, [r4, #16]
 800371c:	462a      	mov	r2, r5
 800371e:	4649      	mov	r1, r9
 8003720:	4640      	mov	r0, r8
 8003722:	47d0      	blx	sl
 8003724:	3001      	adds	r0, #1
 8003726:	d0ab      	beq.n	8003680 <_printf_i+0x164>
 8003728:	6823      	ldr	r3, [r4, #0]
 800372a:	079b      	lsls	r3, r3, #30
 800372c:	d413      	bmi.n	8003756 <_printf_i+0x23a>
 800372e:	68e0      	ldr	r0, [r4, #12]
 8003730:	9b03      	ldr	r3, [sp, #12]
 8003732:	4298      	cmp	r0, r3
 8003734:	bfb8      	it	lt
 8003736:	4618      	movlt	r0, r3
 8003738:	e7a4      	b.n	8003684 <_printf_i+0x168>
 800373a:	2301      	movs	r3, #1
 800373c:	4632      	mov	r2, r6
 800373e:	4649      	mov	r1, r9
 8003740:	4640      	mov	r0, r8
 8003742:	47d0      	blx	sl
 8003744:	3001      	adds	r0, #1
 8003746:	d09b      	beq.n	8003680 <_printf_i+0x164>
 8003748:	3501      	adds	r5, #1
 800374a:	68e3      	ldr	r3, [r4, #12]
 800374c:	9903      	ldr	r1, [sp, #12]
 800374e:	1a5b      	subs	r3, r3, r1
 8003750:	42ab      	cmp	r3, r5
 8003752:	dcf2      	bgt.n	800373a <_printf_i+0x21e>
 8003754:	e7eb      	b.n	800372e <_printf_i+0x212>
 8003756:	2500      	movs	r5, #0
 8003758:	f104 0619 	add.w	r6, r4, #25
 800375c:	e7f5      	b.n	800374a <_printf_i+0x22e>
 800375e:	bf00      	nop
 8003760:	08003a71 	.word	0x08003a71
 8003764:	08003a82 	.word	0x08003a82

08003768 <_sbrk_r>:
 8003768:	b538      	push	{r3, r4, r5, lr}
 800376a:	4d06      	ldr	r5, [pc, #24]	; (8003784 <_sbrk_r+0x1c>)
 800376c:	2300      	movs	r3, #0
 800376e:	4604      	mov	r4, r0
 8003770:	4608      	mov	r0, r1
 8003772:	602b      	str	r3, [r5, #0]
 8003774:	f7fd fcc8 	bl	8001108 <_sbrk>
 8003778:	1c43      	adds	r3, r0, #1
 800377a:	d102      	bne.n	8003782 <_sbrk_r+0x1a>
 800377c:	682b      	ldr	r3, [r5, #0]
 800377e:	b103      	cbz	r3, 8003782 <_sbrk_r+0x1a>
 8003780:	6023      	str	r3, [r4, #0]
 8003782:	bd38      	pop	{r3, r4, r5, pc}
 8003784:	200003f8 	.word	0x200003f8

08003788 <__sread>:
 8003788:	b510      	push	{r4, lr}
 800378a:	460c      	mov	r4, r1
 800378c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003790:	f000 f8a0 	bl	80038d4 <_read_r>
 8003794:	2800      	cmp	r0, #0
 8003796:	bfab      	itete	ge
 8003798:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800379a:	89a3      	ldrhlt	r3, [r4, #12]
 800379c:	181b      	addge	r3, r3, r0
 800379e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80037a2:	bfac      	ite	ge
 80037a4:	6563      	strge	r3, [r4, #84]	; 0x54
 80037a6:	81a3      	strhlt	r3, [r4, #12]
 80037a8:	bd10      	pop	{r4, pc}

080037aa <__swrite>:
 80037aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80037ae:	461f      	mov	r7, r3
 80037b0:	898b      	ldrh	r3, [r1, #12]
 80037b2:	05db      	lsls	r3, r3, #23
 80037b4:	4605      	mov	r5, r0
 80037b6:	460c      	mov	r4, r1
 80037b8:	4616      	mov	r6, r2
 80037ba:	d505      	bpl.n	80037c8 <__swrite+0x1e>
 80037bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80037c0:	2302      	movs	r3, #2
 80037c2:	2200      	movs	r2, #0
 80037c4:	f000 f868 	bl	8003898 <_lseek_r>
 80037c8:	89a3      	ldrh	r3, [r4, #12]
 80037ca:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80037ce:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80037d2:	81a3      	strh	r3, [r4, #12]
 80037d4:	4632      	mov	r2, r6
 80037d6:	463b      	mov	r3, r7
 80037d8:	4628      	mov	r0, r5
 80037da:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80037de:	f000 b817 	b.w	8003810 <_write_r>

080037e2 <__sseek>:
 80037e2:	b510      	push	{r4, lr}
 80037e4:	460c      	mov	r4, r1
 80037e6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80037ea:	f000 f855 	bl	8003898 <_lseek_r>
 80037ee:	1c43      	adds	r3, r0, #1
 80037f0:	89a3      	ldrh	r3, [r4, #12]
 80037f2:	bf15      	itete	ne
 80037f4:	6560      	strne	r0, [r4, #84]	; 0x54
 80037f6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80037fa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80037fe:	81a3      	strheq	r3, [r4, #12]
 8003800:	bf18      	it	ne
 8003802:	81a3      	strhne	r3, [r4, #12]
 8003804:	bd10      	pop	{r4, pc}

08003806 <__sclose>:
 8003806:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800380a:	f000 b813 	b.w	8003834 <_close_r>
	...

08003810 <_write_r>:
 8003810:	b538      	push	{r3, r4, r5, lr}
 8003812:	4d07      	ldr	r5, [pc, #28]	; (8003830 <_write_r+0x20>)
 8003814:	4604      	mov	r4, r0
 8003816:	4608      	mov	r0, r1
 8003818:	4611      	mov	r1, r2
 800381a:	2200      	movs	r2, #0
 800381c:	602a      	str	r2, [r5, #0]
 800381e:	461a      	mov	r2, r3
 8003820:	f7fd fc21 	bl	8001066 <_write>
 8003824:	1c43      	adds	r3, r0, #1
 8003826:	d102      	bne.n	800382e <_write_r+0x1e>
 8003828:	682b      	ldr	r3, [r5, #0]
 800382a:	b103      	cbz	r3, 800382e <_write_r+0x1e>
 800382c:	6023      	str	r3, [r4, #0]
 800382e:	bd38      	pop	{r3, r4, r5, pc}
 8003830:	200003f8 	.word	0x200003f8

08003834 <_close_r>:
 8003834:	b538      	push	{r3, r4, r5, lr}
 8003836:	4d06      	ldr	r5, [pc, #24]	; (8003850 <_close_r+0x1c>)
 8003838:	2300      	movs	r3, #0
 800383a:	4604      	mov	r4, r0
 800383c:	4608      	mov	r0, r1
 800383e:	602b      	str	r3, [r5, #0]
 8003840:	f7fd fc2d 	bl	800109e <_close>
 8003844:	1c43      	adds	r3, r0, #1
 8003846:	d102      	bne.n	800384e <_close_r+0x1a>
 8003848:	682b      	ldr	r3, [r5, #0]
 800384a:	b103      	cbz	r3, 800384e <_close_r+0x1a>
 800384c:	6023      	str	r3, [r4, #0]
 800384e:	bd38      	pop	{r3, r4, r5, pc}
 8003850:	200003f8 	.word	0x200003f8

08003854 <_fstat_r>:
 8003854:	b538      	push	{r3, r4, r5, lr}
 8003856:	4d07      	ldr	r5, [pc, #28]	; (8003874 <_fstat_r+0x20>)
 8003858:	2300      	movs	r3, #0
 800385a:	4604      	mov	r4, r0
 800385c:	4608      	mov	r0, r1
 800385e:	4611      	mov	r1, r2
 8003860:	602b      	str	r3, [r5, #0]
 8003862:	f7fd fc28 	bl	80010b6 <_fstat>
 8003866:	1c43      	adds	r3, r0, #1
 8003868:	d102      	bne.n	8003870 <_fstat_r+0x1c>
 800386a:	682b      	ldr	r3, [r5, #0]
 800386c:	b103      	cbz	r3, 8003870 <_fstat_r+0x1c>
 800386e:	6023      	str	r3, [r4, #0]
 8003870:	bd38      	pop	{r3, r4, r5, pc}
 8003872:	bf00      	nop
 8003874:	200003f8 	.word	0x200003f8

08003878 <_isatty_r>:
 8003878:	b538      	push	{r3, r4, r5, lr}
 800387a:	4d06      	ldr	r5, [pc, #24]	; (8003894 <_isatty_r+0x1c>)
 800387c:	2300      	movs	r3, #0
 800387e:	4604      	mov	r4, r0
 8003880:	4608      	mov	r0, r1
 8003882:	602b      	str	r3, [r5, #0]
 8003884:	f7fd fc27 	bl	80010d6 <_isatty>
 8003888:	1c43      	adds	r3, r0, #1
 800388a:	d102      	bne.n	8003892 <_isatty_r+0x1a>
 800388c:	682b      	ldr	r3, [r5, #0]
 800388e:	b103      	cbz	r3, 8003892 <_isatty_r+0x1a>
 8003890:	6023      	str	r3, [r4, #0]
 8003892:	bd38      	pop	{r3, r4, r5, pc}
 8003894:	200003f8 	.word	0x200003f8

08003898 <_lseek_r>:
 8003898:	b538      	push	{r3, r4, r5, lr}
 800389a:	4d07      	ldr	r5, [pc, #28]	; (80038b8 <_lseek_r+0x20>)
 800389c:	4604      	mov	r4, r0
 800389e:	4608      	mov	r0, r1
 80038a0:	4611      	mov	r1, r2
 80038a2:	2200      	movs	r2, #0
 80038a4:	602a      	str	r2, [r5, #0]
 80038a6:	461a      	mov	r2, r3
 80038a8:	f7fd fc20 	bl	80010ec <_lseek>
 80038ac:	1c43      	adds	r3, r0, #1
 80038ae:	d102      	bne.n	80038b6 <_lseek_r+0x1e>
 80038b0:	682b      	ldr	r3, [r5, #0]
 80038b2:	b103      	cbz	r3, 80038b6 <_lseek_r+0x1e>
 80038b4:	6023      	str	r3, [r4, #0]
 80038b6:	bd38      	pop	{r3, r4, r5, pc}
 80038b8:	200003f8 	.word	0x200003f8

080038bc <__malloc_lock>:
 80038bc:	4801      	ldr	r0, [pc, #4]	; (80038c4 <__malloc_lock+0x8>)
 80038be:	f7ff bb1d 	b.w	8002efc <__retarget_lock_acquire_recursive>
 80038c2:	bf00      	nop
 80038c4:	200003ec 	.word	0x200003ec

080038c8 <__malloc_unlock>:
 80038c8:	4801      	ldr	r0, [pc, #4]	; (80038d0 <__malloc_unlock+0x8>)
 80038ca:	f7ff bb18 	b.w	8002efe <__retarget_lock_release_recursive>
 80038ce:	bf00      	nop
 80038d0:	200003ec 	.word	0x200003ec

080038d4 <_read_r>:
 80038d4:	b538      	push	{r3, r4, r5, lr}
 80038d6:	4d07      	ldr	r5, [pc, #28]	; (80038f4 <_read_r+0x20>)
 80038d8:	4604      	mov	r4, r0
 80038da:	4608      	mov	r0, r1
 80038dc:	4611      	mov	r1, r2
 80038de:	2200      	movs	r2, #0
 80038e0:	602a      	str	r2, [r5, #0]
 80038e2:	461a      	mov	r2, r3
 80038e4:	f7fd fba2 	bl	800102c <_read>
 80038e8:	1c43      	adds	r3, r0, #1
 80038ea:	d102      	bne.n	80038f2 <_read_r+0x1e>
 80038ec:	682b      	ldr	r3, [r5, #0]
 80038ee:	b103      	cbz	r3, 80038f2 <_read_r+0x1e>
 80038f0:	6023      	str	r3, [r4, #0]
 80038f2:	bd38      	pop	{r3, r4, r5, pc}
 80038f4:	200003f8 	.word	0x200003f8

080038f8 <_init>:
 80038f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80038fa:	bf00      	nop
 80038fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80038fe:	bc08      	pop	{r3}
 8003900:	469e      	mov	lr, r3
 8003902:	4770      	bx	lr

08003904 <_fini>:
 8003904:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003906:	bf00      	nop
 8003908:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800390a:	bc08      	pop	{r3}
 800390c:	469e      	mov	lr, r3
 800390e:	4770      	bx	lr
